United StatesDistrict Court

«I

Nonbent District of Califonua

Case No. 42U«:v-USUUU-YGR
CaseTitle EpicGnnnn,Inc v..tpp66 Inc Exltibit No. DX-5492
Date Entered ssrrs Ys. ««ns chal
slv Clot

Apple Platform Security

CONFIDENTIAL

Fall 2020
DX-5492.001

APL-EG 08874774

Reviewer's Guide How is it organized'P What's new'P What's updated'P How do I review this content7
Introduction to Apple platform security A commitment to security
Hardware secUI Ity BAcl biometl lcs Hal'clwal'e secUrl ty ovel'view Apple SoC security Secure Enclave Touch ID and Face IID
I-lardware microphonedisconnect
Express Cards with power reserve
System security System security overview Secure boot SecLIre software Upciates
Qperatlng systemIAtegrlty
Aciclltlonai rnacQS systelTI secul'Ity capabllltles System security for watchQS
RBAQIQIYI ALlmbel" genel'atIQA
Apple Security Research l3evice

E A c I"ypt I 0 A B Acl l3 a t B P I0"'t e c t Io A QveI'vIew Passcocies enclpasswol'cls l3ata Protection

Appfe PIBIIGfm SPCUIIt x
CONFIDENTIAL

DX-5492.002

APL-EG 08874775

FileVault How Apple pl'Qtects Llsel"s' personaI clata l3lgl'tal slgnIAg Bncl encl'yptlon
App security App security overview App security in iGS and iPadGS App security in macGS Secure features in the Notes app Secure features in the Shortcuts app
Services security Services security overview Apple ID and Managed Apple II3 iCloud Passcocle Bncl passwol'cl ITIanagement Apple Pay IMessage Secure Business Chat usingthe Messages app FaceTime security Find My Continuity Car keys security in iGS
Network security Network security overview TLS security IPv6 security Virtual private network (VPN) security Wi-Fi security Bluetooth security Ultra Wideband security in iGS Single sign-on security AirDrop security Wi-Fi password sharing security Qn iPhone and iPad Firewall security in macGS

l3eve loper kit security overview HomeKit

Apple PIBIIGI tH SPCUI Itg
CONFIDENTIAL

DX-5492.003

90
'I 03 'I 07 108 'I'I0
'I 50 153 160
APL-EG 08874776

CloudKit security SiriKit security for iQS, iPadQS, and watchQS DriverKit security for macQS 'IQ.'l5 ReplayKit security in iQS and iPadQS ARKit security in iQS and iPadQS

Secure device management overview Pairing model security for iPhone and iPad Mobile device management Apple Configurator 2 security Screen Time security

Apple secul lty Bnd pl lvacy eel tlflcatlons

Introduction to Apple secull'Ity and pl'Ivacy cel"tlflcatlons

Apple secul'I'ty Bssull'ance

190

Glossary

Document revision history

Apple PIBIIGI tH SpcUI Itg
CONFIDENTIAL

DX-5492.004

APL-EG 08874777

Reviewer's Guide

Vyelcerne to the Fall 2020 update to the Apple Platform Security decumeritation! This documentation is designed for our customers, especially (but not limited to) securityconscious users, pro users, educators, !T administrators for enterprise and educational organizations, healthcare, governments and government institutions, security researchers, and ITlore.
This is the PDF version of the website (internal version here). At the bottom of each webpage are forward and backward buttons that take the reader to the previous or next. topic. The table of contents is just a click away and a link at the bottom of the welcome page will (when the content goes live) download a PDF for the reader.
The search bar won't work on the internal version, only the external, public version.
How is it organized'7
The content is organized to more closely follow our massaging pillars: hardware, software (OS/system and apps), services, and networking. The Table of Contents shows the complete list of high-level sections. The follovring terms are used in the construction of this documentation:
Sectibns: Contain at least two (generally more) topics and when tapped or clicked, disclose the topics in their respec'tive sections. · Topics: A single page.
Subheads: Bolded headers within a topic. · Asides: Pop-up glossary terms that assist the reader in quickly learning about an
importnat term.
See A/so ifhksr Links that allow the user to. jump to a related topic, subhead, or URL.
What's new'7
We are delighted to have so much new content! The major new areas are as follows (these links will take you to the specific area of the PDF):

isoot M'1 hoot process M'1 hoot modes
Apple Platform Security
CONF I l3ENTIAL

Memory safe iBoot implementation Boot process for a Mac with Apple silicon Boot modes for a Mac with Apple silicon
APL-EG 08874778

Startup Security utility
LocalPolicy.sign'ing Local polioy file oontenta
Signed.system volume ftesearch device Password monttoring IPve content Cal keys

Focus Startup Disk security policy control for a Mac with Apple silicon LocalPollcy signing-key creation and management
Contents of a LocaIPolicy file for a Mac with Apple silicon Signed system volume security in maoOS Apple Security Research Device
Password Monitoring IPv6 security Car keys security in iQS

Wh8t's Updeted'?
major Some existing content has gone through a major Overhaul. Areas that received
updates are as follows (these links will jurnp you te the specific area of the PDF):

Aires Secure Enclave Internet recovery add'ed
DMA protections
S I P watehQS security content FileVault Saved passwordls Password security Appl'e Cash
Wl-Fl Activation Lock Apple Configurator 2

Secure Enclave recoveryQS and diagnostics environments for an lntelbased Mac Direct memory access protections for Mac computers Kernel extensions in macOS System Integrity Protection System security for watchQS Managing Fllevault in macOS App access to saved passwords
Password security recommendations
Apple Cash security in iOS, iPadOS, and watchOS Secure BusinessChat using the Messages app Wi-Fi privacy Activation Lock security Apple Configurator 2 security

Apple Platform Security
CONF I l3ENTIAL

APL-EG 08874779

How do I review this content?
You have the PDF and access to the website. Every attempt has been made to highlight the major new areas (New Topic) and major updates (Updated Topic) to the documentation. The Preview app may not show notes and highlights in a linear, time-based order and there is currently no way to reorder notes and highlights.

1. You can review this PDF and on your iPad (recommended for the website), Mac, or other device on which you want to review this documentation, go to https://supportb.corp. apple.corn/guide/security/, then if necessary, enter yourAppleConnect ID and password.
Important: Images may load slowly on this internal site. This is because all images for internal documentation reside on a secure server. Once live, the external site will be as fast as all other Apple websites.

2. Review the PDF and -- if you prefer -- the website content, making note of new and updated sections, topics, and content in the PDF.

3. When reviewing the PDF, select Highlights and Notes from the View menu.

4. Mark directly in the PDF or note areas where you have questions, comments, or

d g d ·m

g id m g t ~

We are looking forward to having the website update go live! Thank you for taking the time to review what we consider some of the most important documentation Apple has ever produced for our customers.

David Thompson (WW Product Marketing)

Schoun Regan (Instructional Designer)

Apple Platdg m Seed ty
CONFIDENTIAL

DX-5492.007

APL-EG 08874780

Apple designs security into the core of its platforms. Building on the experience of creating the world's most advanced mobile operating system, Apple has created security architectures that address the unique requirements of mobile, watch, desktop, and home.
Every Apple device combineshardware, software, and services designed to work together fol IYIaxllTIUITI secUI'Ity 3AQI 3 transpal'Bnt User expel'IBAce In sel'vice of th e UltllTIate goal of keeping personal information safe. For example, Apple-designed silicon and security hardware powers critical security features. And software protections work to keep the Gpel'atlng systeITI and thll"cl-party apps protected. FIAally, sel'vices pl'Gvlcle 3 ITIechanlsITI fol' secUre ancl timely softwal'B Upclates, power 3 pl'otectecl app BcosysteIYI, ancl facllltate secure communications and payments. As a result, Apple devices protect not only the device and its data but the entire ecosystem, including everything users do locally, on networks, and with key internet services.
Just as we design our products to be simple, intuitive, and capable, we design them to be secure. Key security features, such as hardware-based device encryption, can't be disabled by mistake. Other features, such as Touch IID and Face ID, enhance the user experience by making it simpler and more intuitive to secure the device. And because many of these features are enabled by default, users or IT departments don't need to perform BXteAslve CGAflg Ul'atlOAs.
This documentation provides details about how security technology and features are implemented within Apple platforms. It also helps organizations combine Apple platform security technology and features with their own policies and procedures to meet their speclflc secUrlty Aeecls.
The content is organized into the following topic areas:
I-lardware security and biometrics: The silicon and hardware that forms the foundation for security on Apple devices, including the Secure Enclave, a dedicated AES cryptographic engine, Touch ID, and Face ID
System security: The integrated hardware and software functions that provide for the safe boot, update, and ongoing operation of Apple operating systems
Encl yptlon and Data Pl otectlon: The archltectUIre ancl designthat pl otects Usel" clata
if the device is lost or stolen or if an unauthorized person or process attempts to use or
ITIQCllfy lt
App secLII lty: The softwal'B ancl servllces that provlcle 3 safe app ecosysteITI ancl BAable apps to I'LIA secUI"Bly and wlthQUlt compl"QITIIslng platfol'IYI Integl'Ity
Services security: Apple's services for identification, password management, payments, communications, and finding lost devices

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.008

APL-EG 08874781

Network security: Industry-standard networking pratacols that pravfde secure
O'Uth'Brit}ca'tlali 'arid Bile}'yptlon of data }n tl"Blisrillsslari
Developer kit security: Frameifark "kits"" for secure and private management of home and health, as well as extension of Apple device and service capabilities to third-party apps
Secure device management:Methods that allaw mariagement of Apple devices,
prevent unautharfzed use, and enable remote wipe if a device is lost or stolon
· Apple security end privacy cortifications: Information on ISO certifications, cryptographic validation by the Cryptographic Module Validation Program (CMVP), Common Criteria Certification, and the Commercial Solutions for Classified (CSfC)
PI'ag ram
A commitment to security
Apple is committed to helping protect customers with leading privacy Bnd security
technologies -- designed to safeguard personal information -- andcomprehensive mtehods,
ta help protect corporate data in an enterprfse onvfronment. Apple rewards researchers far the work they do to uncover- vulnerabilities by offering the Apple Security Bounty, Details of the pragrarn and bounty categories are available at https:odeveloper.apple.corn/securltybounty/.
vve maintain 8 dedicated socUI lty teani t'o sUppal"t all Apple products. The t68m plovldes security auditing Bnd testing for products, bath under development Bnd released. The Apple team also provides security tools and training, and actively monitors for threats and reports af new security issues. Apple is a member' af the. Forum of Incident Response and Security Teams (FIRST).
Apple cantinues to push the boundaries of what's passible fn security and prfvacy. This year Apple devices With Apple SoC's across the praduct lineup from Apple Watch to fPhone and iPBd, Bnd now Mac, utilize custom silicon ta power not only. efficient computation, but also security. Apple silicon farms the foundation for secure boot, Tauch ID and Face ID,,Bnd Data Protection, as well as system integrity features never before featured an the Mac including Kernel Integrity Protection, Pointer Authentication codes, Bnd Fast Permissian Restrictians. These integrity features help prevent. common attack techniques that target memory,, manipulate instructions, and use javascrfpt on the web. They combine ta help make sure that even if attacker cade sameholw executes, the damage it can do is dramatical fy reduced-
To make the mast af the extensive security features built inta aur platfarnl, organizations are encouraged ta revievlr their IT Bnd security poifcies to ensure that they are taking full advantage of the layers of security technology offered by these platforms.
To learn more about reporting issues to Apple and subscribing to security notifications, see Report a security or privacy vulnerability.
Apple believes privacy is 8 fundamental human right and has numerous built-in controls end options that Bffow users ta decide how and when opps use thefr information, as well Bs what Information is being used. To learn more about Apple's approach to privacy, privacy controls on Apple devices, and the Apple privacy palicy, soe https://www.apple. co nl/p I I va cy.

Apple Platform Security
CONF I l3ENTIAL

APL-EG 08874782

Mote: Unless otherwise noted, this documentation covers the following operating system versions: iQS 14.2.1, iPadQS '14.2, macQS 11.1, tvQS 14.2, and watchQS 7.1.

AppfB PIBtfpffH SPCUIItg
CONFIDENTIAL

DX-5492.01 0

APL-EG 08874783

For software to be secure, it must rest on hardware that has security built in. That's why Apple devices -- running iGS, iPadOS, macOS, watchQS, or tvQS -- have security capabilities designed into silicon. These capabilities include a CPU that powers system security features, and silicon that's dedicated to security functions. Security-focused hardware follows the principle of supporting limited and discretely defined functions in order to minimize attack surface. Such components include a boot RQM, which forms a hardware root of trust for secure boot, dedicated AES engines for efficient and secure encryption and decryption, and a Secure Enclave. The Secure Enciave is a system on chip (SoC) that appears on all recent iPhone, iPad, Apple Watch, Apple TV and I-lomePod devices, and on a Mac with Apple silicon as well as those with the Apple T2 Security Chip. The Secure Enclave itself follows the same principle of design as the SQC does, contaiining its own discrete boot RQM and AES engine. The Secure Enclave also provides the foundation for the secLIre geABI'atloA ancl stol'age of the keys Aecessal'y fol' encl"yptlng clata at I'Bst, aAcl It protects and evaluates the biometric data for Touch ID and Face ID.
Storage encl"yptlon IYIust be fast aAcl eff relent. At the same tllTIB, lt can't expose the clata (or keying materia/) it uses to establish cryptographic keying relationships. The AES hardware engine solves this problem by performing fast in-line encryption and decryption as files are vvrr'ffen or read. A special channel from the Secure Enclave provides necessary keying material to the AES engine without exposing this information to the Application Processor (or CPU) or overall operating system. This ensures that the Apple Data Protection and FileVau t technologies protect users' files without exposing long-lived encryption keys.
Apple has designed secure boot to protect the lowest levels of software against t ampering
and to a low only trusted Operating system software from Apple to load at startup. Secure boot begins in immutable code called the Boot RGM, which is laid down during Apple SoC
fabrlcatlon ancl known as the fral dwar eI Qof of fl List. GA Mac computers with a T2 chip,
trust for macQS secure boot begins with the T2. (Both the T2 chip and the Secure Enclave also execute their own secure boot processes using their own separate boot RQM -- this is an exact analogue to how the A-series and Tonga chips boot securely.)
The Secure Enclave also processes fingerprint and face data from Touch ID and Face ID face sensors in Apple devices. This provides secure authentication while keeping user brornetrlc clata pnvate ancl secLlre. It also BAables users to BA)oy the security Qf longer aACI ITIQre colYlplex passcodes and passwor'cls with, In rnaAy sltLIatloAs, the convenience Qf swift authentication for access or purchases.

Appfe PIBIIGfm sppUIIt x
CONFIDENTIAL

DX-5492.01 1

APL-EG 08874784

Apple Soc security
Apple-designed silicon now,powers Mac as well as iPhone, iPad,, Apple TV, and Apple Watch. For over a decade, Apple's world-class silicon design team has been buildrng and refining Apple systems on chip (SoCS3. The result is a scalable architecture designed f' or all devices that leads the industry in security capabilities. Apple-designed silicon forms a common architecture acr'oss all Apple products.- And it provides a common foundation for security features only possible flem a COmpany that designs its own silicon to woik with its softwaf'e.
Apple silicori has been designed and fabricated to specifically eriab}e the system security features detailed below.

Feat trre

Al 0

Kernel
Integrity Protection

Fast Permission Restrictions

System Coprocessor Integrity Protection

Pointer Authentication Codes
Page Protection Layer

All, 88

A)Q, 84

Ala, 85

A14, 88'

Ml

Bee Note below.

Nate: Page Protection Layer (PPL) requires that the platform only execute signed and trusted code; this is a security model that isn't relevant for macOS.
Apple-designed silicon also specifically enables the l3ata Protection capabilities detailed 'below.

Featuf.e

Sealed Key

©

Protection ISKP)

recoveryos -- AII Data Protection Classes protected

All, SS

A12, 84

A18,, 88

A14, Ml, 88

Apple Platform Security
CONF I l3ENTIAL

Feature
Alternate boots of DFU, Diagnostics, and Update -- Class A, 8, and C data protected

A11, 88

A12, 84

A18,, 88

A14, M1, 88

Apple Platform Security
CONFIDENTIAL

Secure Enclave
Gverview
The Secure Enclave is a dedicated secure subsystem integrated in Apple systems on chip (SGCS). The Secure Enclave is isolated from the main processor to provide an extra layer of security arid is designed to keep sensitive user data secure even when the Application
Processor kernel (for example, in iOS,, iPadOS, and rnacOS) becomes Compromised.Recent
designs follow the same design principles as the soc does a boot RoM to establish a hard'@are root Gf 'tl'ust, an AES'Brigirie for efficient and secul"8 cryptogra'phlc operations, and protected memory. Although the Secure Ericlave doesn "t include storage, it has a mechanism to store information securely' on attached storage separate from the NANI3 flash stolag'8 that~s Used by the Applicat}on Piocessol anci Gpel"ating SystelTl.
MAND flesh storage

Apprtcetlgn Proces®ttr

NAND flesh central'ler AES .engirie

Memory eon(roller,

Secure Enclave AES 'Engine

Secure Enclave prcces8oir

Memory iarctectlen Engitle

Secure Nenveiettle Storage The Secure Enslave components.

Secure EtTcle>e Syetertt cn chip

The Secure Enclave is 8 hardware feature Gf mast versions Gf iPhone, ipad, Mac, Apple TV, Apple Watch,and Homepod -- namely:

Apple Platform Security
CONF I l3ENTIAL

DX-5492.Q14

APL-EG 08874787

iPhone 5s or later iPad Air or later MacBook Pro computers with Touch Bar (2616 and 20'l7) that contain the Apple T1 Chip lintel-based Mac computers that contain the Apple T2 Security Chip Mac computers with Apple silicon Apple TV HD or later Apple Watch Series 1 or later HomePQd and I-lomePod mini
The Secure Enclave Processor provides the main computing power for the Secure Enclave. To provide the strongest isolation, the Secure Enclave Processor is dedicated solely for Secure Enclave use. This helps prevent side-channel attacks that depend on malicious software shal'IAg the same BXBCUtlon col'e as the tal"get softwal'e Llnder attack.
The Secure Enclave Processor runs an Apple-customized version of the L4 microkernel. It's designed to operate efficiently at a lower clock speed that helps to protect it against clock and power attacks. The Secure Enclave Processor, starting with the A1'I and S4, is designed using many of the same principles as Apple Application Processors (for example, the A-sel'Ies A'll ancl abovL), ancl thLIs shares ITIany of the saITIB secUII'Ity featUI'es In aclclltlon to IACILIcllng a lYlemory pl'Qtectecl BAglne ancl encryptecl ITIernory with anti-I'eplay capabllltles, secUI'e boot, a clecllcatecl I'aAdom AUITlbel' geABI'atol', ancl Its QwA AES engine.
The Secure Enclave operates from a dedicated region of the the device's DRAM memory. Multiple layers of protection isolate the Secure Enclave protected memory from the Application Processor.
When the device starts up, the Secure Enclave Boot RGM generates a random ephemeral memory protection key for the Memory Protection Engine. Whenever the Secure Enclave writes to its dedicated memory region, the Memory Protection Engine encrypts the block of memory using AES in Mac XEX (xor-encrypt-xor) mode, and calculates a Cipherbased Message Authentication Code (CMAC) authentication tag for the memory. The Memory Protection Engine stores the authentication tag alongside the encrypted memory. When the Secure Enclave reads the memory, the Memory Protection Engine verifies the
authentication tag. If the authentication tag matches, the MemoryProtection Engine
decrypts the block of memory. If the tag doesn't match, the Memory Protection Engine signals an error to the Secure Enclave. After a memory authentication error, the Secure Enclave stops accepting requests until the system is rebooted.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.01 5

APL-EG 08874788

Starting with the Apple A'l1 and S4 SoCs, the Memory Protection Engine adds replay
protection for Secure Enclave memory. To prevent replay of security-critical data, the Memory Protection Engine stores a nonce for the block of memory alongside the authentication tag. The nonce is used as an additional tweak for the CMAC authentication tag. The nonces for all memory blocks are protected using an integrity tree rooted in dedicated SRAM within the Secure Enclave. For writes, the Memory Protection Engine updates the nonce and each level of the integrity tree up to the SRAM. For reads, the Memory Protection Engine verifies the nonce and each level of the integrity tree up to the
SRAM. Nonce mismatches are hand ed similralyto authentication tag mismatches.
Qn Apple A'l4 and later SoCS, the Memory Protection Engine supports two ephemera memory protection keys. The first iis used for data private to the Secure Enclave, and the second is used for data shared with the Secure Neural Engine.
The Memory Protection Engine operates inline and transparently to the Secure Enclave. The Secure Enclave reads and writes memory as if it were regular unencrypted l3RAM, whereas an observer outside the Secure Enclave sees only the encrypted and authenticated version of the memory. The result is strong rnernory protection without performance or software complexity tracleoffs.
The Secure Enclave includes a dedicated Secure Enc ave Boot RQM. Like the App ication Processor Boot RQM, the Secure Enc ave Boot RQM is immutable code that establishes the hardware root of trust for the Secure Enclave.
On system startup, iBoot assigns a dedicated region of memory to the Secure Enclave. Before using the memory, the Secure Enclave Boot RQM initializes the Memory Protection Engine to provide cryptographic protection of the Secure Enclave protected memory.
The Application Processor then sends the sepQS image to the Secure Enclave Boot RQM. After copying the sepQS image into the Secure Enclave protected memory, the Secure Enclave Boot RQM checks the cryptographic hash and signature of the image to verify that
the sepOS is authorized to run on the device. If the sepQS i mageis properly signed to run
on the device, the Secure Enclave Boot RGM transfers control to sepQS. If the signature isn't valid, the Secure Enclave Boot RGM prevents any further use of the Secure Enclave until the next chip reset.
Qn Apple A'IG and later SoCs, the Secure Enclave Boot RQM locks a hash of the sepGS into a register dedicated to this purpose. The Public Key Accelerator uses this hash for operating-system-bound (GS-bound) keys.
Qn Apple A13 and later SoCs, the Secure Enclave includes a Boot Monitor to ensure stronger integrity on the hash of the booted sepQS.

Appfe PIBtfGfm SPCUIIt x
CONFIDENTIAL

DX-5492.016

APL-EG 08874789

At system startup, the Secure Enclave Processor's System Coprocessor Integrity
Protection (SCIP) configuration prevents the Secure Enclave Processor from executing any code other than the Secure Enclave Boot RQM. The Boot Monitor prevents the Secure Enclave from modifying the SCIP configuration directly. To make the loaded sepQS executable, the Secure Enclave Boot RQM sends the Boot Monitor a request with the address and size of the loaded sepQS. Qn receipt of the request, the Boot Monitor resets the Secure Enclave Processor, hashes the loaded sepQS, updates the SCIP settings to allow execution of the loaded sepQS, and starts execution within the newly loaded code. As the system continues booting, this same process is used whenever new code is made executable. Each time, the Boot Monitor updates a running hash of the boot process. The Boot Monitor also includes critical security parameters in the running hash.
When boot completes, the Boot Monitor finalizes the running hash and sends it to the Public Key Accelerator to use for QS-bound keys. This process is designed so that operating system key binding can't be bypassed even with a vulnerability in the Secure EncIave Boot RQ M.
The True Random Number Generator (TRNG) is used to generate secure random data. The Secure Enclave uses the TRNG whenever it generates a random cryptographic key, random key seed, or other entropy. The TRNG is based on multiple ring oscillators post processed with CTR l3RBG (an algorithm based on block ciphers in Counter Mode).
The Secure Enclave includes a unique ID (UII3) root cryptographic key. The UIID is unique to each individual device and isn't related to any other identifier on the device.
A randomly generated UID is fused into the SoC at manufacturing time. Starting with A9 SoCs, the UII3 is generated by. the Secure Enclave TRNG during manufacturing and written to the fuses using a software process that runs entirely in the Secure Enclave. This process
protects the UID from being visible outside the device during manufcaturing and therefore
isn't available for access or storage by Apple or any of its suppliers.
sepQS uses the UID to protect device-specific secrets. The UIID allows data to be cryptographically tied to a particular device. For example, the key hierarchy protecting the file system includes the UIII3, so if the internal SSI3 storage is physically moved from one device to another, the files are inaccessible. Qther protected device-specific secrets include Touch ID or Face ID data. Qn a Mac, only fully internal storage linked to the AES engine receives this leve of encryption. For example, neither external storage devices connected over USB nor PCle-based storage added to the 20 "l9 Mac Pro are encrypted in this fashion.
The Secure Enclave also has a device group ID (GIID), which is common to all devices that use a given SoC (for example, all devices using the Apple A14 SoC share the same GII3).
The UID and GID aren't available through Joint Test Action Group (JTAG) or other debugging interfaces.

Aopfe PIBtfGfm SPCUIIt x
CONFIDENTIAL

t3X-5492.01 7

APL-EG 08874790

Secure Enclave AES Engine
The Secure Enclave AES Engine is a hardware block used to perform symmetric cryptography based on the AES cipher- The AES Engine is designed ta resist leaking information by using timing and Static Power Analysis (SPA). Starting with the Ag 'SoC, the AES Engine also includes 13ynamic Power Analysis (DPA) countermeasures.
The AES Engine supports hardware and saftware keys. Hardware keys are derived from the Secure Enclav'e UII3 Gr 0113. These keys stay within the AES Engine and ar'en"t made visib}e everi to sepOS software. Although software can request encryption and decryptiori operations with hardware keys, it can"t extract the keys.
On Apple A10 and newer SoCs, the AES Engine includes lockable seed bits that diversify keys derived from the UII3 or GID. This allows data access. to be conditioned on the clevice's mode of operatian. For example, lockable seed bits are usecl to deny access to password-protected data when boating from 13evice Firmware Update (13FU) mode. For mole irlfarmation, see Passcacles ancl passworcls.
AES Engine
Ever'y Apple device with a Secure Enclave. also has a dedicated AES256 crypto. engine (the "AES Engine" ) built inta the direct memory access (DMA) path between the NANI3 (nonvolatile) flash storage and main system memary, making file encryption highly efficient.
On Ag or later A-series processors, the flash storage subsystemis on an isolated bus
that's granted access only to memory containing user data through the 13MA crypto eriglne.
At boat time, SePQS generates an ephemeral wrapping key using the TRNO. The Secure Enclave transmits this key to the AES Engine using dedicated wires to prevent it from being accessed by any.software outside the Secure Enclave. sepQS can then use the. ephemeral wrapping key to wrap file keys for use by the Application Processor file-system driver. When the file-system driver reads or writes a file, it sends the wrapped key ta the AES Engine, which unwraps the key.The AES Engine never expases the unwrapped key to S Gf't War"8,
Note The AES Engine is aseparate component fr'orn bath the Secure Enclave and the Secure Enclave AES Engine, but its operation is closely tied to the Secure Enclave, as shown below.

Apglflcatiprt .Prooestsor
system
Bl&tnary

Sec ura Enjoi ave AES En.girra

NAMD flash storage

The AEs Engine snpports gne-speed. encryption on the GMA path for efficient encryption and decryption of data. is it is written and read to storage.

Apple Platform Security
CONFIDENTIAL

13X-5492.Q18

Public Key Accelerator'
The Publfc Key Accelerator (PKA) is a hardware block used ta perfar'm asymmetric cryptagraphy operations, The PKA supports RsA Bnd Ecc (Elliptic curve cryptography) signing and encryption algorithms. The PKA is designed to resist leaking information using timing and side.-channel attacks.such as SPA and l3PA.
The PKA supports software and hardware keys. Hardware keys are derived from the secure Enclave UID Gr GID. These keys stay within the PKA Bnd aren't made visible even to sepQS sof tware. Starting with A18 SoCs, the PKA's encryption implementatians have been proved ta be mathematically correct using formal verification techniques. On Apple A10 Bnd later SaCs, the PKA supports OS-bound keys, also referred to as Sealed Key Protection (SKP). These keys are generated using B combinatian of the device's UID and the hash Gf the sepOS running an the dev'ice. The hash is provided by' the Secure Enclave Hoot RQM, ar by the Secure Enclave Boot Monitor an Apple A13 and later SoCs. These keys are also used to verify the sepQS version when making requests to certain Apple services and are also used ta improve the security of pBSscade-protected data by helping to prevent access to.keying material if critical changes are made to the system wlthoUt User' authorization;
Secure nonvolatile storage
The Secure Enclave is equipped with a dedicated secure nonvolatile storage device. The secure nonvolatile storage is cannected ta the Secure Enclave using B dedicated l2C bus, sa that it can only be accessed by the Secure Enclave. All user data encryption keys are rooted in entropy stored in the Seeur'e. Enclave nanvolatfle. storage.
In deviceS with A12, S4, and later SGCs, the Secure Enclave is paired with a Secure Storage Chip far entraPy storage. The Secure Storage Chip is itself designed with immuta'ble ROM code, a hardware random rlumber generator,, a per-devfce unique cryptographic key, cryptoqrBPhy engines,,and physical t amper detection.The Secure Enclave Bnd Secure Star'Bge Chip communicate,Using an encrypted Bnd Buthentfcated protocol that pravfd'es exclusive access to the entropy.
Devices first released in Fall 2020 or later are equipped with a 2nd-generation Secure Storage Chip. The 2nd-generation Secure Starage Chip adds counter loekboxes. Each counter lockbox stores a 128-bit.salt,,a 128-bit passcade ver'ifier, an 8-bit Gaunter, Bnd an 8-bit maximum attempt value, Access to the counter- lackboxes is thraugh an encrypted and authenticated protaaal.
Counter lackbaxes ho}d the entropy needed ta urlloek passcade-protracted user data. To access the user data, the paired Secure Enclave must derive the correct passeade entropy valuefram the user'spasscade and the Secure Enclave's UID.The user's passcode can't be learned using unlock attempts sent from a saurce other than the paired Secure Enclave. If the passcode attempt limit is exceeded (far example, 19 attempts an iPhone), the passcade-protected data is erased completely by the Secure Storage Chip.
Apple Platform Security
CONF I l3ENTIAL

To create a counter lockbox,, the Secure Enclave sends the Secure Storage Chip the pesscode entropy value and the maximum attempt value. The Secure Storage Chip generates the salt value using its randem number generator. It then derives a passeade verifier value and a lack'box entropy value from the provided passeode entropy, the Secure Storage Chip's unique cryptographic key, and the salt value. The Secure Storage Chip initializes the counter lockbox with a count of 0, the provided maximum attempt value, the derived passcade verifier value, and the salt. value. The Secure Starage Chip then returns the generated laekbox entropy value to the 'Secure Enclave.
To retrieve the lackbox entrapy value from a counter- lockbox later, the Secure Enclave sends the Secure Storage Chip the passcode entropy. The Secure Storage Chip first increments the counter far the lockbox. If the incremented counter exceeds the maximum attempt value, the Secure Storage Chip complete}y erases the counter lockbax. If the maximum attempt count hasn't been reached, the Secure Storage Chip attempts te derive the passcode verifier value and lockbox entropy value with the same algorithm used ta create the counter }ockbox. If the derived passcode verifier value matches the stored passaode verifier value, the Secure Storage Chip returns the lockbox entropy value to the Secure Enclave and resets the counter to O.
The keys. used ta access password-protected data are rooted in the entropy stored in counter lockboxes, For mare information, see Data Protection overview
The secure nonvolatile storage is used for all anti-replay services in the Secure Enclave. Arltl-rep}ay services on the Secure Enclave are used for revocation of data aver everlts that mark anti-replay boundaries including, but not limited to, the following:
Passeode change · Enab}ing or disab}ing Touch ID or Face l}3 · Adding ar removing a Touch ID fingerprint or Face l}3 face · To u c h II3 o.r Face ID reset
Adding or removing an Apple Payc.ard
Erase All Content and Settings Gn architectures that don"t feature a Secure Storage Chip, EEPROM (e}ectrica}ly erasab}e programmabie read-only memoryj is utilized to provide secure storage services for the Secure Enelav'e. Just like the Secure Storage Chips, the EEPRQM is attached and access}bIe only from the Secure Enclave, but it doesn't contain ded}cated hardi}vere security features nar does it guarantee exclusive access to entropy (aside from i'ts physical attachment. characteristics) nar counter lackbax f'unetianality.
Secure Neural Engine
I3n devices with Face ID, the Secure Neural Engine converts 2D Images and depth maps into a mathematica} representat}on of a user's face. Gn A1'I through O'I3 SoCs, the Secure Neural Engine is integrated into the Secure Enclave.
The Secure Neural Engine uses direct memory access (DMA) for high performanceA. n
input-output memory management unit (IQMMU) under the sepQS kernel's control limits this direct access to authorized memory regions
Apple Platform Security
CONF I l3ENTIAL

Starting with A14, the Secure Neural Engine is implemented as a secure mode in the App ication Processor's Neural Engine. A dedicated hardware security controller switches between Application Processor and Secure Enclave tasks, resetting Neural Engine state Qn each tl'ansltlon to keep Face ID clata secLII'e. A clecllca teel engine applies ITIBITIory encl"yptlon, aLI'thentlcatlon, ancl access conti'ol. At the saITIB tllTIB, lt Lises a sepal'ate cryptographic key and memory range to limit the Secure Neural Engine to authorized
rn 6 ITI Q I'y I'6 g I Q n s.

All electronics are designed to operate within a limited voltage and frequency envelope. When operated outside this envelope, the electronics can malfunctiion and then security conti'ols may I'36 bypassecl. To ensure that the voltage ancl fl'equency stay In a safe range, the Secure Enclave is designed with monitoring circuits.. These monitoring circuits are designed to have a much larger operating enve ope than the rest of the Secure Enclave. If the monitors detect an illegal operating point, the clocks in Secure Enclave automatically stop and don't restart until the next SoC reset.

Note: O'I2, A13, S4, and S5 products first released in Fa I 2020 have a 2nd-generation Secure Storage Chip; while earlier products based on these SoCs have est-generation Secure Storage Chip.

SoC

Memory Protection

Engine

Encryption and BUthentlCa'tlon

EEPROM

Ag

Encryption and

EE PROM

authentication

A10

Encryption,

EEPRQM

aUthentlcatlon, encl

I'Bplay pl'BventIGA

Af 1

Encryption,

EEPRQM

aUthen'tlcatlon, and

I'Bplay pl'BVentlon

A12 (Apple devices released before Fall 2020)

Encryption, BUthentlca'tlon, and I'Bplay pl'Bventlon

A12 (Apple devices released after Fall 2020)

Encryption, authentication, and I'Bplay pl'Bventlon

A13 (Apple devices released before Fall 2020)

Encryption, aUtheAtlcatlon, and replay pl'Bventlon

Af 3 (Apple devices released after Falll 2020)

Encryption, aUthen'tlcatlon, and I'Bplay pl'Bven'tlon

AES Engine No

DPA protection

Yes

DPA protection and Q S -bound keys lockable seed bits

DPA protection and Q S -bound keys lockable seed bits

DPA protection and lockable seed bits

QS-bound keys

DPA protection and lockable seed bits

QS-bound keys

DPA protection and QS-bound keys and lockable seed bits Boot Monitor

DPA protection and lockable seed bits

Apple FIB IIGI In Seoul I ly
CONFIDENTIAL

DX-5492.021

APL-EG 08874794

Soc

Memory Protection S e c ure Storage

Engine

A'I It

Encryption,

authen'tlcatlon, aBcl

replay pl'eventlon

Encl'VptloB and authentication

EE PROM

Encryption, authentication, and I'eplay pl'eventlon

Ss (Apple devices released before Fall 2020)

Encryption, authentication, and I'eplay pl'eventlon

Ss (Apple devices released after Fall 2020)

Encryption, authen'tlcatlon, aBcl replay pl'eventlon

Encryption, authentlcatloB, aBd I'eplay pl'even'tlon

T2

Encryption and

authentication

Encryption, authentication, and replay pl'eventlon

AES Engine

PKA

DPA protection and lockable seed bits

QS-bound keys and Boot Moni tor

DPA protection and lockable seed bits

DPA protection and lockable seed bits

QS-bound keys

DPA protection and lockable seed bits

QS-bound keys

DPA protection and QS-bound keys lockable seed bits

DPA protection and lockable seed bits

DPA protection and lockable seed bits
DPA protection and OS-bound keys and lockable seed bits Boot Monitor

Passcocles ancl passwoi'cls are essential to the security Qf Apple clevices. At the saITIB tllTIB, users need to be able to quickly access their devices, even exceeding a hundred times a clay. EIIGIYletrIc autheAtlcatlon pl'Gvldes a way to I'BtaIA the secul'lty Qf a stl"ong passcocleor even strengthen the passcode or password because it won't often need to be entered manuaIly -- while providing the convenience of swiftly unlocking with a finger press or glance. Touch ID and Face ID don't repiace a passcode or password, but in most situations thBy clo ITIake access fastei' anci easier'.
Touch ID security
Touch ID is the fingerprint sensing system that makes secure access to supported Apple clevlces fastel' ancl easier. This technology I'Bacls flngei'print clata fl'GIYI any angle ancl learns more about a user's fingerprint over time, with the sensor continuing to expand the fingerprint map as additionai overlapping nodes are identified with each use.

Apple PIBIIGI In Secul lly
CONFIDENTIAL

DX-5492.022

APL-EG 08874795

Apple devices with a Touch ll3 sensor can be unlocked using a fingerprint. Touch ID doesn' t replace the need for a device passcode or user password, which is still required after device startup, restart, or logout (on a Mac). In some apps, Touch ID can also be used in place of demce passcode or user password -- for example, to unlock password protected notes in the Notes app, to unlock keychain-protected websites, and to unlock supported app passworcls. Howevel', 3 device passcocle or Usel' passwol'cl Is always I'equll'Bd In some scenarios (for example, to change an existing device passcode or user password or to remove existing fingerprint enro Iments or create new ones).
When the fingerprint sensor detects the touch of a finger, it triggers the advanced imaging al'I"ay to scaA the ffAgel' ancl sencls the scaA to thB SPcUIre EAclave. CQITIITIUIAIca'tloA between the processor and the Touch ID sensor takes place over a serial peripheral interface bus. The processor forwards the data to the Secure Enclave but can't read it. lt's encryptecl ancl 3Llthentlca'teel with 3 session key that's AegotlatPOI UsIAg 3 sharecl key provisioned for each Touch IID sensor and its corresponding Secure Enclave at the factory. For every Touch ID sensor the shared key is strong, random, and different. The session key exchange uses AES key wrapping, with both sides providing a random key that establishes the session key and uses transport encryption that provides both authentication and confidentiality (using AES-CCM).
While the fingerprint scan is being vectorized for analysis, the raster scan is temporarily stored in encrypted memory within the Secure Enclave and then it's discarded. The analysis utilizes subdermal ridge flovv angle mapping, a lossy process that discards "finger minutiae data" that would be required to reconstruct the user's actual fingerprint. The I'esUltlng ITIap of Aocles Is stol'ed wlthoUt 3Ay IOIBAtlty Infol" ITIatioA In 3A encl'yptecl forITIat that can be read only by the Secure Enclave. This data never leaves the device. It's not sent to Apple, nor is it included in device backups.
Face ID securiIIY
With a simple g ance, Face ID securely unocks supported Apple devices. It provides intuitive and secure authentication enabled by the TrueDepth camera system, which uses advaAcecl techAQIogles to accIJI'ately ITIap the geometl'y Qf 3 Llsef's face. Face II3 LlsPs ABUI'al Aetwol'ks for cleterIYIIAIng attentloA, ITIatchlng, ancl antlspooflng, so 3 Llsel' can unlock their phone with a glance. Face ID automatically adapts to changes in appearance,, ancl cal"efLllly safegLlards the privacy and secUI'lty of 3 Usel's bIQITIetl'Ic clata.
Face ID is designed to confirm user attention, provide robust authentication with a low false-match rate, and mitigate both digital and physical spoofing.
The TrueDepth camera automatically looks for the user's face when the user wakes an Apple device that features Face ID (by raising it or tapping the screen), as well as when those clevlces attempt to 3Uthentlcate the Usel' IA Ql'cler to cllsplay an IAcQITIIng Aotlflcatlon or when a supported app requests Face ID authentication. When a face is detected, Face ID confirms attention and intent to unlock by detecting that the user's eyes are open and their attention is directed at their device; for accessibility, the Face II3 attention check is disabled when Voice(3ver is activated and, if required, can be disabled separately.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.023

APL-EG 08874796

Af tel' the TrLIeDepth caITIel'3 coAfll'fYIs the pl'esence Qf BA attentive face, It pl'olects Bnd reads over 3G,GGG infrared dots to form a depth map of the face along with a 2D infrared IITIBQe. This clata Is Llsecl to cfeate 3 seqLIeAce Qf 2I3 IIYIages Bncl clepth ITIaps, which Bre digitally signed and sent to the Secure Enclave. To counter both digita and physical spoofs, the Truel3epth camera randomizes the sequence of 2I3 images and depth map captures, and projects a device-specific random pattern. A portion of the Secure Neural EAQIAe -- pl"Gtectecl withIA the SecUIre EAclave -- tl'BnsforIYIs this clata IAto 3 IYIatheIYIatlcal representation and compares that representation to the enrolled facia data. This enrolled facial data Is Itself 3 ITIBthernatlcal I'epl'esentatlon Qf the Lfsef' 's face captLII'ed Bcf'Qss 3 val'lety Qf poses.

To use Touch II3 or Face ID, the user must set up their device so that a passcode or password is required to unlock it. When Touch ID Gr Face ID detects a successful match, the user's device unlocks without asking for the device passcode or password. This makes UlsIAg 3 Iongel', ITIof'6 complex passcocle ol' passwol'cl fal' IYIof'6 pl Bctlcal becaUse the Use l' doesn't need to enter it as frequently. Touch ID and Face ID don't replace the user's passcode or password; instead, they provide easy access to the device within thoughtful bQUnclal'Ies Bncl tllTIe constraIAts. This Is Impol"taAt becaUse 3 stfong passcocle Ql' passwol'cl forms the foundation for how a user's iPhone, iPad, Mac, or Apple Watch cryptographically pl'Q tee ts that Llsel" s clata.
Users can use their passcode or password anytime instead of Touch ID or Face II3, but there are situations where biometrics aren't p ermitted. The following security-sensitive Qpel'BtlQAs always I'eqUII'6 6Atl"y Qf 3 passcocle Gl' passwol'cl:
Updating the software Erasing the device Viewing or changing passcode settings Installing configuration profiles Unlocking the Security 8 Privacy pane in System Preferences on Mac Unlocking the Users 8 Groups pane in System Preferences on Mac (if FileVault is turned an) A passcode or password is also required if the device is in the following states:
The device has just been turned on or restarted. The user has logged out of their Mac account (or hasn't yet logged in). The user hasn't unlocked their device for more than 48 hours. The user hasn't used their passcode or password to unlock their device for 'l56 hours (six and a half days), and the user hasn't used a biometric to unlock their device in 4 hours.
The device has received aremote lock command.

Apple PIBIIGI m SppUI Itg
CONFIDENTIAL

DX-5492.024

APL-EG 08874797

The user exited power off/Emergency SI3S by pressing and holding either volume button and the Sleep/Wake button simultaneously for 2 seconds and then pressing Cancel
There were five unsuccessful biometric match attempts (though for usability, the device IYllght Offer entef'Ing a passcocle Qf' passwoi'cl IAsteacl Qf LisIAg bIQIYIetl'Ics aftef' a smallef' number of failures).
When Touch ID or Face ID is enabled on an iPhone or iPad, the device i mmediatelylocks
when the Sieep/Wake button is pressed, and the device locks every time it goes to sleep. Touch ID and Face ID require a successful match -- or optionally the passcode -- at every wa ke.
The probability that a random person in the population could unlock a user's iPhone, iPad, or Mac is 'I in 5G,GGG with Touch ID or 0 in 'I,GGG,GGG with Face ID. This probability increases with multiple enrolled fingerprints (up to 'll in lG,GGG with five fingerprints) or appearances (up to 1 in 5GG,GGG with two appearances). For additional protection, both Touch ID and Face ID allow only five unsuccessful match attempts before a passcode or password is required to obtain access to the user's device or account. Wiith Face ID, the probability of a false match is different for twins and siblings who look like the user and for children under the age of 13 (because their distinct facial features may not have fully developed). If a user is concerned about a false match, Apple recommends using a passcocle to aLI'thenticate.
Facial matchiing is performed within the Secure Enclave using neural networks trained specifically for that purpose. Apple developed the facia matching neural networks using over a billion images, including infrared (IR) and depth images collected in studies conducted with the participants' informed consent. Apple then worked with participants from around the world to include a representative group of people accounting for gender, age, ethAIcity, ancl othel' factof's. The stLIclies wel'e aUgrnentecl as Aeeclecl to pl'ovllcle a high degree of accuracy for a diverse range of users. Face II3 is designed to work with hats, seal'ves, eyeglasses, CQAtact lenses, ancl many types of sUAglassBs. FUf"therITIGI'e, I't's cleslgned to wolk IAcloors, GUltcloors, ancl even In total clai'kness. An adclltlonal ABUI'al
Aetwoi'k -- that's tl'aIAecl to spot ancl I'eslst spoofing -- clefencls against attefTlp'ts to LIAIock
the device with photos Qr masks. Face ID data, including mathematical representations of a user's face, is encrypted and available only to the Secure Enclave. This data never leaves the device. It's not sent to Apple, nor is it included in device backups. The following Face II3 data is saved, encrypted only for use by the Secure Enclave, during normal operation:
The mathematical representations of a user's face ca culated during enrollment
The mathematical representations of a user's face ca cu ated during some unlock attempts if Face ID deems them useful to augment future matching
Face Images captLlrecl cIUI'Ing AGI" ITIal Qpei"ation af'en't savBcl but are Instead IITIITIecllately discarded after the mathematical representation is calculated for either enrollment or comparison to the enrolled Face ll3 data.

Apple PIBtfpfm SppUIIIX
CONFIDENTIAL

DX-5492.025

APL-EG 08874798

To improve match performance and keep pace with the natural changes of a face and look, Face ID BUgments lts storecl IYIatheITIatlcal I'GpresentatIQA Qvel' time. Upon 3 sUccessfLII match, Face II3 may use the newly calculated mathematical representation -- if its quality Is sUfflclent -- fol' 3 flnlte AUITlbel' of BcldltloABI IYIatches befol'e that clata Is cllscal'clecl. Conversely, if Face ID fails to recognize a face but the match quality is higher than a certain threshold and a user immediately follows the failure by entering their passcode, Face ID takes another capture and augments its enrolled Face ID data with the newly calcUIatecl matheITIatlcal I'epl'esentatlon. This new Face ID clata Is discarded If the Usel' stops ITIatchlng Bgalns't lt Ql' Bf tel' 3 flnlte ALIIYlbel' Qf IYIatches. These BLIgITIGAtatlon processes allow Face ID to keep up with dramatic changes in a user's facial hair or makeup use while minimizing false acceptance.

With Touch II3 or Face ID disabled, when a device or account locks, the keys for the highest class of Data Protection -- which are held in the Secure Enclave -- are discarded. The files and keychain items in that class are inaccessible until the user unlocks the device or account by entering their passcode or password.
With Touch ID or Face ID enabled, the keys aren't discarded when the device or account locks; instead, they' re wrapped with a key that's given to the Touch ID or Face ID subsystem inside the Secure Enclave. When a user attempts to unlock the device or account, if the device detects a successful match, it provides the key for unwrapping the Data Protection keys, and the device or account is unlocked. This process provides addiitional protection by requiring cooperation between the l3ata Protection and Touch II3or Face II3 subsystems to unlock the device.
When the device restarts, the keys required for Touch ID or Face ID to unlock the device or account are lost; they' re discarded by the Secure Enclave after any condition is met that I'eqUlll"es passcode Ql'passwof'cl entl'y.
The user can alsouse Touch ID and Face ID with Apple Pay to make easy and secure pUI'chases IA stores, Bpps, Bncl Qn the web:
Using Touch ID: For Touch ID, the intent to pay is confirmed using the gesture of
activating the Touch II3sensor combined with successfully matchingthe user's
fingerprint.
Using Face ID in stores: To authorize an in-store payment with Face ID, the user must first confirm intent to pay by double-clicking the side button. This double-ciick captures user intent using a physical gesture directly linked to the Secure Enclave and is resistant to forgery by a malicious process. The user then authenticates using Face II3 before placing the device near the contactless payment reader. A different Apple Pay payment method can be selected after Face ID authentication, which requires reauthentication, but the user won't have to double-click the side button again.

Apple PIBIIGI tH SppUI Itg
CONFIDENTIAL

DX-5492.026

APL-EG 08874799

Using Face IDin apps and on the web: To make a payment within apps and on the web, the user confirms their intent to pay by double-c icking the side button and then authenticates using Face ID to authorize the payment. If the Apple Pay transaction isn't completed within 60 seconds of double-clicking the side button, the user must reconfirm intent to pay by double-clicking again.
Third-party apps can use system-provided APIs to ask the user to authenticate using Touch ID or Face ID or a passcode or password, and apps that support Touch II3 automatically support Face ID without any changes, When using Touch ID or Face ID, the app is notified only as to whether the authentication was successful; it can't access Touch ll3, Face II3, or the data associated with the enrolled user.
Keychain items can also be protected with Touch ID or Face ID, to be released by the Secure Enclave only by a successful match or with the device passcode or account password. App developers have APls to verify that a passcode or password has been set by the user before requiring Touch II3 or Face II3 or a passcode or password to unlock keychain items. App developers can do any of the following:
Require that authentication API operations don't fall back to an app password or the device passcode They can query whether a user is enrolled, allowing Touch ID or Face II3 to be used as a second factor in security-sensitive apps. Generate and use Elliptic Curve Cryptography (ECC) keys inside the Secure Enclave that can be protected by Touch ID or Face ID. Qperations with these keys are always performed inside the Secure Enclave after it authorizes their use.
Users can also configure Touch ID or Face ID to approve purchases from the ITunes Store, the App Store, Apple Books, and more, so users don't have to enter their Apple II3 password. When purchases are made, the Secure Enclave verifies that a biometric authorization occurred and then releases ECC keys used to sign the store request.

All Apple silicon-based Mac notebooks and lnte -based Mac notebooks with the Apple T2 Security Chip feature a hardware disconnect that disables the microphone whenever the lid is closed. Qn all 13-inch MacBook Pro and MacBook Air notebooks with the T2 chip, all MacBook notebooks with a T2 chip from 2019 or later, and Mac notebooks with Apple silicon, this disconnect is implemented in hardware alone. The disconnect prevents any software -- even with root or kernel privileges in macQS, and even the software on the T2 chip or other firmware -- from engaging the microphone when the lid is closed. (The camera isn't disconnected in hardware, because its field of view is completely obstructed with the
lid closed.)

Apple PIBtfGI tH SPCUI Itg
CONFIDENTIAL

t3X-5492.027

APL-EG 08874800

iPad models beginning in 2020 also feature the hardware microphone disconnect. When an MFi-compliant case (IncIuding those soId by Apple) is attached to the iPad and closed, the micropharie is disconnected in hardware, preventing mlcropharie audio data being made available to any software -- even with root or kernel privileges in IPadOS, or any device
f il' ITlw'a I"'8
The protectiorls in this section are implemerlted directly vrith hardware logic, according to the following circuit diagram:

Lid sensor(s) (one line per sensor)

E ab( mtc( ( (.((g'l

Mic clock or data (one line per mic)

Clock to microphone
or data lines to Soc,
depending on
product

Mic clock or data

circuit diagram.

(one line per rnic)

Iri each product with a hardware microphonecutoff, arie or mare lid sensors detect the
physical closure af the lid or case using same physical property (for example, a Hall
effect sensor or a hlrlge angle sensor) of the interaction. For sensors where aellbratiorl is necessary, parameters are set during production of the device and the calibratiari process includes a nonreversible hardware lock aut of any subsequent changes to sensitive
parameters on the sensor. These sensors emit a direct hardware signal that goes through a simple set af nonrepragrammabie hardware logic. This logic provides debounce, hysteresis, and/or a delay of up ta 500 ms before disabling the micraphone. Depending an the product, this signal can be implemented either by disabling the lines transporting data between
the microphone and the System on Chip (SaC) or by disabling ane of the input lines to the microphone module that's allowing it.to be active -- for example, the clack line or a similar
effective control.

Express Cards with power reserve
If iGS isn't running because iPharie rieeds ta be charged, there may still be enough power in the battery' to support Express Card transactions. Supported iPhone devices automatically support this feature with:
· A payment or transit card designated as the Express Transit card
Student II3 cards with Express Mode turned on

Apple Platform Security
CONF I l3ENTIAL

Pressing the side button (or on iPhone SE 2nd generation, the Home button) displays the low-battery icon as well as text indicating that Express Cards are available to use. The NFC controller performs Express Card transactions under the same conditions as when iQS is running, except that transactions are indicated only with haptic notification (no visible notificatiion is shown). Qn iPhone SE 2nd generation, completed transactions may take a few seconcls to appeal' OA scl'een. This featLII'e Isn't available when a stanclal'cl Llsel'Inltlatecl shLltclown Is pel'fol'ITIecl.

x Apple PIBIIGI tH SPCUI It
CONFIDENTIAL

DX-5492.029

APL-EG 08874802

System secUrlty

Building on the unique capabilities of Apple hardware, system security is responsible for controlling access to system resources Apple devices without compromising usability. System security encompasses the boot-up process, software upclates, ancl protection of computer system resources such as CPU, memory, disk, software programs, and stored data.
The most recent versions of Apple operating systems are the most secure. An important part of Apple security is secure boot, which protects the system from malware infection at boot time. Secure boot begins in hardware and builds a chain of trust through software, where each step ensures that the next is functioning properly before handing over control. This security model supports not only the default boot of Apple devices but also the various modes for recovery and timely updates on Apple devices. Subcomponents like the T2 Chip and the Secure Enclave also perform their own secure boot to help ensure they only boot known-good code from Apple. The update system can even prevent downgrade attacks, so that devices can't be rolled back to an older version of the operating system (which an attacker knows how to compromise) as a method of stealing user data.
Apple devices also include boot and runtime protections so that they maintain their integrity during ongoing operation. Apple-designed silicon on iPhone, iPad, Apple Watch, Apple TV, HomePod, and a Mac with Apple silicon provide a common architecture for protecting operating system I ntegrity. macOS also features aA expaAclecl ancl conf lgurable set of protection capabilities in support of its differing computing model, as well as capabll(ties supportecl Qn all Mac harclware platforms.

Each step of the startup process contains components that are cryptographically signed by Apple to enable integrity checking so that boot proceeds only after verifying the chain of trust. These components include the bootloaders, the kernel, kernel extensions, and cellular baseband firmware. This secure boot chain is designed to verify that the lowest levels of software aren't tampered with.

Appfe PIBtfpfm SPCUIIt x
CONFIDENTIAL

DX-5492.030

APL-EG 08874803

When an iQS or iPadQS device is turned on, its Application Processor immediately executes code from read-only memory referred to as Boot RQM. This immutable code, known as the hardware root of trust, is laid down during chip fabrication and is implicitly trusted. The Boot RQM code contains the Apple Root certificate authority (CA) public keyused to verify that the iBoot bootloader is signed by Apple before allowing it to load. This is the first step in the chain of trust, in which each step checks that the next is signed by Apple. When the iBoot finishes its tasks, it verifies and runs the iQS ar iPadQS kernel. For devices with an A9 or earlier A-series processor, an additional Low-Level Bootloader (LLB) stage is loaded and verified by the Boot RQM and in turn loads and verifies iBoot.
A failure ta load or verify following stages is handled differently depending on the ha I'cl w a r6:
Boot PQM can't /oac/LLB fo/c/er devices): l3evice Firmware Upgrade (l3FU) mode
LLB or iBoat: Recovery mode
In either case, the device must be connected to iTunes (in macQS 10.'l4 or earlier) or the Finder (macQS 10,'ll5 or later) through USB and restored to factory default settings.
The Boot Progress Register (BPR) is used by the Secure Enclave to limit access to user data in different modes and is updated before entering the following modes:
OFU mode: Set by Boot RQM on devices with an Apple A12 or later SoCs
Recovery mode: Set by iBoot on devices with Apple A10, S2, or later SoCs
Qn devices with cellular access, a cellular baseband subsystem performs additional secure booting using signed software and keys verified by the baseband processor.
The Secure Enclave also performs a secure boot that checks its software (sepQS) is verified and signed by Apple.

In iQS 'll4 and iPadQS 14, Apple modified the C compiler toolchain used to build the iBoot bootloader to improve its security. The modified toolchain implements code to prevent ITI6ITIQI'y- Bncl type-safety Issules that Bl'6 typically encoLIAtel'ecl IA C pl'QgraITIs. FQI' example, It pl'eveAts:
Buffer overflows, by ensuring that all pointers carry bounds information that is verified when accessing memory
Heap exploltatlon, oy sepal'Btlng heap clatB fl'QIYI Its Aletaclata Bncl BccLII'Btely cletectlng error conditions such as double free errors
Type confusion, by ensuring that all pointers carry runtime type information that' s verlf led cILII'IAg pQIAtel" cast opel'Btlons
Type confusion caused by use after free errors, by segregating all dy namic memory
allocations by static type
This technology is available an iPhone with Apple A'l3 Bionic ar later, and iPad with the A'l4 Bionic chip.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.031

APL-EG 08874804

Mac computers with Apple silicon
Boot process for a Mac with Apple silicon
When a Mac with Apple silicon is turned an, it performs a baot process much like that of iphone and iPad,
Bo'Ot ROM vetittetes LLlB signature

Secure Enclave signed
LoeeiPoifey

LLi B vaN'd'ates system=paired firmerare ®ignatures
Ll 8 valitfetes Loceigoiiey signature
LLB eveur'etea i&oct stage 2 signature accortiingito Loceipoit'cy

SeeureiEnciave Beet RGM 'fetches
LeceiPoiicy nonces from 8eouse
Storage Chip

,iBqttt stage 2 validates roecQS-'pairett fir'rnwefe, Beet Kernel~ Colbectice,,
Aultilatry iKernel Collection iif appiiea4rei,
"systetg trust cache., end "sigeedl System
voiilkfn'e sl'gf'letur'es, ecicer(tinrg
te L~a(Poly
mi8cas
Boot process, steps, when e Mao with Apple silicon fs.started.
The chip executes code fram the Boot ROM in the first step in the chain of trust. macOS secure boot on a Mac with Apple silicori verifies nat orily the operatirig system code itself, but also the security policies and even kexts (supported, though not recommended) configured by authorized users.
When LLB is launched, it then verifies the signatures and loads system-pair'ed firmware for intra-SaC cares such as the starage, display, system management., and Thunderbolt cantrollers. LLB is also responsible far leading the LocalPolicy, which is a file signed by the Secure Enclave Processor. The LocalPaiicy file describes the configuration that the user- has chosen for the system boat and runtime security policies, The LacalPalicy has the same data structure format as all other boot objects, but it's signed locally by a private key. that's available only within a particular machine's Secure Enclave instead of being signed by a central Apple server (like software updates).
To prevent replay af any previous EacalPalicy, LES must look up a nance f'rom the Secure Enclave-attached Secure Storage Chip. To da this,, it uses the Secure Enclave Boot ROM and makes sure the nance. in the LocalPoiicy matches the. nonce in the Scour'e Storage Chip This prevents an old LocalPalicy -- which could have been configured for lowersecurity -- fram being reapplied ta the system after security has been upgraded. The result is that secure boat an a Mac with Apple silicon helps protect nat only against rollback of aperating system versions but also against security policy downgrades

Apple Platform Security
CONF I l3ENTIAL

The LocalPolicy file captures whether the operating system is configured for Full, Reduced, or Permissive security.
Fuii Security: The system behaves like iGS and iPadGS, and allows only booting software which was known to be the latest that was available at install time.
Reduced Security: LLB is directed to trust "global" signatures, which are bundled with the operating system, This allows the system to run older versions of rnacQS. Because older versions of macQS inevitably have unpatched vulnerabilities, this security mode is described as Reduced. This is also the policy level required to support booting kernel extensions (kexts).
Permissive Security: The system behaves like Reduced Security in that it uses global signature verification for iBoot and beyond, but it also tells iBoot that it should accept some boot objects being signed by the Secure Enclave with the same key used to sign the LocalPolicy, This policy level supports users that are building, signing, and booting their own custom XNU kernels.
If the LocalPolicy indicates to LLB that the selected operating system is running in Full Security, LLB evaluates the personalized signature for iBoot. If it's running in Reduced Security or Permissive Security, it evaluates the global signature. Any signature verification errors cause the system to boot to recoveryQS to provide repair options.
After LLB hands off to iBoot, it loads macOS-paired firmware such as that for the Secure Neural Engine, the Always Qn Processor, and other firmware. iBoot also looks at information about the LocalPolicy handed to it from LILB. If the LocaIPolicy indicates that there should be an Auxiliary Kernel Collection (AuxKC), iBoot looks for it on the file system, verifies that it was signed by the Secure Enclave with the same key as the LocalPolicy, and verifies that its hash matches a hash stored in the LocalPolicy. If the AuxKC is verified, iBoot places it into memory with the Boot Kernel Collection before locking the fu I memory region covering the Boot Kernel Collection and AuxKC with the System Coprocessor Integrity Protection (SCIP). If the policy indicates that an AuxKC shou d be present but it isn't found, the system continues to boot into macOS without it. iBoot is also responsible for verifying the root hash for the signed system volume (SSV), to check that the file system the kernel will mount is fully integrity verified.
Boot modes for e Mac with Apple silicon
A Mac with Apple silicon has the boot modes described below.

x Apply PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.033

APL-EG 08874806

recoveryQS
Fa I I ba c k recoveryQS

Key combo

Description

1. Boot RQM hands off to LLB.
2. LLB loads system-paired firmware and the LocalPolicy for the selected macQS.
3. LLB locks an indication into the Boot Progress Register (BPR) that it's booting into normal macQS, and hands off to iBoot.
4. iBoot loads the macOS-paired firmware, the static trust cache, the device tree, and the Boot Kernel Collection.
S. If the LocalPolicy allows it, iBoot loads the Auxiliary Kernel Collection (AuxKC) of third-party kexts.
6. If the LocalPolicy didn't disable it, iBoot verifies the root signature hash for the signed system volume (SSV).

1. Boot RQM hands off to LLB.
2. LLB loads system-paired firmware and the LocalPolicy for the recoveryQS.
3. LLB locks an indication into the Boot Progress Register that it is booting into recoveryQS, and hands off to iBoot for recoveryQS.
4. iBoot loads the macOS-paired firmware, the trust cache, the device tree, and the Boot Kernel Collection.
Note: Security downgrades aren't allowed on the recoveryOS LocalPolicy.

From a shutdown state, doublepress and hold the power button.

The same process as recoveryQS boot, except that it boots to a second copy of recoveryOS that is kept for resiliency. However, LLB doesn't lock an indication into the Boot Progress Register saying it is going into recoveryOS, and therefore the fallback recoveryQS doesn't have the capability to change the system security state.

Boot into recoveryOS per the above, then hold Shift while selecting the startup volume.

2. Holding the Shift key while selecting a volume causes the BootPicker application to approve that macOS for booting, as normal, but to also set an nvram variable that tells iBoot to not load the AuxKC on the next boot.

3. System reboots and boots to the targeted volume, but iBoot doesn't load AuxKC.

Appfe PIBdcfm Secuflty
CONFIDENTIAL

DX-5492.034

APL-EG 08874807

Startup l3isk security policy control for a Mac vIrith Apple silicon Overview Unlike security policies on an Intel-based Mac, security palicfes on a Mac with Apple silicon are f' or each installed operating system Thfs means that multiple Installed macOS instances with different versions and security policies are suppor'ted on the same machine. Far this reason, an operating system picker has been added ta Startup 8ecurity Utility.
rttacos stcraae Sefecticn tc.change the security pclicy. On a Mac with Apple silicon, System Security Utility indicates the overall user-configured security state af macQS, such as the booting of a kext or the configur'atfan of System
Integrity Protec'tion (SIP), If changing a security setting would significantly degrade security ar make the system easier ta campromise, users must enter into recoveryOS by halding the power button (so that mafware can't trigger the signal, only a human with physical access can), In order to make the charlge. Because of this, ari Apple-silicon based Mac also won't require (or support) a firmware password -- all critical changes are already gated by user authorization. For mare informatian an SIP,,see System Integrity Protection. Gn a Mac with Apple silicon, System Security Utflity indicates the overall user-conffgured security <etc of mac98. And in many cases, if changing a security setting would significantly degrade security or make the system easier to compromise, it's a prerequisite that a user enter into, recoveryQS by holding the power button (sa that malware can' t trigger the signal, only a human with physical access can), in order ta lower the operating system security. Full Security and Reduced Security can be set using Startup Security Utility from recoveryGS. But Permissive Security. can be accessed only from command-line tools for users wha accept the risk of making their Mac much less secure.
Apple Platform Security
CONF I l3ENTIAL

Full Security policy Full Security is the default, and it behaves like iOS and iPadOS. At the time software is downloaded and prepared to install, rather than using the global signature that comes with the software, macOS contacts the same Apple signing server used for iOS and iPadOS and requests a fresh, "personalized" signature. A signature is personalized when it includes the Exclusive Chip Identification (ECID) -- a unique ID specific to the Apple CPU in this case --as part of the signing request, The signature given back by the signing server is then unique and usable only by that particular Apple CPU. When the Full Security policy is in effect, the Boot ROM and LLB ensures that a given signature isn't just signed by Apple but is signed for this specific Mac, essentially tying that version of macOS to that Mac.
menOS Full Security pnttny eelentlnn.
Using an online signing server also provides better protection against rollback attacks than typical global signature approaches. In a global signing system, the security epoch could have rolled many times, but a system that has never seen the latest firmware won' t know this. For example, a computer that currently believes it's in security epoch 1 accepts software from security epoch 2, even if the current actual security epoch is 5. With an Apple silicon online signing system, the signing server can reject creating signatures for software that's in anything except the latest security epoch. Additionally, if an attacker discovers a vulnerability after a security epoch change, they
can't simply pick up the vulnerable software from a previous epoch off system Aandapply
it to system 8 in order to attack it. The fact that the vulnerable software from an older epoch was personalized to system A prevents it from being transferable and thus being used to attack a system B. All these mechanisms work together to provide much stronger guarantees that attackers can't purposely place vulnerable software on a Mac in order to circumvent the protections provided by the latest software. But a user that's in possession of an administrator user name and password for the Mac can always choose the security policy that works best for their use cases.

Apple Platform secor ty
CONFIDENTIAL

DX-5482.038

36
APL-EG 08874808

Reduced Secority polfcy Reduced Security is similar to Medium Security behavior on an Intel-based Mac with a T2 chip, in which a vendor (in this case, Apple) gener'ates a digital signature for the code ta assert It came from the vendor. In this way, attackers are prevented from inserting unsigried code. Apple refers to this signature as a "global" sigriature because it can be used on any Mac, for any amount of time., for a Mac that currently has a Reduced Security poHcy set Reduced security doesn"t Itsef'f provide protection against rollback attacks (although unauthorized operating system changes can result in user data being rendered inaccessible. Far more information,,see Kernel extensions in a Mac with Apple silicon.
meoas Redooed Security policy selection.
In addition to enabling users to run older versions of macOS, Reduced Security is req'uir'ed for ether- actions that can put a user's system security at rfsk, such as introducing thirdparty kernel extensions (kexts). Kexts have the same privileges as the kernel, and thus any vulnerabilitfes in thfrd-party kexts can lead to. full operating system compromise. This is why developers are being strongly encauraged ta adopt system extensions before kext support is removed from macGS for future Mac computers with Apple silicon. Even when third-party' kexts are enabled, they can't be loaded Inta the kernel an demand. Instead,, the kexts are merged into an Auxiliary Kernel Caffectfan (AuxKC) -- rrvhase hash Is stored fn the LoaaIPolicy -- and thus they require a rebaot. For more information about AuxKC generation, see Kernel extensions in macOS
PermissiveSecur'ity poiicy
Permissive Security is far users wha accept the risk af putting their Mac inta a much mare insecure state. This made differs from Na Security made an an Intel-based Mac with a T2 chip %Pith Permissive Security, signature veriflcatian is still perfarmed alang the entire secure baat chain, but setting the palioy to Permissive sigrials to iBoot that it shauld accept locally Secure Enclave --signed boat objects, such as a user-generated Boot Kernel Cailectiori built from a custom XNU kernel. Iri this way, Permissive Security also provides an archi'tectural capability far running an arbitrary "fully untrusted operating system" kernel. ytfhen a custom Boat Kernel Collection or fully untrusted aperating system is loaded on the system, same decryption keys become unavailable, to prevent a fully untrusted operating systems from accessing. data from trusted operating systems.
Apple Platform Security
CONF I l3ENTIAL

Irnportarrt: Apple doesn't pravfde or support custom XNU kernels.
mecQS permissive Security poli'cy selection.
There's another way that Permissive Security differs from No Security on an Intel-based Mac with a T2 chip: It's a prerequisite for some security downgrades that in the past have been independently controllable. Most notably, to disable System Integrity Protection (SIP) an a Mac with Apple silicon, a user must acknowledge that they' re puttfng the system inta Permissive Security. This ls required because disabling SIP has always put the system into a state that makes the kernel much easier to compromise. In particular, disabling SIP on a Mac with Apple silicon disables kext signature enforcement during AuxKC generation time, thus allowing any arbitrary kext to be loaded into kernel memory. Another improvement ta SIP that's been made on a Mac with Apple silicon is that the policy stare has. been moved out af NVRAM and inta the Locafpolicy Sa naw, disabling SIP requires authentication by a user who has access to the LacalPolicy signing key from recoveryQS (reached by pressing and holding the pawer button). This makes it. significantly more difficult for a software-only attacker, ar- even a physically present attacker, to disable SIP. It lsn't passible ta downgrade ta Permissive Security fram the Startup Security Utility app. Users can downgrade only by running command-linre tools from Terminal in reooveryOS, such as csru t i l ( t od i sable SIP). After the user has downgraded, the fact that it' s occurred is reflected in Startup Security Utility, and sa a user can easily set the security to a more secure mode. Nate. A Mac with Apple silicon doesn't require or suppart. a specific media boot policy, because technically all boats are perfarmed locally. If a user chooses te boot fram external media,, that operating system verslan must first 'be personalized using an authenticated reboot from reooveryQS. This reboot creates a LocalPolicy file on the internal drive that' s used ta perform a trusted boot from the operating system stored on the external media. This means the configuration of boating fram external media is always explicitly enabled on a per operating system basis, and already requires user authorization, so no additional secure configuration is necessary.
Apple Platform Security
CONF I l3ENTIAL

When macQS is first installed in the factory, or when a tethered erase-install is p erformed,
the Mac runs code from temporary restore RAM diisk to initialize the default state. During this pl'ocess, the I'estore environment cl'ea'tes a Aew palf' Qf pUlbllc ancl private keys which are held in the Secure Enclave. The private key is referred to as the Qwner /cierffify Key (QIK). If any QIK already exists, it's destroyed as part of this process. The restore environment also initializes the key used for Activation Lock; the User /cienfify Key (UfK). Part of that process which is unique to a Mac with Apple silicon is when UIK certification is I'equBsted for Actlvatlon Lock, a set of reqLIestecl coAstl'aIAts to be enforced a't valldatloAtime on the LocalPolicy are included. If the device can't get a UIK certified for Activation Lock (for example, because the device is currently associated with a Find My Mac account and reported as lost), its unable to proceed further to create a Local Policy. If a device is issued a User identity Certificate (ucrf), that ucrt contains server imposed policy constraints and user requested policy constraints in an X.509 v3 extension.
When an Activation Lock/ucrt is successfully retrieved, it's stored in a database on the sef'ver slcle ancl also I'etUII'Aecl to the clevlce. After the clevfce has a Ucrt, a certlflcatlon request for the public key which corresponds to the QIK is sent to the Basic Attestation Aufhorf'fy (BAA) server. BAA verifies the QIK certification request using the public key from the ucrt stored in the BAA accessible database. If the BAA can verify the certification, it certifies the public key, returning the Qwner Identity Certificate (QiC) which is signed by the BAA and contains the constraints stored in ucrt. The QIC is sent back to the Secure Enclave, From then on, whenever the Secure Enclave signs a new LocalPolicy, it attaches the QIC to the Image4. LLB has built-in trust in the BAA root certificate, which causes it to trust the QIC, which causes it to trust the overall LocalPolicy signature.
All Image4 files, not just Local Policies, contain constraints on Image4 manifest evaluation. These constraints are encoded using special object identifiers (QIDs) in the leaf certificate. The Image4 verification library looks up the special certificate constraint OlD from a
cef"tlflcate dLII'Ing sfgAatUlf'6 evaILIatlon ancl then mechanicallyevaIUates the coAstl'alnts
specified in it. The constraints are of the form:
X IYIUIst exist
e X rnLIst Aot exist
X ITILIst have a speclflc vaIUB
SQ, fol' IAstaAce, for "persQAallzecl" slgAatUII es, the cef"tlflcate constl"aIAts will con taIA "ECIID must exist," and for "global" signatures, it will contain "ECID must not exist."' These constraints ensure that all Image4 files signed by a given key must conform to certain requirements to avoid erroneous signed Image4 manifest generation.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.039

APL-EG 08874812

In the context af each LacalPallcy,, these Image4 certificate constraints are referred ta as the RerrratePaiicy. A different RematePolicy can exist for different boot environments' LaaaIPaliaies. The RematePelfcy is used to restrict the recoveryGS LecaIPalicy se that when recaveryGS ls booted it can only ever behave as if it"s boating with Full Security. This increases trust in the integrity of the reooveryGS boot environment as a place where policy can be changed. The RernatePolicy restricts the LocaIPalicy to contain the ECID af the machine on which the LocalPalicy was generated, and the specific Remote Policy Nonce Hash (rpnh) stored in the Secure Storage Chip on that Mac. The rpnh, and therefore the. RemotePaiicy, change only when actfons are taken for Ffnd My Mac and Activatian Lock, such as enrollment, unenrallment, remote lock, and remote wipe. Remote Policy constraints are determined and specified at User Identity Key (VIK) certification time and are signed in to the issued User identity Certificate (ucrt). Same Remote Policy constraints are determined by the server such as ECII3, Chipll3 and Baardll3 to prevent ane device from signing LacaIPolicy files for anather device. Gther Remote Policy constraints may be specified 'by the device to prevent Security downgrade of the Local Policy'without providing both the local authentication required ta access the current GIK and remote authenticatien af the account to which the device is Activation Locked.
Contents of a LoeaIPolicy file for a Mac wIth Apple slllcorI
The LocalPaiicy is an Image4 file signed by the Secure Enclave. Image4 is an ASN.-1 (Abstract Syntax Notation Gne) I3ER-encodeddata structure format that's used to describe fnfarmatfan about secure baat chain objects an Apple platforms; In an Image4.-based secure boot madel, security policies are r'eq.uested at software installation time initiated by a signing request to a central Apple signing server. If the policy was acceptable, the signing server returns a signed Image4 file containing a variety ef faur-character code (4CC) sequences. These signed Image4 files and 4CCs are evaluated at startup by sof tware like the Boot RGM or LLB.
Ownership handoff between operating systems Access ta the Gwner Identity Key (GIK) is referred to as eQwnership." Qwnership is required ta allow> users ta resign the Lacafpolicy after making policy or software changes, The GIK is protected viith the same key hierarchy as described in Sealed Key Protection (SKP), with the GIK being protected by the same Key encryptfan key (KEK) as the Volume encry'ptfan key (VEK). This means it's normal}y protected by both user passwords and measurements of the operating system and policy. There's only a single GIK far all operating systems an the Mac. Therefore, rwhen installing a second operating system, explicit cansent Is required from the users on the first operating system to hand off Ownership ta the users an the second operating system. However, users don't yet exist for the second operating system, when the installer is running from the first operating system. Users in operating systems aren't normally generated until the operating system is booted and the Setup Assistant is running. Thus twa new actions are required when installing a secand aperatfng system on a Mac with Apple silicon'. · Creating a LacalPolicy far the secand aperatfng system
Preparing an "Install User" for handing off Qwnership
Apple Platform Security
CONF I l3ENTIAL

When running an Install Assistant and targeting installation for a secondary blank volume, a prompt asks the user if they'd like to copy a user from the current volume to be the first user of the second volume. If the user says yes, the "Install User" which is created is, in reality, a KEK which is derived from the selected user's password and hardware keys, which is then used to encrypt the GIK as it's being handed to the second operating system. Then from within the second operating system Install Assistant, it prompts for that user's password, to allow it to access the GIK in the Secure Enclave for the new operating system.
If users opt not to copy a user, the Insta I User is still created the same way, but an empty
passworcl Is Usecl lnsteacl of a usel's passwol'cl. This seconcl flow exists fol' cel"talA system aclmlnlstra'tlon scenal los. Howevel', usel's who want to have ITIUltl-voIUITIeIAstalls ancl want
ta perform Qwnership handoff in the most secure fashion should always apt ta copy a user
from the first operating system to the second aperating system.
For a Mac with Apple silicon, local security policy control has been delegated to an application running in the Secure Enclave. This software can utilize the user's credentials and the boot mode of the primary CPU to determine who can change the security policy and from what boot environment. This helps prevent malicious software from using the security policy controls against the user by downgrading them to gain more privileges.
The LocalPolicy file contains some architectural 4CCs that are found in most all Irnage4 files -- such as a board or model IID (BQRD), indicating a particular App e chip (CIHIP), or Exclusive Chip Identification (ECIII3). But the 4CCs below focus only on the security policies that Ulsel's can conf lgUI'e.
blate: Apple uses the term Gne True recoveryGS ('JTP) ta indiicate a boot into the primary recoveryGS which is achieved using a physical power button press. This is different from a normal recoveryQS boot, which can be achieved using NVRAM or which may happen when errors occur on startup. The physical button press increases trust that the boot environment isn't reachable by a software-only attacker who has broken into macQS.
Type: QctetString (48)
Mutable envl'ronrnentsr 1TR, recaveryQS, macQS
Description: The 1pinh is used for anti-replay of the LacalPolicy.. This is an SHA384 hash of the LocalPolicy Nonce (ILPN), which is stored in the Secure Storage Chip and accessible using the Secure Enclave Boot RQM or Secure Enclave. The raw nonce is never visible to the Application Processor, only to the sepQS. An attacker wanting to convince LLB that a previous LocalPolicy they had captured was valid would need ta place a value into the Secure Storage Chip, which hashes to the same 1pnh value found in the LocalPolicy they want to replay. Normally there is a single LPN valid on the system -- except during software updates, when two are simultaneously valid -- to allow for the possibility of falling back to booting the old software in the event of an update error. When any LocalPolicy for any operating system is changed, all policies are re-signed with the new lpnh value corresponding to the new LPN found in the Secure Storage Chip. This change happens when the user changes security settings or creates new operating systems with a new LocalPolicy for each.

Apple pletferm Seeunly
CONFIDENTIAL

DX-5492.041

APL-EG 08874814

Description:The rpnh behaves the same way as the 1pnh but isupdated only when the remote policy is updated, such as when changing the state of Find My enrollment. This change happens when the user changes the state of Find My on their Mac.
Description: The ronh behaves the same way as the 1pnh, but is found exclusively in the LocalPolicy for recoveryQS. It's updated when the recoveryQS is updated, such as Qn sof twal'e upclates. A sepal'ate Aonce fl'QITI the 1pAh ancl r'pAh Is usecl so that when a device is put into a disabled state by Find My, existing operating systems can be disabled (by removing their LPN and RPN from the Secure Storage Chip), while still leaving the recoveryGS bootable. In this way, the operating systems can be reenabled when the system owner proves their control over the system by putting in their iCloud password used forthe Find My account. This change happens when a user updates the I'Bcovel'yQS Ql' CI'Bates new Qpel'atlAg systems.
Description: The nsih field represents an Sl-IA384 hash of the Image4 manifest data structure that describes the booted macQS. The macQS Image4 manifest contains measurements for all the boot ob)Bets -- such as iBoot, the static trust cache, device tree, Boot Kernel Collection, and signed system volume (SSV) volume root hash. When LLB is diirected to boot a given macQS, it ensures that the hash of the macGS Image4 manifest attached to iBoot matches what's captured in the nsih field of the ILocalPolicy. In this way, the nsih captures the user intention of what operating system the user has created a Loca Policy for. Users change the nsih value implicitly when they perform a sof'twal'e Llpclate.
Description: The auxp is an SHA384 hash of the user-authorized kext list (UAKL) policy. This is used at AuxKC generation time to ensure that only user-authorized kexts are included in the AuxKC. smb2 is a prerequisite for setting this field. Users change the auxp value implicitly when they change the UAKL by approving a kext from the Security 8 Privacy pane in System Preferences.

Aopfe PIBIIGfm SpcUIIIX
CONFIDENTIAL

DX-5492.042

APL-EG 08874815

Description: After the system verifies that the UAKL hash matches what's found in the auxp field of the LocalPolicy, iit requests that the AuxKC be signed by the Secure Enclave processor application that's responsible for LocalPolicy signing. Next, an SHA384 hash of the AuxKC Image4 manifest signature is placed into the LocalPolicy to avoid the potential for mixing and matching previously signed AuxKCs to an operating system at boot time. If iBoot finds the auxi field in the Loca Policy, it attempts to load the AuxKC from storage and validate its signature. It also verifies that the hash of the Image4 manifest attached to the AuxKC matches the value found in the auxi f i eld. If the AuxKC fails to load for any reason, the system continues to boot without this boot object and (so) without any third-party kexts loaded. The auxp field is a prerequisite for setting the auxi field in the LocalPolicy. Users change the auxi value implicitly when they change the UAKL by approving a kext from the Security 8 Privacy pane in System Preferences.
Description: The auxr is an SHA384 hash of the AuxKC receipt, which indicates the exact set of kexts that were included into the AuxKC. The AuxKC receipt can be a subset of the UAKL, because kexts can be excluded from the AuxKC even if they' re user authorized if they' re known to be used for attacks. In addition, some kexts that can be used to break the user-kernel boundary may lead to decreased functiona ity, such as an iinability to use Apple Pay or play 4K and HDB content. Users who want these capabilities opt in to a more restrictive AuxKC inclusion. The auxp field is a prerequisite for setting the auxj. field in the LocalPolicy. Users change the auxr value implicitly when they build a new AuxKC from the Security 5 Privacy pane in Sy stem Preferences.
Description: The vuid indicates the volume group the kernel should use as root. This field is primarily informational and isn't used for security constraints. This vuid is set by the user i mplicitly when creating a new operating system install.
Description: The kuid indicates the volume that was booted. The key encryption key has typically been used for l3ata Protection. For each LocalPolicy, it's used to protect the LocalPolicy signing key. The kuid is set by the user implicitly when creating a new operating system install.

Apple platfcrrm secunty
CONFIDENTIAL

DX-5492.043

APL-EG 08874816

Descripfion: A paired recoveryQS Trusted Boot Policy Measurement (TBPM) is a special iterative SHA384 hash calculation over the Image4 manifest of a LocalPolicy, excluding nonces, in order to give a consistent measurement over time (because nonces like 1pnh are frequently updated). The prot f i eld, which is found only in each macQS LocalPolicy, provides a pairing to indicate the recoveryQS LocalPolicy that corresponds to the macQS LocalPolicy.
Description: The hrlp i ndicates whether or not the prot v alue (above) is the measurement of a Secure Enclave -- signed recoveryQS Loca(Policy. If not, then the recoveryQS LocalPolicy is signed by the Apple online signing server, which signs things such as macQS Image4 files.
Description: If smb8 is present and true, LLB allows the next stage lmage4 manifest to be globally signed instead of requiring a personalized signature. Users can change this field with Startup Security Utility or bputi l t o d owngrade to Reduced Security.
Description: If smb1 is present and true, iBoot allows objects such as a custom kernel collection to be Secure Enclave signed with the same key as the LocalPolicy. Presence of smb8 is a prerequisite for presence of smb'I. Users can change this field using command-line tools such as csrut i l o r b p u t i l t o d owngrade to Permissive Security.
Description: If smb2 is present and true, iBoot allows the Auxiliary Kernel Collection to be Secure Enclave signed with the same key as the LocalPolicy. The presence of stnb8 is a prerequisite for the presence of smb2. Users can change this field using Startup Security Utility or bputi l t o d o w ngrade to Reduced Security and enable third-party kexts.

Aopfe PIBtfGfm SPCUIIt x
CONFIDENTIAL

DX-5492.044

APL-EG 08874817

Description: If smb3 is present and true, a user at the device has opted in to mobile device management (MDM) control of their system. Presence of this field makes the Loca lPolicy-controlling Secure Enclave processor application accept MDM authentication instead of requiring local user authentication. Users can change this field using Startup Security Utility or bputi l t o e n able managed control over third-party kexts and software upclates.

Description: If smb4 is present and true, the device has opted in to MDM control of the operating system using the Apple School Manager or Apple Business Manager. Presence of this field makes the LocalPolicy-contro ling Secure Enclave application accept MDM authentication instead of requiring local user authentication. This field is changed by the MDM solution when it detects that a device's serial number appears in Apple School Manager or Apple Business Manager.
Type: 64 bit unsigned integer Mutable environments: 'ITR
Description: The sipe holds the existing System Integrity Protection (SIP) policy bits that previously were stored in NVRAM. INew SIP policy bits are added here (instead of using Loca Policy fie ds like the below) if they' re used only in macQS and not used by LLB. Llsers can change this field using csj.ut i l f r o m 1TR to disable SIP and downgrade to Permissive Security.

Description: lf si.p1 is present and true, iBoot should allow failures to verify the SSV volume root hash, Users can change this field using csru t i l o r b p u t i l f r o m 'ITR.

Description: si.p2 allows disabling of the kernel System Coprocessor Integrity Protection (SCIP). If this tag is present and true, iBoot tells the kernel that it should not enforce SCIP. Users can change this field using cst u t i l o r b p u t i l f r o m 1TR.
Systen Integrity PI election (SIP3) Type: Boolean Mutable environments: 1TR
Description: If sip3 is present and true, iBoot doesn't enforce its built-in allow list for the boot-args NVRAM variable, which would otherwise filter the options passed to the kernel. Users can change this field using csr u t i l o r b p u t i l f r o m 'ITR.

x Apple PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.045

APL-EG 08874818

Certificates and Refnotepolicy
As described in LocalPolicy signing-key creation and management, the LocalPolicy Image4 also contains the. Owner' Identity Certificate (OIC) and the embedded RemotePolicy.

Intel-based Mac computers
Boot process for an Intel-based Mac
Intel-based Mac with an Apple T2 Security Chip
VVhen anIntel-based Mac computer wtih the Apple T2 Security Chip is turned on, the chip
performs a secure boot from its Boot ROM in the same fashiorl as IPhone, iPad, and a Mac with Apple silicofi. This verifies the iBoot boetleaeler and is the first step ifi the chain of trust. IBoot checks the kernel and kernel extension code on the T2 chip,,which then checks the Intel UEFI firrrniifare. The UEFI firmWare and the aasociated signature are initially available only to the T2 chip.
eeet Rowl eva'Iuatee IB'act signature
IBoot evilw@tes T2 k'er'nel cache sJgnstwre
T2 kernel sachs evelwattes O'EFI firfnware efI3natwre

eSPI

UEFI flrintlrare UEFI, flrinware evalwatea beet:efi signatwre

T2 chip Intel CPU

lbeet.efi eValtI@eS rneCOS ifnrnuta'brie kernel' Signature

rftao68 T2 aacura boot chain.

rnacOS

After verification, the UEfl firmware image is mapped into a portion of the T2 chip memory. This memory is made available to the Intel CPU through the enhanced Serial Peripheral Interface (eSPI) VVhen the Intel CPU first boots, it fetches the UEFI firrrnitfare through the eSPI from the integrity,-checked, memory-mappred copy of the firmware located on the T2 chip.

Apple Platform Security
CGNFIDENTIAL

DX-5492.Q46

The evaluation of the chain of trust continues on the Intel CPLI, with the UEFI firmware evaluating the signature for boot.efi, whiich is the macQS bootloader The Intel-resident macQS secure boot signatures are stored in the same lmage4 format used for iGS, iPadGS, and T2 chip secure boot, and the code that parses the Image4 files is the same hardened code from the current iQS and iPadOS secure boot implementation. Boot.efi in turn verifies the signature of a new file, called immutablekernel. When secure boot is enabled, the immutablekernel file represents the complete set of Apple kernel extensions required to boot macOS. The secure boot policy terminates at the handoff to the immutablekernel, and after that, macQS security policies (such as System Integrity Protection and signed kernel extensions) take effect.
lf there are any errors or failures in this process, the Mac enters Recovery mode, Apple T2 Security Chip Recovery mode, or Apple T2 Security Chip Device Firmware Upgrade (DFU) ITIocle ITIocle.
By default, an Intel-based Mac that supports secure boot trust only content signed by
Apple. However, to i mprovethe security of Boot Camp installations, Apple also supports
secure booting for Windows. The UEFI firmware includes a copy of the Microsoft Windows Production CA 261'I certificate used to authenticate Microsoft bootloaders.
A/ofer There is currently no trust provided for the Microsoft Corporation UEFI CA 201'I that would allow verification of code signed by Microsoft partners This UEFI CA is commonly used to verify the authenticity of bootloaders for other operating systems, such as Linux va I'I a n t s.
Support for secure boot of Windows isn't enabled by default; instead, it's enabled using Boot Camp Assistant (BCA). When a user runs BCA,,macQS is reconfigured to trust Microsoft first-party signed code during boot. After BCA completes, if macOS fails to pass the Apple first-party trust evaluation during secure boot, the LIEFI firmware attempts to evaluate the trust of the object according to UEFI secure boot formatting lf the trust evaluation succeeds, the Mac proceeds and boots Windows. If not, the Mac enters recoveryQS and informs the user of the trust evaluation failure.
An Intel-based Mac without a T2 chip doesn't support secure boot. Therefore the UEFII firmware loads the macQS booter (boot.efi) from the file system without verification, and the booter loads the kernel (prelinkedkernel) from the file system without verification. To protect the integrity of the boot chain, users should enable all of the following security
mechanisms:
System Integrity Protection (S/P). Enabled by defau t, this protects the booter and kel'nel against ITlallclous wl" ltes ff'QITI wlthln a I'unnlng macGS.
Fi jesuit: This can be enabled in two ways: by the user or by a mobile device management (MDM) administrator. This protects against a physically present attacker using Target Disk Mode to overwrite the booter,

Aopfe PIBIIGfm SPCUIIt x
CONFIDENTIAL

DX-5492.047

APL-EG 08874820

· Firmware Password:This can be ena'bled intw o w ays. by the user ar by an M I3M administrator. This protects a phys}oel}y present attacker from launching alternate boot modes such as recoveryGS, Single User Mode, or Target Disk Mode from which the hooter can he overwritten. This also prev'ents 'booting from alternate media, hy which an attacker could rurl code to overvpite the booter.

Ussr' Passtwsrd' ~

Ke)f ertcryp" tfon' key

~

VoluIrns eno~ tt~ k e y ~

vslurns data

The unlocking prccess of an intel-based Mac without a T'2 chip.

BQQt nlodes Qf Bn intel-b8sed MBG with an Apple T2 Security Chip
An Intel-based Mac with an Apple T2 Security Chip has a variety of baot mades. that can be entered at boot time by pressing key combinations, ytfhich are recognized by the UEFI firmware or booter. Some boot modes, such as Sirigle User Mode, tAran't work uriless the security policy is changed to No Security in Startup Security Utility.

Mode
macos boo't

Startup Martager Target l3iak Mode (TI3M)

Option { -)

Single User Mode

Command (tt)-S

tecoveayos

Command (It)-R

Besot tptisn
The UEFI ffrmware hands off to the macos booter (a UEFI application), which handle off to the macos kernel. On standard booting of a Mac with Filevault enabled, the macos booter presents the Login Window interfaoe, which takes the password to decrypt the storage.
The LIEFI firmware launches t' he built-in UEFI application t'hat presents tHe user with a boot device selection interface.
The UEFI firmware launches the built-in UEFI application that eXposes the. internal Stet'age. deVIce as a raw, block-based storage device ever Firewire, Thunderbolt, USB, or any oombinatian of the thtee {depending on the Msc model).
The macQS kernelpassea the --,s
flag in laun'Chd's a'rgument vecton
then launohd creates the singleuser Shell In the. Console.app "s tty.
Ivofet If the user exits the shell, maoQS continues boot to the Login Vfindow.
The UEFI firmware loads a minimal macas from a signed disk image (,dmg) 'file on the 'internal storage device.

Apple Platform Security
CONF I l3ENT}AL

DX-5492.Q48

Mode Internet recoveryGS Diagnostics
internet Diagnostics Windows boot

Option ( -$-Command (x}-It Option (~)-D

Besot tption
The signed didk image is downloaded from the in'ternet using HTT P.
The UEFI firrnwal'e loada a min'intel UEFI diagnostic environment from e signed d'isk image file on the internal storage device.
The signed disk image is dewnloaded from the internet using HTT P.
If Windows hes been installed, using Boot Camp, the UEFI firmware hands off to the Windows booter, which hancis off to the Windows kernel.

Startup Semirity Utility on a Mac with an Apple T2 Security Chip
Overview Qn an intel-based Mac with an Apple T2 Security Chip, Startup Security Utility handles a rlumber security policy settings The utility is accessible by booting into recoveryGS and selecting Startup Security Utility from the Utilities menu and prortects supported security settings from easy manipulation by an attacker.

A screenshot of the Startup Security Utility.
Apple Platform Security
CONF I l3ENTIAL

Critical policy changes require authentication, even in Recovery mode. When Startup Security Utility is first opened, it prompts the user to enter an administrator password from the primary macGS installation associated with the currently booted recoveryGS. If no administrator exists, one must be created before the policy can be changed. The T2 chip requires that the Mac computer is currently booted into recoveryOS and that an authentication with a Secure Enclave -- backed credential has occurred before such a policy change can be made. Security policy changes have two implicit requirements. recoveryGS
ITI LI S't:
Be booted from a storage device direct y connected to the T2 chip, because partitions on other devices don't have Secure Enclave -- backed credentials bound to the internal storage clevlce.
Reside on an APFS-based volume, because there is support only for storing the Authentication in Recovery credentials sent to the Secure Enclave on the "Preboot" APFS volume of a drive. HFS pius-formatted volumes can't use secure boot.
This policy is shown only in Startup Security Utility on an Intel-based Mac with a T2 chip. Although most use cases shouldn't require changes to the secure boot policy, users are ultimately in control of their device's settings and may choose, depending on their needs, to disable or downgrade the secure boot functionality on their Mac
Secure boot policy changes made from within this app apply only to the evaluation of the chain of trust being verified on the Intel processor. The option "Secure boot the T2 chip" is always In effect.
Secure boot policy can be configured to one of three settings: Full Security, Medium Security, and No Security. No Security completely disables secure boot evaluation on the Intel processor and allows the user to boot whatever they want.
Full Security is the default boot policy, and it behaves similar to iGS and iPadOS or Full Security on a Mac with Apple silicon. At the time that software is downloaded and prepared to install, it is persona ized with a signature that includes the Exclusive Chip Identification (ECID) -- a unique ID specific to the T2 chip in this case -- as part of the signing request. The signature given back by the signing server is then unique and usable only by that particular T2 chip. When the Full Security policy is in effect, the UEFI firmware ensures that a given signature isn't just signed by Apple but is signed for this specific Mac, essentia ly tying that version of macOS to that Mac. This helps prevent rollback attacks as described for Full Security on a Mac with Apple silicon.
Medium Security boot policy is somewhat like a traditional UEIFI secure boot, in which a vendor (here, Apple) generates a digital signature for the code to assert it came from the vendor. In this way, attackers are prevented from inserting unsigned code. We refer to this slgnatLIre Bs B "global" sIgnatljre because It can be LIsecl on Bny Mac, foI' BAy BITIount of time, for a Mac that currently has a Medium Security policy set. Neither iGS, iPadGS, nor the T2 chip itself support g obal signatures. This setting doesn't attempt to prevent rollback attacks.

AppIe pletferm SeeunIy
CONFIDENTIAL

DX-5492.050

APL-EG 08874823

Meciia boot policy Media boot policy exists only on an intel-based Mae with a T2 chip and is independent from the secure boat policy. So even if a user disables secure boot, this doesn't change the default behaviar af preventing anything other than the starage device direc'tly aannected to the T2 chip to boat the Mac. (Media boot paliey is not required on a Mac with Apple silicon. Far mare information, see Startup l3isk security policy control.
Firmware password protection in an Intel-based Mac maeQS on Intel-based Mac computers with an Apple T2 Security Chip supports the use
of a Firmware Password to prevent unintended modifications af firmware settings an a specific Mac. The Firmware Password is. used ta prevent. selecting alternate boot mades such as boating Into recoveryGS ar Single User- Mode, boating from arl unauthorized volume, ar booting into Target Disk Made.
Nate: The firmware password isri't required an a Mac with Applee silicon, because the critical firmware functionality. it restricted has been moved inta the recoveryQS. and (when FileVault is enabled) recaveryGS requires user authentication before its critical functionality can be reached.
The ma<.basic made cf firmware password can be reached from the recoveryGS Firmware Password Utility an an Iritel-based Mac without-a T2 chip, and fram the Startup Security Utility an an Intel-based Mac with a T2 chip. Advanced optians (such as the ability to prompt for the password at every boat) are available fram the firmwarepesswd commandline tool in maeGS.
Setting a Firmware Password is especially important to reduce the risk of attacks an lntelbased Macs without a T2 chip from a physically. present attacker. The Firmware Password can help prevent an attacker fram baating to recaveryQS, fram vvhere they cauld atherwise disable System Integrity Protection (81P). And by restricting boat af alternative media,, an attacker can't execute privileged code fram another aper'ating system ta attack peripheral flrmWal'es.
A firmware password reset mechanism exists ta help users wha forget their password. Users press a key comblnatiori at startup, and are presented iivith a mod rel-specific string to provide ta AppleCare. AppleCare digitally signs a resource that is signature checked by the Uniform Resaurce Identifier (URI). If the signature is validated and the content is far the specific Mae,, the UEFI firmware removes the firmware, password.
Far users who want no one but themselves to remove their firmware password by software means,the -disable-reset -capabilit y aptian has beeri added te the firmwarepeeswd command-line tool in macQS 10.15.- Before setting this option, users. must acknawledge that if the password is forgotten and needs removal, the user must bear the cast af the logic board replacement necessary ta achieve this. Grganizatiens that warit ta protect their Mac computers fram external attackers and fr'am emplayees must set a firmware password on organization-awned systems, This can be accomplished an the device in any of the fallowing ways:
At provisioning time, by manually using the firfiitla repasswd command-line tool · VVith third-party management.tools that use the firmwarepassed command-line tool
Apple Platform Security
CONFIDENTIAL

Using mobile device management (MDM)

The recoveryQS is completely separate from the main macQS, and the entire contents Bre stol"ecl IA a cllsk IIYIage file ABIYIecl BaseSysteIYI.cIIYlg. Thel'e Is also BA assoclatecl BaseSystem.chunklist which is used to verify the integrity of the BaseSystem.dmg. The chunklist is a series of hashes for 'IG MB chunks of the BaseSystem.dmg. The UEFI firmware evaluates the signature of the chunklist file and then evaluates the hash for one chunk at a time from the BaseSystem.dmg, to ensure that it matches the signed content present in the chunklist. If any of these hashes don't match, booting from the local recoveryQS is aborted and the UEFI firmware attempts to boot from Internet recoveryQS I n s tea cl.
If the verification iis successfully completed, the UEIFI firmware mounts the BaseSystem. dmg as a RAM disk and launches the boot.efi file that's in it. There's no need for the UEFI firmware to do a specific check of the boot.efi, nor for the boot.efi to do a check of the kernel, because the completed contents of the operating system (of which these elements are only a subset) have already been integrity checked.
Apple Diegnosltics The procedure for booting the local diagnostic environment is mostly the same as launching the recoveryQS. Separate AppleDiagnostics.drng and AppleDiagnostics.chunklist files are used, but they' re verified in the same way as the BaseSystem files are. Instead of launching boot.efi, the UEFI firmware launches a file inside the disk image (.dmg file) named diags.efi, which is in turn responsible for invoking a variety of other UEFI drivers that can interface with and check for errors in the hardware.
If an error has occurred in the launching of the local recovery or diagnostic environments, the UEFI firmware attempts to download the iirnages from the internet instead. (A user can a so specifically request the images to be fetched from the internet using special key sequences held at boot.) The integrity validation of the disk images and chunklists downloaded from the QS Recovery Server is performed the same way as with images I'etl'levecl ffoIYI B stol'Bge clevlce.
While the connection to the QS Recovery Server is done using HTTP, the complete downloaded contents are still integrity checked as previously described, and as such are protected against manipulation by an attacker with control of the network. In the event that an individual chunk fails integrity verification, it is re-requested from the QS Recovery Server 'I'I times, before giving up and displaying an error.
When the internet recovery and diagnostic modes were added to Mac computers in 2011, it was decided that it would be better to use the simpler HTTP transport, and handle content authentication using the chunklist mechanism, rather than implement the more complicated HTTPS functionality in the UEFI firmware, and thus increase the firmware's attack surface.

Aopfe PIBIIGfm SpcUIItg
CONFIDENTIAL

DX-5492.052

APL-EG 08874825

Security is a process; it isn't enough to reliab y boot the operating system version installed at the factory -- there must also exist a mechanism to quickly and securely obtain the latest security updates. Apple regularly releases software updates to address emerging security c o A c e I'As ( BAcl t 0 p I' 0 v Icle A e w f e B tLI I'e s B A d e ITI ol I -- a h LIg e cl r I veI'0 f u p cl B te B cl 0 pt I0A amongst users). Users of iOS and iPadOS devices receive update notifications on the device and through the Finder (in macQS lG.'I5 or later) and iTunes (in macQS 'IG.14 or earlier). Mac users find available updates in System Preferences. Updates are delivered wirelessly, for rapid adoption of the latest security fixes.
The update process uses the same hardware-based root of trust that secure boot uses that is designed to install only Apple-signed code. The update process also uses system software authorization to check that only copies of operating system versions that are actively being signed by Apple can be installed on iOS and iPadOS devices, or on Mac computers with the Full Security setting configured as the secure boot policy in Startup Security Utility. With these secure processes in place, Apple can stop signing older operating system versions with known vulnerabilities and help prevent downgrade attacks.
FQI' gl'eatel' softwal'e Llpclate secLIAty, when a device Is physically connectecl 'to a Mac, a full copy of iOS or iPadOS is downloaded and installed. But for over-the-air (QTA) software updates, only the components required fo complete Bn update are ciowrlloacieci improving network efficiency by not downloading the entire operating system. What's more, software updates can be cached on a Mac running macQS 'IG.'l3 or later with Content Caching tLIrAecl Qn, so that IOS Bncl IPacIQS clevlces cion't Aeecl to reclownloacl the Aecessal'y upclate
over the internet. (They' ll still need to contact Apple servers to completethe update
process.)
l3Llrlng Llpgl'acies Bncl Llpclates, a connection Is lrlacle to the Apple Installation authorization server, which includes a list of cryptographic measurements for each part of the installation bundle to be installed (for example, iBoot, the kernel, and the operating system image), a random anti-replay value (the nonce), and the device's unique Exclusive Chip Identification (ECII3).

Apple PIBtfGI tH SppUI IIX
CONFIDENTIAL

DX-5492.053

APL-EG 08874826

The authorization server checks the presented list of measurements against versions for which installation is permitted and, if it finds a match, adds the ECID to the measurement and signs the result. The server passes a complete set of signed data to the device as part of the upgrade process. Adding the ECID apersonalizesa the authorization for the requesting device. By authorizing and signing only for known measurements, the server ensures that the update takes place exactly as Apple provided.

Cryptographic measurements list
iaoot kernel
operating system iraage anti-replay value
ECID

Apple Authorizetion
server

Signed authorization response signature for software anti-replay value
eel o
How Apple devices interact with the Apple Authorization server.
The boot-time chain-of-trust evaluation verifies that the signature comes from Apple and that the rneasurernent of the item loaded from the storage device, combined with the device's ECID, matches what was covered by the signature. These steps ensure that, on devices that support personalization, the authorization is for a specific device and that an older operating system of firmware version from one device can't be copied to another. The nonce prevents an attacker from saving the server's response and using it to tamper with a device or otherwise alter the system software.
The personalization process is why a network connection to Apple is always required to update any device with Apple-designed silicon, including an Intel-based Mac with the Apple T2 Security Chip.
Finally, because the user's data volume is never mounted during a software update, which helps prevent anything being read from or written to that volume during updates.
On devices with the Secure Enclave, that hardware similarly uses system software authorization to check the integrity of its software and prevent downgrade installations.

Apple Plane m ceca lr
CONFIDENTIAL

DX-5492. 054

se
AIPL-EG 08874827

Operating system integrity
Apple d'esigns Its GperatIng systems 'with secu}"Ity at the co} e, with s hsrdv/are }'Got Gf tl'ust leveraged to enable secure boot and a secure software update process that enables juick snd safe applicatian af security updates. Apple operating systems also ILSVersge Purposebuilt silicon-based hardware capabilities to help prevent exploitation as the operating system runs. These capabilities are not focused on whether ar' not to. execute code. (see App security for the mechanisms that help prevent malware and ensure only trusted cade is executed) but instead focus on the capabilities afforded to cade that is executed. In short, they help mitigate. attack and exploit techniques whether those originate from a malicious app, from the greb, or through any other channel. Protections listed here are available on devices with supported Apple-designed SeCs -- this includes iQS, iPadQS, tvQS, uratchQS, and now macQS on a Mac with Apple silicon.

Feature

A10

Kernel Integrity Protection

Fast Permission Restrictions

System Goprocassor Integrity Protection

Pointer Authentication Codes

Page
Protection Layer

A11, SS

A12, 84

A18, SS

A'14, SS

M1

See Note below.

hfote: Page Protection Layer (PPL) requires that the platform only execute signed and trusted code', this is a security model that isn't relevant far mac08.

Kernel integrity Protection
After the operating system kernel completes Initialization,,Kernel Integrity Protection (KIP) is enabled to prevent mod}fjcations of' kernel and driver code The memory controller provides a protected physical memory region that iBoot uses to load the kernel and kernel extensians. After star tup completes, the memory cantroller denies writes to the pratLSCted physical memory region. The Application Processor's Memory Management Unit (MMU) is configured to pr'event mapping privileged code from physical memary o~tside the protected memory regian and to prevent }flrriteable mappings cf physical memory within the kernel memory region.
To prevent reconfiguration, the hardware used to enable KIP is locked after the boot process Is complete.

Apple Platform Security

55

CONFIDENTIAL

Starting with the Apple A'I'I Bionic and S3 SoCs, a new hardware p rimitivewas introduced. This primitive includes a CPLl register that quickly restricts permissions per thread. With these Fast Permission Restrictions (or APRRs), supported operating systems are able to remove execute permissions from memory -- without the overhead of a system call and a page table walk or flush. Thlis provides another level of mitigation for attacks from the web, particularly anything that is JIT'ed (Just In Time compiled), as memory is not effectively
BxecLltable at the saITIB tllTIB It Is I'eacl ancl wl'Itable.

Coprocessor firmware handles many critical system tasks -- for example, the Secure Enclave, the image sensor processor, and the motion coprocessor. Therefore its security is a key part of the security of the overall system. To prevent modification of coprocessor firmware, Apple uses a mechanism called System Coprocessor Integrity Protection (SCOP).
SCIP works much like Kernel Integrity Protection (KIIP): At boot time, iBoot loads each copl"Qcessol's fll"ITIwal'e Into a protectecl memory I'eglon, Qne that's I'esel'vecl ancl sepal'ate from the KIP region. iBoot configures each coprocessor's memory unit to prevent:
Executable mappings outside its part of the protected memory region
Writeable mappings inside its part of the protected memory region
Also at boot time, to configure SCIP for the Secure Enclave, the Secure Enclave operating system is used. After the boot process is complete, the hardware used to enable SCIP is locked to prevent reconfiguration.

Pointer Authentication Codes (PACs) are used to protect against exploitation of memory corruption bugs. System software and built-in apps use PAC to prevent modification of function pointers and return addresses (code pointers). PAC uses five secret 'l28-bit values to sign kel'Ael lnstl'LictloAs ancl clata, ancl each Lisel' space pl'ocess has Its Qwn B keys. Items are sa ted and signed as indicated below.

Key

Function Return Address

IB

Function Pointers

IA

Block Invocation Function

IA

Objective-C Method Cache

IB

C++ V-Table Entries

IA

Computed Goto Label

IA

Kernel Thread State

Llser Thread State Registers

IA

C++ V-Table Pointers

Storage address + Class e Selector Storage address + Hash (mangled method name) Hash (function name)
Storage acldress

Appfe PIBIIGI m Secuf IIV
CONFIDENTIAL

DX-5492.056

APL-EG 08874829

The signature value is stored in the unused padding bits at the top of the 64-bit pointer. The signature is verified before use, and the padding is restored to ensure a functioning pointer address. Failure to verify results in an abort. Thiis verification increases the difficulty of many attacks, such as a return-oriented programming (RQP) attack, which attempts to trick the device into executing existing code maliciously by manipulating function return addresses stored on the stack.
Page Protection Layer (PPL) in iQS, iPadQS, and watchQS prevents user space code from being modified after code signature verification is complete. Building on KIP and APRR, PPL manages the page table permission overrides to make sure only the PPL can alter
protected pages contalnlng User code ancl page tables. The system provides a masslvB
I'BOILIctlon In attack sUI'face by sUppol'tlAg systeITIwllcle cocle IAtegl'Ity enfol'cemeAt, even in the face of a compromised kernel. This protection isn't offered in macQS, because it already relies on an architecture where absolutely all executed code must be signed.

macQS operates on a broader set of hardware (for example, Intel-based CPUs, Intel-based CPLls in combination with the Apple T2 Security Chip, and Apple silicon-based SoCs) and suppol'ts a I'aAQB Gf genel'al-pUrpose coITlpLltlng Ulse cases. Whereas soITIB Llsel's Use only the basic preinstalled apps or those available from the App Store, others are kernel hackers who need to disab e essentially all platform protections so they can run and test their executing code as with the highest levels of trust. Most fall somewhere between, and many of those have pel'Ipherals and software that require varying levels of access. Apple designed the macQS platfol'ITI with an Integrated appl'oach to haf'clwal'e, softwal'e, and sel"vices -- a platfol"IYI 'that pl'ovlcles secLII'lty by design and makes It sIITlple to cGAflgLII'e, deploy, and manage but that retains the configurability that users expect. macQS a so includes the key security technologies that an IT professional needs to help protect corporate data and integrate within secure enterprise networking environments.
The following capabilities support and help secure the varied needs of macQS users, They include:
Signed system volume security
System Integrity Protection
Trust caches
Protection for periphera s
Rosetta 2 (automatic translation) support and security for a Mac with Apple silicon
DMA support and protections
Kernel extension (kext) support and security
Option RQM support and security

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.057

APL-EG 08874830

UEFI firmware security for Intei-based Mac computers
In macGS 'IO,'l5, Apple introduced the read-only system volume, which is a dedicated, isolated volume for system content. macGS 'I'I adds strong cryptographic protections to store system content on a signed system volume (SSV). SSV features a kernel mechanism that verifies the integrity of the system content at runtime Bnd rejects any data -- code and noncode -- without a valid cryptographic signature from Apple.
SSV not only helps prevent tampering with any Apple software that's part of the operating system, it also makes macQS software update more reliable and much safer. And because SSV uses APFS (Apple File System) snapshots, if an update can't be performed, the old system version can be restored without reinstallation.
Since its introduction, APFS has provided fiie-system metadata integrity using noncryptographic checksums on the internal storage device. SSV strengthens the integrity mechanism by adding cryptographic hashes, thus extending it to encompass every byte of file data. Data from the internal storage device (including file system metadata) is cryptographically hashed in the read path, and the hash is then compared with an expected value in the file-system metadata. In case of mismatch, the system assumes the data has been tampered with and won't return it to the requesting software.
Each SSV SHA256 hash is stored in the main file-system metadata tree, which is itself hashed. And because each node of the tree recursively verifies the integrity of the hashes of its children -- similar to a binary hash (Merkle) tree -- the root node's hash value, called a seai, therefore encompasses every byte of data in the SSV, which means the cryptographic signature covers the entire system volume.
During macGS insta lation and update, the seal is recomputed from the file system ondevice and that measurement is verified against the measurement which Apple signed. Qn a Mac with Apple silicon, the bootloader verifies the seal before transferring control to the kernel. Qn an Intel-based Mac with an Apple T2 Security Chip, the bootloader forwards the measurement and signature to the kernel, which then verifies the seal directly before mounting the root file system. In either case, if the verification fails, the startup process halts and the user is prompted to reinstall macQS.
This procedure is repeated at every boot unless the user has elected to enter a lower security mode and has separately chosen to disable the signed system volume.
SSV and code signing
Code signing is still present and enforced by the kernel. The signed system volume provides protection when any bytes at all are read from the internal storage device. In contrast, cocle slgnlng pl'ovldes pl'otectlon when Mach oblects are ITlemory mappecl as executable. Both SSV and code signing protect executable code on all read and execute paths.

Apple PIBtfpfm sppUIIt x
CONFIDENTIAL

DX-5492.058

APL-EG 08874831

SSV and FileVaulil:
In macQS 11, equivalent at-rest protection for system content is provided by the SSV, and therefore the system volume no longer needs to be encrypted. Any modifications made to the file system while it's at rest will be detected by the file system when they' re read. If the user has enabled FileVault, the user's content on the data volume is still encrypted with a LI s e I'- p I' Qv Icle cl s e cI'e t. If the user chooses to disabe the SSV, the system at rest becomes vulnerable to tampering, ancl this tampering coLIId enable an attackel' to extl'act encl'yptecl Llser ciata when the system next starts up. Therefore the system won't permit the user to disable the SSV if FileVault is enabled. Protection while at rest must be enabled or disabled for both volumes
In a CQASIStent ITIanABI".
In macQS "I0.15 or earlier, FileVault protects operating system software while at rest by encrypting user and system content with a key protected by a user-provided secret. This protects against an attacker with physical access to the device from accessing or effectively modifying the file system containing system software.
Qn a Mac with an Apple T2 Security Chip, only macQS itself is protected by the SSV. The software that runs on the T2 chip and verifies macQS is protected by secure boot.
macQS utilizes kernel permissions to limit writability of critical system files with a feature called System Integrity Profecfion (SIP). This feature is separate and in addition to the hardware-based Kernel Integrity Protection (KIP) available on a Mac with Apple silicon, which protects modification of the kernel in memory. Mandatory access control technology is leveraged to provide this and a number of other kernel level protections, including sandboxing and l3ata Vault.
ITIacQS uses ITIaAdatol'y access coAtrols -- pollcles that set secLlrlty I'estl'IctloAs, cl"eateci by the developer, that can't be overridden. This approach is different from discretionary access controls, which permit users to override security policies according to their pl'efel'ences. Mandatory access controls aren't visible to users, but they' re the underlying technology that helps enable several important features, including sandboxing, parental controls, managed preferences, extensions, and System integrity Protection.

Apple PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.059

APL-EG 08874832

System Integrity ProtectiorI restricts components to read-only in specific critical file system locations to prevent malicious code from modifying them. System Integrity Protection is a computer-specific setting that's on by default when a user upgrades to GS X 'IG.'I'I or later. Qn an Intel-based Mac, disabling it removes protection for all partitions Qn the physical storage device. macQS applies this security policy to every process running on the system, regardless Qf whether it's running sandboxed Qr with administrative privileges.

Tl USi CGCheS
Qne of the objects included iin the Secure Boot chain is the static trust cache, a trusted record of all the Mach-G biinaries that are mastered into the signed system volume.Each Mach-G is represented by a code directory hash. For efficient searching, these hashes are sorted before being inserted into the trust cache. The code directory is the result of the signing operation performed by codesi g n ( 1 ) . To enforce the trust cache, SIIP must remain enabled. To disable trust cache enforcement on a Mac with Apple silicon, secure boot must be configured to Permissive Security.
When a binary is executed (whether as part of spawning a new process or mapping executable code into an existing process), its code directory is extracted and hashed. If the resulting hash is found in the trust cache, the executable mappings created for the binary will be granted platform privileges -- that is, they may possess any entitlement and execute without further verification as to the authenticity of the signature. This is in contrast to an Intel-based Mac, where platform privileges are conveyed to operating system content by the Apple certificate that signs the binaries. (This certificate doesn't constrain which entitlements the binary may possess.)
Nonplatform binaries (for example, notarized third-party code) must have valid certificate chains in order to execute, and the entitlements they may possess are constrained by the signing profile issued to the developer by the Apple Developer Program.
All binaries shipped within rnacQS are signed with a platformidentifier. Qn a Mac with Apple silicon, this identifier is used to indicate that even though the binary is signed by Apple, its code directory hash must be present in the trust cache in order to execute. Qn an lntei-based Mac, the platform identifier is used to perform targeted revocation of a binaries from an aider release Qf macQS and prevent them from executing Qn newer
Vel'SIQAS.
The static trust cache completely locks a set of binaries to a given version of macQS. This behavior prevents legitimately Apple-signed binaries from older operating systems from beIAg Introduced IAto newel' ones In order fol' an attackel' to gain advantage.
Apple ships some binaries -- for example, Xcode and the development tools stack -- that aren't signed with a platform identifier. Even so, they' re still permitted to execute with platform privileges on a Mac with Apple silicon and those with a T2 chip. Because thiis platform software is shipped independently of macQS, it isn't subject to the revocation behaviors imposed by the static trust cache.

Aopfe PIBIIGfm SpcUIIIX
CONFIDENTIAL

DX-5492.060

APL-EG 08874833

Loadable trust caches
Apple ships certain software packages with /oaciabie trust caches. These caches have the saITIB data stf'UctLII'6 as the static tl'List cache, BUt although there's Only Qne static trLIst cache -- ancl Its contents are always gLIalf'anteed to IGB locked IAto read -- QAiy I'anges aftef' the kernel's early initialization is complete -- loadable trust caches are added to the system
at I'LIAtllTIB.
These trust caches are authenticated either through the same mechanism that authenticates boot firmware (personalization using the Apple trusted signing service) or as globally signed objects (whose signatures don't bind them to a particular device).
One example of a personalized trust cache is the cache, shipped with the disk image that's used to perform field diagnostics on a Mac with Apple silicon. This trust cache is personalized, along with the disk image, and loaded into the subject Mac computer's kernel while it's booted into a diagnostic mode. The trust cache enables the software
within the disk image to run with pl atform privilege.
An example of a globally signed trust cache is shipped with macOS software updates. This tl List cache pel'ITllts a chLIAk Qf code wltrlllA the softwal'6 Update -- the upciafe brain --to I'LIA with platform privilege. The update brain performs any work to stage the software update that the host system lacks the capacity to perform in a consistent fashion across versions.

All modern computing systems have many built-in peripheral processors dedicated to tasks such as networking, graphics, power management, and more. These peripheral processors are often single-purpose and are much less powerful than the primary CPU. Built-in
perl phef'als that don't I mplementsUfflclent secUrlty become an easlef' target fof' attackef's
to exploit, through which they can persistently infect the operating system. Having infected a periphera processor firmware, an attacker could target software on the primary CPU or directly capture sensitive data (For example, an Ethernet device could see the contents of packets that aren t encrypted.)
Whenever possible, Apple works to reduce the number of peripheral processors necessary Gl' wol'ks to avoid cleslgAs that regLlll 6 fll" ITIwal'e. BLlt when sepal'ate processol"s with t'hell" QwA fll'fTIwal'6 af'6 regulred, effol'ts al'6 taken to BAsLIre an attacker can t pe rsist GA that processor. This can be by verifying the processor in one of two ways:
Running the processor so that it downloads verified firmware from the primary CPU on stal"tLIP
I-laving the peripheral processor implement its own secure boot chain, to verify the peripheral processor firmware every time the Mac starts up
Apple works with vendors to audit their implementations and enhance their designs to include desired properties such as:
Ensuring minimum cryptographic strengths
Ensuring strong revocation of known bad firmware
l3isabling debug interfaces

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.061

APL-EG 08874834

Signing the firmware with cryptographic keys that are stored in Apple-controlled hardware security modules (HSMs)
In recent years, Apple has worked with some external vendors to adopt the same "Image4" data stl'UctUI'es, verlflcatloA code, Bncl slgAIng IAfl'BstrUc'tUI'6 Used by Apple slllcon.
When neither storage-free operation nor storage plus secure boot is an option, the design mandates that firmware updates be cryptographically signed and verified before the pel'slstent stol'Bge can be Updated.

a Mac with Apple silicon is capable of running code compiled for the x86 64 instruction set using a trans ation mechanism called Poseffa 2. There are two types of translation offered: just in time and ahead of time.
Just In Time
In the just-in-time (JIT) translation pipeline, an x86 64 Mach object is identified early in the image execution path. When these images are encountered, the kernel transfers control to a special Rosetta translation stub rather than to the dynamic link editor, dyld(1). The translation stub then translates x86 64 pages during the image's execution. This translation takes place entirely within the process. The kernel still verifies the code hashes of each x86 64 page against the code slgAatUI'6 Bttachecl to the blABI'y Bs the page is faulted in. In the event of a hash mismatch, the kernel enforces the remediation policy 3 p p I'Q p I' I 3 t 6 f Q I' t h 3 t p I'Q c 6 s s .
Ahead Of lime
In the ahead-of-time (AOT) translation path, x86 64 binaries are read from storage at tllTIes the systeITI CIGGITIs QptllTIBI fol' I'esponslveness of that cocle. The translated artifacts are written to storage as a special type of Mach object file. That file is similar to an executable image, but it's marked to indicate it's the translated product of another image.
In this model, the AOT artifact derives all of its identity information from the original x86 64 executable image. To enforce this binding, a privileged userspace entity signs the translation Bl'tlfact Using 3 clevlce-speclflc key that's IYlanaged by the SecUre Enclave. This key is released only to the privileged userspace entity, which is identified as such using a restricted entitlement. The code directory created for the translation artifact includes the code directory hash of the original x86 64 executable image. The signature on the translation artifact itself is known as the suppiernenta/ signature.
The AOT pipeline begins similarly to the AIIT pipeline, with the kernel transferring control to the Rosetta runtime rather than to the dynamic link editor, dyld ( 1 ) . But the Rosetta runtime then sends an interprocess communication (IIPC) query to the Rosetta system service, which asks whether there's an AOT translation available for the current executab e IIYIBQG. If foUIACI, the Bosetta sel vlcc provides 3 handle to that tl'Bnslatlon, Bnd lt's ITlapped into the process and executed. l3uring execution, the kernel enforces the code directory hashes of the translation artifact which are authenticated by the signature rooted in the device-specific signing key. The original x86 64 image's code directory hashes aren' t involved in this process.

Apple pletferm SeeunIy
CONFIDENTIAL

DX-5492.062

APL-EG 08874835

Tl'Bnslatecl Bl"tlfacts Bl'e stored In B Data VBU t which Isn't rUntlITIe-accessible by Bny entity except for the Rosetta service The Rosetta service manages access to its cache by distributing read-only file descriptors to individual translation artifacts; this limiits access to the AGT artifact cache. This service's interprocess communication and dependent footprint are kept intentiona ly very narrow to limit its attack surface
If the code directory hash of the original x86 64 image doesn't match with the one encoded into the AQT translation artifact's signature, this result is considered the equIvaIent Qf Bn Invailcl cocle slgnatUI'e, BAd Bppl"Qpl'late enfol'cemeAt BctloA Is taken.
If a remote process queries the kernel for the entitlements or other code identity properties of an AQ'll-translated executable, the identity properties of the original x86 64
IITIage Bl'e I'etLII'Aecl to It.
macGS 'I'I or later ships with Mach "fat" binaries that contain slices of x86 64 and arm64 machine code. Qn a Mac with Apple silicon, the user may decide to execute the x86 64 slice of a system binary through the Rosetta pipeline -- for example to load a plug-in that has no native arm64 variant. To support this approach, the static trust cache that ships with macGS., generally, contains three code directory hashes per Mach object file:
A code directory hash of the arm64 slice
A code directory hash of the x86 64 slice
A code directory hash of the AQT translation of the x86 64 slice The Rosetta AGT translation procedure is determiniistic in that it reproduces identical QUtpUt fol' Bny given InpUt, II'respective of when the tl'Bnsiatlon was performed Ql' Qn what device It was perfol" IYIecl.
l3uring the macGS build, every Mach object file is run through the Rosetta AGT translation pipeline associated with the version of macGS being built, and the resulting code directory hash is recorded into the trust cache. For efficiency, the actual translated products don' t ship with the operating system and are reconstituted on demand when the user requests them.
When an x86 64 image is being executed on a Mac with Apple silicon, if that image's code directory hash is in the static trust cache, the resu ting AGT artifact's code directory hash is B/so expected to be in the static trust cache. Such products aren't signed by the devicespecific key, because the signing authority is rooted in the Apple secure boot chain.
Unsigned x86 64 code
A Mac with Apple silicon doesn't permit native arm64 code to execute unless a valid signature is attached. This signature can be as simple as an ad hoc code signature (cf. codesign( 1)) that doesn't bear any actual identity from the secret ha f of an asymmetric key pair (it's simply an unauthenticated measurement of the binary).
For binary compatibility, translated x86 64 code is permitted to execute through Rosetta with no signature information at all. No specific identity is conveyed to this code through the device-specific Secure Enclave signing procedure, and it executes with precisely the same limitations that native unsigned code executing on an intel-based Mac,

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.063

APL-EG 08874836

Direct memory access protections for Mac compoters
To. achieve high throughput an high-speed interfaces like PCIe, FIreWire, Thunder'balt, and USB, computers must suppart. direct memory access (I3MA) from peripherals That. is, they must be able to read and write to RAM without continuous involvement of the CPU. Since 2012,,Mac computers have implemented numerous technologies ta protect I3MA, resulting
in the best and ma<. comprehensive set of IRMA protections on any PC
Direct rnernory access protections for a lilac with Apple silicon
Apple systems an chip contain an Input/Output Memory Management Unit (IOMMU) for each l3MA agerit in the system, including PCle and Thunderbalt parts. Because each IOMMU has its awn set af address translation tables to translate I3MA requests, peripherals connected by PCIe ar' Thunder'balt can access only memory that has been explicitly mapped for their use. Peripherals can't access memory belangirrg ta other parts af the system -- such as the kernel or firmware -- memory assigned to other peripherals. If an IQMMU detects an attempt by a peripheral ta access memory that isn't mapped for that peripheral's use, it triggers a kernel panic,
Direct rnernory access protections for an intel-based Mac
On an Intel-based Mac with Intel Virtualization Technology far Directed I/O (VT-d) initialize the IQMMU, enabling l3MA remapping and interrupt remapping very early in the boot pracess to mitigate various classes of security vulnerabilities. The Apple IOMMU hardware begins operation with a default-deny policy, so the instant when the system is powered on, it automatically begins blacking I3MA r eqluests from per ipherals. After being initialized by
software,, the IQMMUs begin allowing DMA requests from peripherals to memory regions
that have bien explicitly mapped far' their' use.
Nate: Interrupt remapping far PCle isn't necessary an a Mac with Apple silicon, because each IOMMU handles MSls for its own peripherals.
Starting in macOS 1 "I, all Mac computers with an Apple T2 Security Chi j run UEFI drivers that facilitate I3MA in a restricted ring 3 environment when these drivers are pairing with external devices. This property helps mitigate security vulnerabilities that may occur when a malicious device interacts. with a UEFI dr'iver in an unexpected way at baot time. In particular; it reduces the impact of vulnerabilitles In a drivers handling of l3MA buffers.
Kernel extensions in macOS
Starting with macQS 11, if third-party kernel extensions (kexts) are. enabled, they can' t be loaded inta the kernel on demand Instead, they' re merged into an Auxriiary Kernel Calle~ion (ArjxKC) ,,which is loaded during the boot process. For a Mac with Apple silicon, the measurement of the AuxKC is. signed into the LocalPolicy (far previous har'dware., the AuxKC resided on the data volume). Rebuilding the AuxKC requires the user's appraval and restarting of the macGS te load the chariges inta the kernel, and it requires that the secure 'boot be configured ta Reduced Security.
Important: Kexts are no longer recommended far macGS. Kexts risk the integrity and reliability af the operating system,,and users should prefer solutians that darr't require extending the kernel.
Apple Platform Security
CGNFI l3ENTIAL

Kexts must be explicitly enabled for a Mac with Apple silicon by holdiing the power button at startup to enter into Qne True Recovery ('llTR) mode, then downgrading to Reduced Security and checking the box to enable kernel extensions. This action also requires entering an administrator password to authorize the downgrade. The combination of the
FATA BAcl passwof'cl I'eqLllreIYleAt ITIBkes lt clffflcUlt fof' softwaf'e-only attackers starting
from within macGS to inject kexts into macGS, which they can then exploit to gain kernel privileges.
After a user authorizes kexts to load, the above User-Approved Kernel Extension Loading flow is used to authorize the installation of kexts, The authorization used for the above flow is also used to capture an SHA384 hash of the user-authorized kext list (LIAKL) in the LocalPolicy. The kernel management daemon (kmd) is then responsible for validating only those kexts found in the UAKL for inclusion into the AuxKC.
If System integrity Protection (SIP) is enabled, the signature of each kext is verified before being included in the AuxKC.
If SIP is disabled, the kext signature isn't enforced.
This approach allows Permissive Security flows for developers or users who aren't part Gf the Apple Developer Program to test kexts before they are signed.
After the AuxKC is created, its measurement is sent to the Secure Enclave to be signed Bncl IACIUclecl IA Bn Image4 clata structure that can be evaluatecl by IBGot Bt staf'tup. As part of the AuxKC construction, a kext receipt is also generated. Thiis receipt contains the list of kexts that were actually included in the AuxKC, because the set could be a subset of the UAKL ifbanned kexts were encountered. An SHA384 hash of the AuxKC Image4 data structure and the kext receipt are included in the LocalPolicy. The AuxKC Image4 hash is Llsecl fol' extra vel"Ifllcatlon by IBoot Bt stal'tLlp to eAsLII"e 'that lt Isn't possfble to start Up an older Secure Enclave-signed AuxKC Image4 file with a newer LocalPo icy. The kext receipt is used by subsystems such as Apple Pay to determine whether there are any kexts currently loaded that could interfere with the trustworthiness of macQS. If there are, then Apple Pay capabilities may be disabled.
macQS 'IG.'l5 enables developers to extend the capabilities of macGS by installing and
managingsystem extensions that run in user space rather than at the kernel level. By
running in user space, system extensions increase the stability and security of macGS. Even though kexts inherently have full access to the entire operating system, extensions running in user space are granted only the privileges necessary to perform their specified function.
l3evelopers can use frameworks, including DriverKit, EndpointSecurity, and NetworkExtension, to write USB and human interface drivers, endpoint security toois (like data loss prevention or other endpoint agents), and VPN and network tools, all without needing to write kexts. Third-party security agents should be used only if they take Bclvantage Qf these APIs Qf' have B I'G oust I'Gael ITIap to tl'ansltlon to theITI Bncl away fl'QITI kernel extensions.

Appfe PIBIIGfm sppUIIIV
CONFIDENTIAL

DX-5492.065

APL-EG 08874838

To improve security, user consent is required to load kernel extensions installed with or after installing macOS 'I0.13. This process is known as User-Approveci Kerne/ Extension Loading. Administrator authorization is required to approve a kernel extension. Kernel extensions don't require authorization if they:
Were installed on a Mac when running macGS 10.'l2 or earlier Are replacing previously approved extensions Are allowed to load without user consent by using the spct l c o mmand-line tool available when a Mac was booted from recoveryGS Are allowed to load using mobile device management (MDM) configuration Starting with macQS 'IG.'l3.2, users can use MDM to specify a list of kernel extensions that load without user consent. This option requires a Mac running macQS 'I0.13.2 that' s enrolled in MDM -- through Apple School Manager, Apple Business Manager, or userapproved MDM enrollment,
OPIIion ROM SeCUI ity in macos
Afofe: Option RGMs aren't currently supported on a Mac with Apple silicon.
Both Thunderbolt and Pclle devices can have an "Option RGM (QRQM)" physically attached to the device. (This is typically not a true RQM but is instead a rewritable chip that stores firmware.) On UEFI-based systems, that firmware is typically a UEFI driver, which is read in by the UEFI firmware and executed. The executed code is supposed to initialize and configure the hardware it was retrieved from, so that the hardware can be made usable by the rest of the firmware. This capability is required so that specialized third-party hardware can load and operate during the earliest startup phases -- for example, to start up from external RAID arrays.
However,,because ORQMs are generally rewritable, if an attacker overwrites the GRGM of a legitimate peripheral, the attacker's code executes early in the boot process and is able to taIYlpel' with the executloA environment ancl violate the Integl'lty of softwal'e that's Ioaclecl later. Likewise, if the attacker introduces their own malicious device to the system, they' re also able to execute malicious code.
In rnacQS 'IG.'I2.3, the behavior of Mac computers sold after 201'I was changed to not execute QRQMs by default at the time the Mac booted unless a special key combination was pressed. This key combination protected against malicious GRGMs being inadvertently introduced into the macOS boot sequence. The default behavior of the Firmware Password Utility was a so changed so that when the user set a firmware password, QRGMs couldn' t execute even if the key combination was pressed. This protected against a physically present attacker intentionally introducing a malicious GRGM. For users who still need to run QRQMs while they have a firmware password set, a nondefault option can be configured using the firmwarepasswd command-line tool in macQS.

Apple PIBIIGI tH SpcUI IIX
CONFIDENTIAL

DX-5492.066

APL-EG 08874839

OROM sandbox security
ln macOS 10.15, UEFI firmware was updated to contain a mechanism for sandboxing OROMs and for stripping privileges from them. UEFI firmware typically executes all code, including OROMs, at the maximum CPU privilege level, called ring 0, and has a single shared virtual memory space for all code and data. Ring 0 is the privilege level where the macOS kernel runs, whereas the lower privilege level, ring 3, is where apps run. The QROM sandbox deprivileged OROMs by making use of virtual memory separation like the kernel does and then making the ORQMs run in ring 3.

Ring 3 oooo piiraogodl

Virtual memory space I
CROM 1
"I'm a storage driver (for card I)'

Virtual memory space 2
CROM 2
"I'm a network driver lfor card 1)a

Virtual memory space 3 CROM 3
vms
secure boot driver"

Ring 0 lmore privileged)

®

CROMsandboxdriver Ogt

Nonsandboxed UEFI drivers

Core UEFI firmware

Hardware
(mora privileged)

PCle card I

Option ROM (CROM) sandboxing.

xss CPU PCle card 2

PCle card 3

The sandbox further significantly restricts both the interfaces that the OROMs can call
(much like system call filtering in kernels) and the type of device that an OROM can register as (much like app approval.) The benefit of this design is that malicious OROMs can no longer directly write anywhere within ring 0 memory. Instead, they are limited to a very narrow and well-defined sandbox interface. This limited interface significantly reduces attack surface and forces attackers to first escape the sandbox and escalate privilege.

UEFI firmware security in an Intel-based Mac
Overview
Since 2006, Mac computers with an Intel-based CPU use an Intel firmware based on the
Extensible Firmware Interface (EFI) Development Kit (EDK) version 1 or version 2. EDK2based code conforms to the Unified Extensible Firmware interface (UEFI) specification. This section refers to the Intel firmware as the UEFI firmware. The UEFI firmware was the first code to execute on the Intel chip.

Apple piatlo m socv iv
CONFIDENTIAL

DX-5492.08T

ar
AibL-EG 08874840

Far an Intel-based Mac w'ithaut the Apple T2 Security Chip, the root of trust far the UEFI firmware is the chip where the firmware is stored. UEFI firrnvvare updates are digitally signed by Apple and verified by the firmware befare updating the storage. Ta prevent rail'back attacks, .updates must always have a v'ersian newer than the existing one. However,, an attacker with physical access ta the Mac could potentially use hardware to attach to the firmware storage chip and update the chip to contain malicious content. Likewise, if vulnerabilities are faund in the early boot process of the UEFI firmware ibefare it writerestricts the storage chip), this could also lead to persistent infection of the VEFI firmware. This Is a hardware architectural limitation common in most Intel-based PCs and present In all Intel-based Mac computers without the T2 chip. To help prevent physical attacks that subvert UEFI firmware, Mac camputers were rearchltected to root the trust ln the UEFI firmware in the T2 chip. Gn these Mac computers, the raot of trust for the UEFI firmware is specifically the T2 firmware, as described in Boot process for an Intel-based Mac.
Intel ManagementEngine (ME) subcornponent
One subeomponent stored within the UEFI firmware is the intei Management Engine (ME) firmware. The ME -- a separate processar and subsystem within Intel chips -- is used primarily for audio and video copyright protection on a Mac that has only Intel-based graphics. To reduce this subcomponent's attack surface, an Intel-based Mac runs a custom ME firmwar'e fram which most components have been removed. Because the resulting Mac ME firmware ls smaller than the default minimal build that Intel makes available, many components that have been the subject of public attacks by security researchers in the past are na longer present.
Intel processors have a special execution mode that's distinct from normal operation.
CalledSystemManagerrferft Mock (SMM), it was originally Introduced to handle time-
sensitlve operations such as power management However, to perform such actions, Mac computers have historically used a discrete microcontroller called the System Management Cantroiier (SMC'). No longer a separate microcontroller, the SMC has been integrated into, the T2 chip.
System security for watchOS
Apple Watch uses many of the same hardware-based platform security capabilities to perform secure hoot, secure software updates, mairrtain operating system integrity and help protect data an the device as well as during communication with its paired iphone and with the lrlternet. Supported technologies include those listed in System Security (for example, KIP and SCIP) as well as Data Protection, keyahain, and network technologies.
SecUre pairing with iPhone
Apple Watch can he paired with only one iphone at a time. When Apple Watch is unpaired,, iPhane cammunlcates Instructions ta erase all content and data fram the watch.
Apple Platform Security
CONFIDENTIAL

Pairing Apple Watch with iPhone is secured using an aut-of-band process to exchange public keys, foliovlred by the Bluetoath Low Energy (BLE) link shared secret App}e Watch displays an animated pattern,,which is captured by the camera on iPharie. The pattern contains an encaded secret that's used far BLE 4.1 out-af-band pairing. Standard BLE Passkey Erltry is used as a f'aliback pairing method, if necessary.
After the BLE session is established and encrypted using the highest security protocol available in the Bluetooth Core Specification, IPhone and Apple Watch exchange. keys using either:
· A process adapted fram Apple Identity Service (ll3S) as described in the iMessage security overview.
e A key exchange using IKEv2/IPsec. The initial key exchange is authenticated using either the Bluetooth session key (for pairing scenarios) or the IDS keys (for operating system update scenarios). Each device generates a random public and private 256-bit Ed266'lg key pair, snd during the initial key exchange process,, the public keys are exchanged.
The mechanism usedforkey exchange and encryption depends an which operating system versions are on the iPhone and Apple Watch. iPhone devices running iG813 or later when paired with an Apple Watch running watchOS 6 or later use only IKEv2/IPsec for key exchange and encryption.
After keys have been exchanged:
· The Bluetooth session key is discarded and all communications between iPhone and Apple Watch are encrypted using one of the methods listed abave -- with the encrypted Bluetoath, Nfi-Fi, and cellular links providing a secondary encryption layer. (IKEv2/IPsec only) The keys are stored in the. system keychain and used for authenticatirlg future IKEv2/IPsec sessions between the devices Further communication between these devices is encrypted and integrity protected using ChaCha20-Poly1306 (268-bit keys).
The Bluetaoth Low Energy, device address is rotated at 15-minute intervals to reduce the risk af local tracking of the device using the broadcast of s persistent. identifier.
To. support apps that need streaming data, encryption is provided using methods described in FaceTime security, using either the Apple Identity Service (IDS) provided by the paired IPhone or a direct interriet connection.
Apple Watch implements hardware-encrypted storage and class-basted protection of files and keychain items. Access-controlled keybags for keychain items are also used. Keys used tacommunicate between Apple Watch and iPhane are also secured using classbased protection. For more information, see Keybags for Data Protection.
Secure use of Wi-Fi, celluiar, iCloud, and Gmail
When App}e Watch jsn't wjthin Bluqtooth rarlge, Ki-FI or cellular can be used instead. Apple VVatch automatically. joins VVi-Fi netvvorks that have been already been joined on the paired iPhane and vvhose credentials have synced to the Apple Mfatch while both devices were in range This Auto-Join behavior can then be configured on a per-network basis in the VVi-Fi section of the Apple VVatah Settings app. WI-Fi networks that have never been joined before an either device can be manually joined in WI-Fi section of the Apple Mfatch Settings app.
Apple Platform Security
CONF I l3ENTIAL

VVhen Apple VVateh and IPhane are out af range, Apple Watch cannects directly ta iCloud and Gmall servers ta fetch Mall, as opposed to syncing Mal} data with the paired IPhane over the inter'net. For Smail accounts,, the user is required ta authenticate ta Gooqle in the Mail sectian af the Watch app an IPhane. The OAuth taken received from Gaagie is sent over to Apple Watch jn encrypted format aver Apple Iderlt}ty Service (IDS) so it can be used ta fetch Mail. This QAuth taken is never used for connectivity with the Gmail server fram the paired iPhane.
Locking and unlocking Apple Watch
If wrist detection is enabled, the device locks automatically shortly after it's removed from the user's wrist. If wrist detectiori is disabled, Corltrol Center provides an aptiori for lackjng Apple VVatch. When Apple Nfateh is locked, Apple Pay can be used only by eritering the watch's passcode. Wrist detectian is turned aff using the Apple Watch app on iPhane. This setting can also be enforced using a mobile device management (MDM) salutian.
The paired iPhone can also unlock the watch, provided the watch is being warn. This is accomplished by establishing a carineetiari authenticated by the keys established during pairing. IPhane sends the key,,which the w'atch uses to unlock its Data Protection keys. The watch passcode isn't known to iPhc ne nor is it transmitted. This feature can be turned off usingthe Apple Watch app on iPhone.
Enabling Find My an the paired IPhane also allows the use af Activation Lock on Apple VVatch. Activation Lock makes it harder for anyone to use ar sell an Apple Watch that' s been lost ar stolen. Activation Lack requires the user's Apple ID and passward ta unpair, erase, ar reactivate an Apple @fetch.
Updating system software
Apple Watch can be configured far a system software update the same night. For mare information on how the Apple Watch passcode gets stared and used during the update, see Keybags,
Auto Unlock with Apple Watch in macOS
Users with Apple Watch can use it to automatically unlock their Mac. Bluetaath Low Energy (BLE) and peer-to-peer VVI-Fi a11ow Apple Nfatch ta securely unlock a Mac after ensuring praximity between the devices. This requires an iCloud account with twa-factor authentication configured.
Nfhen enabling an Apple Nfatch to. unlock a Mae, a secur'e link using Auto Unlock Identities is established. The Mac creates a random one-time-use unlock secret and transmits It to the Apple Watch aver the link. The secret is stored on Apple VVatch and can be accessed anly when Apple Watch is unlocked. The unlock taken isn't the user"s password.
During an unlock operation, the Mae uses BLE to create a connection to the Apple Nfateh. A securelinkisthen established between the twa devices using the shared keys used when it was first enabled. The Mac and Apple Watch then use peer-to-peer Wi-.Fi and a secure key derived fram the. secure link ta determine the distance between the two devices. If the devices are within range, the secure link is then used to transfer the preshared secret ta unlock the Mac. After successful unlock, the Mac replaces the current urilock secret with a new one-time use unlock secret and transmits the new unlock secret ta the Apple Watch over the link.
Apple Platform Security
CGNFI l3ENTIAL

When Auto Unlock with Apple Watch is enabled, the Apple Watch can be used in place or together with Touch ID to approve authorization and authentication prompts from:
ITIBCQS BAcl Apple Bpps that I'equest BLlthol'Ization Thll"cl-pal'ty Bpps that I"equlest Buthentlcatlon Savecl Safal'I passwol'ds Secure Notes
Cryptographic pseudorandom number generators (CPRNGs) are an important building block for secure software. To this end, Apple provides a trusted software CPRNG running in the iQS, iPadQS, macQS, tvQS, and watchQS kernels. It's responsible for aggregating raw entropy from the system and providing secure random numbers to consumers in both the kernel and user space.
Entropy soua ces
The kernel CPRNGis seeded from mu tiple entropy sources during boot and over the lifetime of the device. These include (contingent on availability):
The Secure Enclave hardware TRNG Timing-based jitter collected during boot Entropy collected from hardware interrupts A seed file used to persist entropy across boots Intel random instructions -- for example, RI3SEEDand RI3RANI3 (only on an Intei-based Mac)
The kea nel CPHNG
The kernel CPRNGis a Fortuna-derived design targeting a 256-bit security level. It provides high-quality random numbers to user-space consumers using the following APIs:
The getent r o p y (2) system call The random device (/dev/random) The kernel CPRING accepts user-supplied entropy through writes to the random device.

x Apple PIBIIGI tH SPCUI It
CONFIDENTIAL

DX-5492.071

APL-EG 08874844

Apple Security Research Device
The security research device is a specially fused IOS device that aIIows security researchers to perform research on iOS without having to defeat or disable the platfarm security features of iPhone. Vfith this device, a researcher can side-load content that runs with platform-equivalent permissions, and thus perform research on a platform that mare closely models that af production devices.
Ta ensure that user devices aren't affected by the security research device exeeutiari policy, the palicy changes are implemented in a variant af iBoat and the Boat Kernel Callectiori These fail to boot on user hardware. The research iBaot checks far a new fusing state and eriters a panic laap if it's being run an nenreseareh fused hardware.
The cryptex subsystem allows a researcher to load a persanalized trust cache and a disk image containing, corresponding content. A number of defense in-depth measures have been implemented ta ensure that this subsystem doesn' t. allow executian on user devices: · launchd won't load the cr'yptexd launchd property list if it' s .unable to detect the
I*eseal'eh f U'se. · cxyptexd aborts if it daesn't detect the research fuse. · Th e entitlement that grants erypte xd the ability to mount a disk image is honored only
by the research kernel cache. The relevant cade path isn't compiled into the release ker'nel cache. · The signing server refuses ta personalize a cryptex disk Image for a device not an an explicit allow list. To respect the privacy of the security researcher, only the measurements '(far example,, hashes) of the executables and the security' research dev'ice identiflers are sent to Apple during personalization, Apple doesn"t receive the content. af the cryptex being loaded onto tlM device.
To avoid having a malicious party attempt to masquerade a research device as a user device to trick a target into using i't for everyday usage, the security research device has the following differences:
· Th e security research device starts up only while charging. This can be using a lightning cable or a Qi-compatible charger. If the device isn't charging during startup, the device enters Recovery made. If the user starts charging and restarts the device, it starts up as normal. As soan as XNU starts, the device doesn't need to be charging to continue Operation.
· The wards Security Research,Device are displayed below the Apple logo during iBoot s't a I't u p.
· The XNU kernel boots Inverbose mode. · The device is etched an the side with the message '"Property af Apple. Confidential and
Proprietary. Call +1 877 596 1'126. The fallowing are defense in-depth measures that a researcher could possibly alter · The wards Security Research, Device are displayed durirrg device setup. · Th e w ar'dsSecurity Research Device ar'e displayed an the lack screen and in the
Settfngs app.
Apple Platform Sec or lty
CONF I l3ENTIAL

The Security Research Device affords researchers the following abilities that a user device doesn t:
Side-load executable code onto the device with arbitrary entitlements at the same permission level as Apple operating system components. Start sel'vices at stal'tup. p eI' s I st c o n t ent a cr'o s s I'e s't a I't s.

Aopfe PIBtfGfm SpcUIIt x
CONFIDENTIAL

DX-5492.073

APL-EG 08874846

The secure boot chain, system security, and app security capabilities all help to verify that only tl'Llstecl cocle Bncl Bpps I'LIA Qn B clevlce. Apple clevlces have Bclclltlonal Pncf'yptlon featUres to safegLIaf'cl Usel' data, even when Qthef' pal'ts Qf the secLII'lty Infrastl'UctLII'e have been compromised (for example, if a device is lost or is running untrusted code). All of these features benefit both users and IT administrators, protecting personal and corporate information and providing methods for instant and complete remote wipe in the case of device theft or loss.
iQS and iPadQS devices used a file encryption methodology called Data Profecff'on, whereas the data on an Intel-based Mac is protected with a volume encryption technology called FiieVBuif. A Mac with Apple silicon uses a hybrid model that supports Data Protection, with two caveats: The lowest protection level Class (D) isn't supported, and the default level (Class C) uses a volume key and acts just like the FileVault on an Intelbased Mac. In all cases, key management hierarchies are rooted in the dedicated silicon of the Secure Enclave, and a dedicated AES Engine supports line-speed encryption and helps ensure that long-lived encryption keys aren't exposed to the kernel operating system or CPU (where they might be compromised). (An Intel-based Mac with a T'I or lacking a Secure Enclave doesn't use dedicated silicon to protect its FileVault encryption keys.)
Besides using Data Protection and FileVault, Apple has an operating system kernel that prevents unauthorized access to data by enforcing access controls.. These controls most often take the form of sandboxing apps (which restrict what data an app can access), Bncl pl'otectlAg Bn Bpp's data In Data VBU/f. Think Qf B clata vaUlt Bs Bn Invel'teel saAclbox. Rather than I'estrlc'ting the calls BA Bpp can ITIBke, this mechanism I'estl'lets access to the protected data (again, enforced by the kernel independent of file encryption) regardless of whether the requesting app is itself sandboxed.

Apple PIBIIGI m SppUI IIX
CONFIDENTIAL

DX-5492.074

APL-EG 08874847

B y s 6 t t I A g U p B cl 6 v Ic 6 p a s sc0cl 6 0 I' p B s sw0rcl, t h 6 LI s 6 r a Ut0 ITIatIc BIIy6A ab I6 s D a ta Protection. IQS and IPadOS support six-digit, four-digit, and arbitrary-length alphanumeric passcodes. Besides unlocking the device, a passcode or password provides entropy for cei"tain GAci'yptlon keys. This ITIeans BA attacker In possessloA Qf B clevlce caA t get access to data in specific protection classes without the passcode.
The passcode or password is entangled with the device's UID, so brute-force attempts must be performed on the device under attack. A large iteration count is used to make each attempt slower. The iteration count is ca ibrated so that one attempt takes approximately 80 milliseconds. In fact, it would take more than five and one-half years to
try all combinations of a six-character alphanumeric passcode with lowercase letters and
numbers.
The stronger the user passcode is, the stronger the encryption key becomes. And by using Touch ID and Face ID, the user can establish a much stronger passcode than would otherwise be practical. The stronger passcode increases the effective amount of entropy protecting the encryption keys used for Data Protection, without adversely affecting the user experience of unlocking a device multiple times throughout the day.
To fLlr ther cliscoljrage bl"Ute-force passcocle attacks, thei'6 al'6 escalating tllTIG clelays af tel' the entry of an invalid passcode at the Lock Screen.

5 minutes
15 minutes
If the Erase Data option is turned on (in Settings > Touch ID 8 Passcode), after 10 coAsecUtlve Incoi'I'ect atteIYlpts to entei' the passcocle, all content BAOI settings al'6 I'GIYI0vecl fr0m storage. C0nsecutlve atteITIpts Of the saITIG Inc0I'I'ect passc0cle d0A't c0LInt toward the limit. This setting is also available as an administrative policy through a mobile device management (MDM) solution that supports this feature and through Microsoft Exchange ActiveSync, and can be set to a lower threshold. Qn devices with Secure Enclave, the delays are enforced by the Secure Enc ave. If the device is restarted during a timed delay, the delay is still enforced, with the timer starting over for the current period.

Appfe PIBIIGI m Sepuf IIX
CONFIDENTIAL

DX-5492.075

APL-EG 08874848

If a long password that contains only numbers is entered, a numeric keypad is displayed at the Lock Screen instead of the full keyboard. A longer numeric passcode may be easier to enter than a shorter alphanumeric passcode, while providing similar security.
Users can specify a longer alphanumeric passcode by selecting Custom Alphanumeric Code in the Passcode Qptions in Settings > Touch II3 8 Passcode or Face II3 8 Passcode.
To prevent bl'Lite-fol'ce attacks, when Mac stal'ts Lip, Ao ITlore than 3G passwol d BtteITlpts are allowed at the Login Window or using Target Disk Mode, and escalating time delays are imposed after incorrect attempts. The delays are enforced by the Secure Enclave. If Mac is restarted during a timed delay, the delay is still enforced, with the timer starting over for the current period.
To pl'event ITIalwal'e fl'QA1 caLIsIAg pel IYIBAeAt OIBta loss by tl'ying to attack the user 5 password, these limits aren't enforced after the user has successfully logged into the Mac, but is reimposed after reboot. If the 3G attempts are exhausted, 'IG more attempts are available after booting into recoveryQS. And if those are also exhausted, then 6G additional attempts are available for each FileVault recovery mechanism (iCloud recovery, FileVault recovery key, and institutional key), for a maximum of 'IBG additional attempts. Gnce those additional attempts are exhausted, the Secure Enc ave no longer processes any requests to decrypt the volume or verify the password, and the data on the drive becomes unrecoverable.
To protect data in an enterprise setting, IT should define and enforce FileVault configuration policies using an MDM solution. Grganizations have several options for managing encrypted volumes, including institutional recovery keys, personal recovery keys (that can optionally be stored with MDM for escrow), or a combination of both. Key rotation can also be set as a policy in MI3M.

l3eiay enforced
5 minutes 15 minutes 15 minutes

In a Mac with the Apple T2 Security Chip, the password serves a similar function except that the key generated is used for FileVault encryption rather than l3ata Protection, macQS also Qffel's BddltlonaI passwol'cl recovei'y Options:
iCloud recovery
Apple PIBIIGIm SepUIIIX

CONFIDENTIAL

t3X-5492.076

APL-EG 08874849

FileVault recovery FileVault institutional key
DBt8 Protect lofl
l3ata Protection overview
Apple .uses a technology called Data Protection to protect data stored ln flash storage on the devices that feature an Apple SoC such as iPhone, iPad, Apple Watch, Apple TV, and a Mac with Apple silicon. Data Protection allows the device to respond to common events such as incoming phone calls but also enables a high level of encryption for user data. Certain system apps (such as Messages, Mail, Calqridar, Contacts, Photos) arid Health data values use Data Protection by default. Third-par'ty apps receive this protection automatically.
implernenkation
Data Protection is i mplemented byconstructing and managing a hierarchy of keys and 'builds on the har'dwar'e encryption technologies 'built into Apple devices. Data Protection is controlled on a per-fiIe basis by assigning each file to a class, accessibility is determined according to whether the class keys have been unlocked. APFS (Apple File System) allows
the file systemto further subdivide the keys into a per-extent basis (where portions of a
file carl have different keys). Every time a file on the data volume is created, Data Protection creates a new 266-bit key (the per-file key] and gives it to the hardware AES Engine, which uses the key to encrypt the file as it is written to flash storage. The encryption uses. AES128 in a block cipher mode of operation known as X'TS mode, where the 256-bit per file key is split to provide a 128bit tweak and a 126-bit cipher key. On a Mac with Apple silicon, Data Protection defaults to Class C (see Data Protection classes), but utilizes a volume key rather than a per-extent or per-file key,-- effectively recreating the security model of FileVault for user data Llsers must still opt-in to FileVault in order to receive the full protection of entangling the encryption key hierarchy with their password. Developers can also opt in to a higher protection class that uses a per-file or per-extent key
Dat8 ProtBctlon ln Apple devices
Qn devices with an A7, 82, or 83 systems on chip (SoCsj, AES-CBC block cipher encryption is used The initialization vector is calculated with the block offset into the file, encrypted with the SHA-1 hash of the per-file.key. The per-file (or per-extent) key is wrapped with one of several class keys, depending on the circumstances under which the file should be accessible. Like all other wrappings that use RFC 3394, this is performed using NIST AES key wrapping. The wrapped per-file key is stored in the file's metadata.
Apple Platform Security
CONF I l3ENTIAL

Devices with APFS format may support claning of files (zer'a-cast copies using capy'an-write technology) If a file is cloned, each half of the clone gets a net key to accept iricoming writes se that new data is written to the media with a riew key. Qver time, the file may became composed of various extents (or fragments), each mapping to different keys. However, all of the extents that comprise a fIIe are guarded by the same class key.
A'hen a file is opened, its metadata is decrypted with the file system key, revealing the wrapped per-file.key and a notatian on which class protects it. The per-.file (or per-extent) key is unwrapped with the class key and then supplied ta the hardware AES Engine, which decrypts the file as it's read from flash storage. All wrapped file key handling occurs in the Secure Enclave; the file key is never directly exposed to the Application Processor. At startup, the Secure Enclave negotiates an ephemeral key with the AES Engine. When the Secure Enclave unwraps a file's keys, they' re rewrapped vrith the ephemeral key and serlt back to the Application Processor.
The metadata af all files in the data volume file system are encrypted with a random volume key, which is areated when the operating system is first installed or when the device is wiped by a user. This key is encrypted end wrapped by e key wrapping key that is,knawn only to the Secure Enclave for lang-term storage. The key wrapping key changes every time a user erases their device. On A9 (and newer) SoCs, Secure Enclave relies upon entropy, backed by anti-replay systems, ta achieve effaceability and to protect its key wrappirig key, among other assets. Far more information, see Secure nonvalatile storage.
Just like per-file or per-extent keys, the rrretadata key o'f the data volume is never directly exposed to the Application Processor; the Secure Enclave prcvides an ephemeral, perboot versian instead. Mfhen stored, the encrypted file system key is additionally wrapped by an "effaceable key" stored in Effaceable Storage or using a media key-wrapping key, protected by Secure Enclave anti-replay mechanism.- This key doesn't provide additional confidentiality of data instead, it's designed ta be quickly erased on demand (by the user with the "Erase All Content and Settings" option, ar by a user or administrator issuing a remote wipe command fram a mobile device management (MI3M) solution, Microsoft Exchange ActiveSync, or iCloud). Erasing the key in this manner renders all files cryptegraphically inaccessible.
The contents af a fIIe may be encrypted with one or more per-file (or per-extent) keys that are wrapped with a class key and stored in a file's metadata, which in turn is encrypted with the file system key. The class key is protected with the hardware UID and, for some classes, the user's passcode. This hierarchy provides bath flexibility and performance. For example, changing a file's class only requires rewrapping its per-file key, and a change of passcode just rewraps the class key.
13aia Protection classes
VVhen a new file is created on devices supporting Data Protectian, it's assigned a class by the app that creates it. Each class uses different policies ta determine when the data is accessible. The basic classes and policies are described in the following sections. Apple silicon-based Macs do not support Class D: No Protectian, and a security boundary is established around logging in and out (not locking ar unlocking as on iphone, iPad, and ipod touch).
Apple Platform Security
CONF I l3ENTIAL

Class A: Complete Protection
Class 8: Protected Unless Open
Class C: Protected Llntil First Llser Authentication Note: macQS uses a volume key to recreate FileVault protection characteristics.
Class Q: No Protection Note: Not supported on macQS.

Protection type (NSFileProtectionComplete) (NSFileProtectionCompleteLlnlessopen) (NSFileProtectionCompleteLlntilFirstUserAuthentication)
(NSFileProtectionNone)

Complete Pirotection
(/VSFi/eProfecfioAComplefe): The class key iis protected with a key derived from the user passcode or password and the device UIII3. Shortly after the user locks a device ('IG seconds, if the Require Password setting is Immediately), the decrypted class key is discarded, rendering all data in this class inaccessible until the user enters the passcode again or unlocks (logs in to) the device using Touch ID or Face IID.
In rnacQS, shortly after the last user is logged out, the decrypted class key is discarded, rendering all data in this class inaccessible until a user enters the passcode again or logs into the the device using Touch II3.
Protected Unless Open
(/vsFI'/eProfecfior)comp/eteUA/essQ/pen): some files may need to be written while the device is locked or the user is logged out. A good example of this is a mail attachment downloading in the background. This behavior is achieved by using asymmetric elliptic curve cryptography (ECDIH over Curve255'l9). The usual per-file key is protected by a key derived using Qne-Pass Diffie-Hellman Key Agreement as described in NIST SP 8GG-56A.
The ephemeral public key for the Agreement is stored alongside the wrapped per-file key. The KI3F is Concatenation Key Derivation Function (Approved Alternative 'I) as described in 5.8.'I of NIST SP 8GG-56A. Algorithmll3 is omitted. PartyUllnfo and PartyVInfo are the ephemeral and static public keys, respectively. SHA256 is used as the hashing function. As soon as the file is closed, the per-fi e key is wiped from memory. To open the file again, the shared secret is re-created using the Protected Unless Qpen class's private key and the file's ephemeral public key, which are used to unwrap the per-file key that is then used to decrypt the file.
In rnacQS, the private part of NSFileProtectionCompleteUnlessQpen is accessible as long Bs Bny Llsel's QA the systeITI Bl'e logged In ol' Bl'e BLlthentlcatecl.

(/VSFiie/ trofecfioAComp/efeUA/I'/FirsfUserAufhenh'cafion): This class behaves in the same way as Complete Protection, except that the decrypted class key isn't removed from memory when the device is locked or the user logged out. The protection in this class has similar properties to desktop fuil-volume encryption, and protects data from attacks that involve a reboot. This is the default class for all third-party app data not otherwise assigned to a l3ata Protection class.

Appfe PIBtfcf m Secuf lry
CONFIDENTIAL

DX-5492.079

APL-EG 08874852

ln macGS, this class utilizes a volume key which is accessible as long as the volume is mounted, and acts just like FileVault.
Mo Protection
(MSFileProfeciionMone)r This class key is protected only with the UIID, and is kept in Effaceable Storage. Since all the keys needed to decrypt files in this class are stored on the device, the encryption only affords the benefit of fast remote wipe. If a file isn' t assigned a Data Protection class, it is still stored in encrypted form (as is all data on an iQS and iPadQS device). This isn't supported in macQS. Mole: In macGS, for volumes that don't correspond to a booted operating system, all data protection classes are accessible as long Bs the volume is mounted. The default data protection class is MSFileprofeciionCompieteUnfiiFirsfUserAufhenfica/ion. Per-extent key fLInctlonallty Is Bvalla Qle to both Rosetta 2 BAd native Bpps.
The keys for both file and keychaiin Data Protection classes are collected and managed in keybags on iQS, iPadQS, watchQS, and tvQS. These operating systems use the following keybags: user, device, backup, escrow, and iCloud Backup.
User keybeg
The user keybag is where the wrapped class keys used in normal operation of the device are stored. For example, when a passcode is entered, MSFileprofecfionComplete is loaded from the user keybag and unwrapped. It is a binary property list ( plist) file stored in the No Protection class. For devices with SoCs earlier than the A9, the .plist file contents are encrypted with a key held in Effaceable Storage. To give forward security to keybags, this key is wiped and regenerated each time a user changes their passcode. For devices with the A9 or later SoCs, the .plist file contains a key that indicates that the keybag is stored in a locker protected by the Secure Enclave -- controlled anti-replay nonce. The Secure Enclave manages the userkeybag and can be queried regarding a device's lock state. It reports that the device is unlocked only if all the class keys in the user keybag are accessibleand have been unwrapped successfully.
Device keybag
The device keybag is used to store the wrapped class keys used for operations involving clevlce-speclflc clata. IQS Bncl IPacIQS clevlces conf lgull eel fol' shal'ecl Llse sometlrnes need access to credentials before any user has logged in; therefore, a keybag that isn' t protected by the user's passcode is required.

Apple PIBtfpfm SppUIIIX
CONFIDENTIAL

DX-5492.080

APL-EG 08874853

IQS ancl IPaclGS cion't sUppor t CI"yptogl aphlc separation Qf pel'-Usel' file systetTI contBnt, which means the system uses class keys from the device keybag to wrap per-file keys. The keychain, however, uses class keys from the user keybag to protect items in the user keychain. In iQS and iPadQS devices configured for use by a single user (the default CGAflgLII'ation ), the clevlce keybag ancl the UlsBI' keybag are QAB ancl the same, ancl al'B protected by the user's passcode.
Backup keybag
The backup keybag iscreated when an encrypted backup is made by the Finder (macGS 10.'l5 or later) or iTunes (in macOS 10.'l4 or earlier) and stored on the computer to which the device isbacked up. A new keybag is created with a new set of keys, and the backedup data is reencrypted to these new keys. As explained previously, nonmigratory keychain items remain wrapped with the UID-derived key, allowing them to be restored to the device they were origina ly backed up fram but rendering them inaccessible on a different device.
The keybag -- protected with the password set -- is run through 'I0 million iterations of the key derivation function PBKDF2. I3espite this large iteration count, there's no tie to a
specific device, and therefore a brute-force attack paralle ized across many computers
could theoretically be attempted on the backup keybag. This threat can be mitigated with a sufficiently strong password.
If a user chooses not to encrypt the backup, the files aren't encrypted regardless of their l3ata Protection class but the keychain remains protected with a UIII3-derived key. This is why keychaln IteITIs ITllgrate to 3 Aew clevlce Only If 3 backup passwol'cl Is set.
Escrow keybag
The escrow keybag is used for syncing with iTunes (in macGS 'I0.'l4 or earlier) or the Finder (macOS 10.'l5 or later) through USB and restored to factory default settings. syncing and mobile device management (MDM). This keybag allows iTunes or the Finder to back up and sync without requiring the user to enter a passcode, and it allows an MDM solution to remote y clear a user's passcode. It is stored on the computer that's used to sync with iTunes or the Finder, or on the MDM solution that remotely manages the device.
The escrow keybag improves the user experience during device syncing, which potentially requires access to all classes of data. When a passcode-locked device is first connected to the Finder or iTunes, the user is prompted to enter a passcode. The device then creates an escrow keybag containingthe same class keys used on the device, protected by a newly generated key. The escrow keybag and the key protecting it are split between the device and the host or server, with the data stored on the device in the Protected Until First User Authentication class. This is why the device passcode must be entered before the user backs up with the Finder or iTunes for the first time after a reboot.
In the case of an over-the-air (QTA) software update, the user is prompted for their passcode when initiating the update. This is used to securely create a one-time unlock token, which unlocks the user keybag after the update. This token can't be generated wlthGUt BAtel IAg the Usel''s passcocle, ancl any pl"evloUIsly gener'atecl tokeA Is Invallclated If the Llsel's passcocle changBcl.
Qne-tlIYIB Llnlock tokens are elthel" fol' attenclecl Ql' Unattenclecl lnstallatIGA of 3 softwal'e update. They' re encrypted with a key derived from the current value of a monotonic counter in the Secure Enclave, the UUID of the keybag, and the Secure Enclave UID.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.081

APL-EG 08874854

Qn A9 (and later) SaCs, one-time Unlock taken no longer relies an counters ar Effacea'ble Storage. Irlstqad, it "S protected by Secure Enclave carltrolled anti-replay nonce
The one-time unlock token for attended software updates expires after 20 minutes. In IOS 13 and ipadOS 13.1 or later, the taken is stored in a locker protected by the Secure Enclave. Prior ta iGS 13, this token was exported from the Secure Enclave and wr'itten to Effaceable Storage ar was protected by the Secure Enclave anti-r eplay mechanism. A policy timer incremented the caunter if the device hadn't rebaoted within 20 minutes.
Unattended softWare updates occur Wherl the system detects an update is available and wheri arie of the following is true:
Automatic updates are configured in iOS 12 or later. · The user chooses Install Later when natified af the update.
After the user enters their passcade, a one-time unlock taken ls generated and can remain valid in Secure Enclave for up to 8 hours I'f the update hasn't yet occurred, this one-time unlock taken is destroyed on every lock and re-created an every subsequent unlock. Each unlock restarts the 8 hour window; After 8 hours a policy timer invalidates the ane-time unlock token.
iCI001 Backup keybag The LCloud Backup keybag ls similar to the backup keybag. All the class keys in this ktay'bag are asymmetric {using Curve25619, IIke the Protected Unless Open I3ata Protection class).
Anasymmertic keybag is also used for the backup in the keychain recovery aspect af
iCloud Keychaln.

Protecting keys in aiternate boot modes
Data Protection is designed to provide access te user data only after successful authentication,,and only' to the authorized user. I3ata protection classes are designed ta support a variety of use cases, such as the ability ta read and write some data everl When a device is locked {but after first unlock). Additional steps are taken to protect access to user data during alternate boot modes such as those used for Device Firmware Update {13FU) made, Recovery mode, Apple Diagnostics, ar even during software update. These capabilities are based an a combination of hardware and software features, and have been expanded asApple-designed silicon has evolved.

Feature

Ala

Recovery: All Data Protection Classes rtrotected

Alternate boots or PFU mode, Recovery, and sottware updates: Class A, S, and C data protected

A18, SS

A14, Ml, 88

Apple Platform Security
CGNFIDENTIAL

Feature
Cia'ss D da'ta protec'tad in DFU Ion devices that support Class DI

A11, 88

A12, 84

A18,, 88

A14, M1, 88

The Secure Enclave AES Engine is. equipped with lockable.software seed bits. When keys are ere~ted from the UID, these seed bits are included in the key derivatiarl function ta create additianal key hierarchies. Haw the seed bit is used varies accarding to the system an chip:
· st a r ting with the Apple A10 and 83 sacs, 8 seed bit is dedicated to distinguish keys protected by the user "s passcode. The seed bit is set. for keys that. require the user'8 passcode (including Data Protection Class A, Class B, and Class C keys), and cleared for keys that don't require the user'8 passcode (including the file system metadata key and Class D keys)
In IOS 13 ar later and IPadQS13.1 ar later an devices with an A1Q or later, all user data is rendered cryptographlcaliy Inaccessible When devices are booted into Diagnostics mode. This is achieved by introducing an additional seed bit whose setting governs the ability to access the media key, which itself is needed ta access the metadata (and therefore contents of) all files on the data volume encrypted vlrith Data Protectiorl This protection encompasses files protected in all classes (A, B, C, and D), not just those that required the user's passcade.
On A12 SaCs, the Secure Enclave Boot ROM locks the passcode. seed bit if the. Application Processor has entered Device FIrmware Upgrade (DFU) mode or Recovery made. When the passcade seed bit is lacked, na operation to change it is allowed, preventing access to data protected with the user's passcade.
Restoring a device af'ter i't enters DFU mode returns it ta a known good state with the certainty that only unmodified Apple-signed code is present:. DFU made can be eritered
manually.
See the following Apple Support articles an how. to place a device in DFU mode:

Device
iPhone, i Pad, iPod touch
Apple TV A Mac with Apple silicon

Article
If you forgot the passcode on your iPhone, or your iPhone is disabled Restore your Apple TV Revive or restore a Mac with Apple silicon

Apple Platform Security
CONFIDENTIAL

Protecting user data in the face of attack
Attackers attempting to extract user data often tr'y a number of techniq'ues: extracting the. encrypted data to another medium for brute force attack or manipulating the operating system version or otherwise changing or weakening the security policy of the device to facilitate attack. Attacking data on device. often requires communicating with the device using physical interfaces like Lightning or USB. Apple devices includes features to help prevent such attacks.
Apple devjcres support a technology called Sealed Key Profecfian (SKP) that works to ensure cryptographic material is rendered unavailable off device, or if manipulations are made to operating system version or security settings without appropriate user authorization. This feature is not provided by the Secure Enclave, instead it is supported by hardware register's that exist at a lower layer in order to provide an additional layer of protection to the keys necessary to decrypt user- data independent of the Secure Enclave.
Note SKP Is available only on devices with an Apple-designed SoC.

Feattrre

Sealed,Key

©

Protection

A11, 88

A12, 84

A18,, 88

A14, M1, 88

iPhone and ipad can also be configured to only activate data connections in conditions more likely to indicate the device is still under the physical control of the authorized owner.

Sealed Key Protection (SKP)
On Apple devices that support I3ata Protection, the key ericryption key (KEK) is protected (or sealed) wjth measurements of the softtftfare on the system, as well as being tied to the UID available only from the Secure Enclave. Gn a Mac with Apple silicon, the protection of the KEK is further strengthened by incorporating information about security policy on the system, because macOS supports critical security policy changes (for example, disabling secure boot or SIP) that are unsuppor'ted on other platforms. Qn a Mac with Apple silicon, this protection encompass FileVault keys, because FII8Vault.is implemented using Data Protection (' Class C).

Hsrrrssre
fiil asssrsrrrsot sf sspoa
Hsritsrsfe rt tsssarsrrrsr tt si cut lrttstt
rssetfsst
Lt.s m assi!1rsrrrsrtt sf tsosrpsrfsy

,Ussr ysLsrsrrti

trARTi kes

crtrpte-trsr &rare t atrst tarte

Vslttme

rssrdsttt g sit s s.p~ v s"~>s@ssg+s, srrottrpttort ~

The Sealed Key Protection process.

Apple Platform Security
CONF I l3ENTIAL

DX-5492.Q84

The Secure Enclave Boot Monitor captures the measurement of the Secure Enclave GS that is loaded. When the Application Processor Boot RGM measures the llmage4 manifest attachecl to LLB, 'that IYIanlfest contalAs a NeasLII'BITIent of all Other systeITI-pallf'ecl fll'ITIwaf'6 that is loaded as well. The LocalPolicy contains the core security configurations for the macQS which are loaded The LocalPolicy also contains the nsih field which is a hash of the macQS llmage4 manifest. The macGS Image4 manifest contains measurements of all of the rnacQS-paired firmware and core macQS boot objects such as the Boot Kernel Collection or signed system volume (SSV) root hash.
If aA attacker Is able to LIAexpecteclly change aAy of the above fYIeasUf'ed fill'ITIware, sof twaf'6, Ql' sBcUI'Ity conf lgUI'ation compQAents, It IYIodlf les the ITIeasLIrements s'torecl In the hal'clwal'6 I"eglsters. The Nocllfllcatlon of 'the NeasUI'BITIents caUse the cl'ypto-hal'clwal'6derived system measurement root key (SMRK) to derive to a different value, effectively breaking the seal on the key hierarchy. That causes the system measurement device key (SMIDK) to be inaccessible, which in turn causes the KEK, and thus the data, to be inaccessible.
Howevef', the systeITI lITILIst accommoclate IegltllYIate softwal"6 Llpclates that change the firmware measurements and the nsih field in the LocalPo icy to point at new rnacGS
ITIeasUreITIents. In othef systerAs that attempttoIAcol'pol"ate fllf'ITIwaf'6 ITIBasUf'ements bUlt that don't have a known good source of truth, the user is required to disable the security,
Llpclate fllf'ITlware, ancl theA I'Benable so that a new rneasLlfeIYIent baseline can be captured, This significantly increases the risk that the attacker could tamper with firmware during a software update. The system is helped by the fact that the Image4 manifest contains all the measurements needed. The hardware that decrypts the SMDK with the SMRK when the measurements match during a normal boot can also encrypt the SMDK to to a proposed future SMRK. By specifying the measurements that are expected after a software update, the hardware can encrypt an SMDK, which is accessible in a current operating system, so that it remains accessible in a future operating system. Similarly, when a customer legitimately changes their security settings in the LocalPolicy, the SMDK must be encrypted to the future SMRK based on the measurement for the I ocalPolicy, which LLB computes on the next restart.

Qn iQS or iPadQS devices, if no data connection has been established recently, users must use Touch ID, Face ID, or a passcode to activate data connections through a Lightning, USB, or Smart Connector interface. This limits the attack surface against physically connected devices such as ma icious chargers while still enabling usage of other accessof Ies wlthlA reasonable tllYIB constl'aIAts. If IYIore than an hoLII has passBOI sIAce the iGS or iPadQS device has locked or since an accessory's data connection has been terminated, the device won't allow any new data connections to be established until the device is unlocked. During this hour period, only data connections from accessories that have been previously connected to the device while in an unlocked state will be allowed. These accessories are remembered for 30 days after the last time they were connected. Attempts by an unknown accessory to open a data connection during this period will disable all accessory data connections over Lighting, USB, and Smart Connector until the device is unlocked again. This hour period:

Appfe PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.085

APL-EG 08874858

Ensures that frequent users of connections to a Mac or PC, to accessories, or wired to CarPlay won't need to input their passcodes every time they attach their device
Is necessary because the accessory ecosystem doesn't provide a cryptographically reliable way to identify accessories before establishing a data connection
In addition, if it's been more than 3 days since a data connection has been established with an accessory, the device will disallow new data connections immediately after it locks. This Is to Incl'ease pf'otectlon for LlsBI"s that cloA't Often ITIake use of such accessof'Ies. Data connections over Lightning, USB, and Smart Connector are also disabled whenever the clevlce Is In 3 state where lt f'eqLIII Bs 3 passcocle to I'eenable blometrlc 3LlthentlcatlQA.
The user can choose to reenable always-on data connections in Settings (setting up some assistlve clevlces cloes this 3LltomatlcaIIy).

Apple File System (APFS) is a proprietary fi e system that was designed with encryption in mind. APFS works across all Apple's platforms -- for iPhone, iPad, iPod touch, Mac, Apple TV, and Apple Watch.Opti mized for Flash/SSD storage, it features strong encryption, copy-Qn-wl'lte ITIetadata, space shai'IAg, clonlng foi" files ancl clirectoi'Ies, snapshots, fast clll"ectoi'y sizing, atofTIIc safe-save pl'Imltlves, ancl Impf'ovBcl file systeITI fLlnclaITIentals, as well as a unique copy-on-write design that uses I/O coalescing to deliver maxirnurn performance while ensuring data reliability.
Space shaving
APFS allocates storage space on demand. When a single APFS container has multiple volumes, the container's free space is shared and can be a located to any of the individual volumes as needed. Each volume uses only part of the overall container, so the available space is the total size of the container, minus the space used in all volumes in the Container.
Multiple volumes
In macGS 'IQ.'l5 or later, an APFS container used to start up the Mac must contain at least five volumes, the first three of which are hidden from the user:
Pre/ooof voiumef Contains data needed for booting each system volume in the container VM volume: Used by macQS for swap file storage Recovery vo/umef Contains recoveryQS System voiumef Contains the following:
All the necessary files to start up the Mac All apps installed natively by macOS (apps that used to reside in the /Applications folder now reside in /System/Applications) Mote: By default, no process can write to the System volume, even Apple system pl'Qcesses. Data volumef Con'taIAs clata that Is sulblect to chaAge, sLIch as: Any data inside the user's folder, including photos, music, videos, and documents
Apple PIBtfpf tH SppUI Itg

CONFIDENTIAL

DX-5492.086

APL-EG 08874859

· Apps the user installed, including AppleScript and Autamatar appllcatians Custom frameworks and daernons installed by, the user, organization, or third-party. apps
Other locations owned and writable by the user, as /Applications, /Librar'y, /User's, / Volumes, /usr/local, /private, /var, and /tmp A data volume is created for each additional system volume. The prebaot, VM, and recovery volumes are all shared and not duplicated.
In macOS 11, the system volume is captured in a snapshot, The operating system boats fram a snapshat af the system volume, not just from a read-only mount ef the mutable sy'stem vol.ume.
In iOS and iPadOS, storage is divided into at least two APFS volumes:
· System volume
13'atavol u me

KBYCh8lfl d8t:8 Pl 048CtlGA
Many apps need to handle passwords and other short but sensitive bits af data, such as keys and login tokens. The keychairi provides a secure way to stare these items The various Apple operating systems use differing mechanisms to enforce the guararrtees associated with the different keychain protection classes. In macOS (including a Mac with Apple silicori), 13ata Protection is not used directly to enforce these guarantees.
OVBfV t8N
Keychain items are encrypted using two. different AES-256-9CM keys:- a table key (metadata) and a per-row key (secret. key), Keychain metadata (all attributes other than kSecValue) is encrypted with the metadata key to speed searches, and the secret value (kSecValuel3ata) is encrypted with the. secret key. The metadata key is protected by the. Secure Enclave but is cached in the Applic~tion Processor to allow. fast queries of the keychain. The secret key always requires a round trip through the Secure Enclave.
The keychaln is implemented as a SQLIte database, stared on the filis system. There is only one database,and the securityd daemon determines which keychain items each process or app can access. Keychain Access APls result in calls ta the daemon, which queries the app's "'Keychain-acaess-groups,,"' "application.-identifier," and aapplioation-group"' entitlements. Bather than limiting access to a.single process, access groups allow keychain items to be shared between apps.
Keychalnitems can he shared only'between apps fram the same developer.Ta share keychain items, third-party apps to use access groups with a prefix allocated to them through the Apple Developer Program in their application groups. The prefix requirement and application group uniqueness are enforced through cade signing, provisioning profiles, and th'e Apple Developer Program.
Keychain data is protected using a class structure similar to the one used in file Data Protection. These classes have behaviors equivalent ta file 13ata Protection classes but use distinct keys and functions.

Apple Platform Security
CONFIDENTIAL

13X-5492.Q87

Availability When unlocked While locked After first unlock
Passcode enabled

File data protection NSFileProtectionComplete NSFileProtectionCompleteLlnlass Open NSFileProtectionCompleteLlntil FirstLlserAuthentication NSFileProtectionNone

Keychaln elate protection kSecAttrAccessibleWhenunlocked N/A
kSecAttrAccessibleAfterFirstLlnlock
kSecAttrAccessibleAlways ksecAttrAccessibleWhenPasscode SetThisDeviceOnly

Apps that use background refresh services can use kSecAftrAccessibieAfferFirsfUniock for keychain items that need to be accessed during background updates.
The class kSecAftrAccessiiDielyyhenpasscocieSefThisoeviceQrfiy behaves the same as kSecAffrAccessibleIA'henUnlocired; however, it's available only when the device is configured with a passcode. This class exists only in the system keybag; they:
l3on't sync to icloud Keychain
Aren't backed up
Aren't included in escrow keybags
If the passcode is removed or reset, the items are rendered useless by discarding the class keys.
Qther keychain classes have a "This device only" counterpart, which is always protected with the LIID when being copied from the device during a backup, rendering it useless if restored to a different device. App e has carefully balanced security and usability by choosing keychain classes that depend on the type of information being secured and when it's needed by iQS and iPadQS. For example, a VPN certificate must always be available so the device keeps a contlnLIQLIs connection, bLlt It'5 classified as "nonITIlgl'atol'y," so i't can' t be moved to another device.

Keychain data class pi otections
The class protections listed below are enforced for keychain items.

Wi-Fi passwords Mail accounts Microsoft Exchange ActiveSync accounts
LDAP, CalDAV, CardDAV Social network account tokens Handoff advertisement encryption keys iCloud token

Accessible After first unlock After first unlock After first unlock After first unlock After first unlock After first unlock After first unlock After first unlock

Appfe PIBtfcfm Secuflty
CONFIDENTIAL

DX-5492.088

APL-EG 08874861

Home sharing password Safall passworcls Safari bookmarks Finder/iTunes backup VPN certificates Bluetootho keys Apple Push Notification service (APNS) token iCloud certificates and private key iMessage keys Certificates and private keys installed by a configuration profile SIM PIN Find My token Voicemail

Accessible When unlocked When unlocked When unlocked When unlocked, nonmigratory Always, nonmigratory Always, nonnllgratory Always, nonmigratory Always, nonmigratory Always, nonmigratory Always, nonmigratory
Always, nonmigratory

Keychains can use access control lists (ACLs) to set policies for accessibility and
authentication requirements.Items can establish conditions that require user presence
by specifying that they can't be accessed unless authenticated using Touch ID, Face ID, or by entering the device's passcode or password. Access to items can a so be limited by specifying that Touch ID or Face ID enrollment hasn't changed since the item was added. This limitation helps prevent an attacker from adding their own fingerprint to access a keychain item. ACLs are evaluated inside the Secure Enclave and are released to the kernel only If theii" speclflecl constl'Bin ts Bl'e met.
macQS also provides access to the keychain to conveniently and securely stores user names BAcl passworcls, digital Iclen titles, eAcl'yptlon keys, Bnd secLII'e notes. It can loe accessed by opening the Keychain Access app in /Applications/Utilities/. Using a keychain eliminates the requirement to enter -- or even remember -- the credentials for each resource. An initial default keychain is created for each Mac user, though users can create other keychains for specific purposes.
In addition to relying on user keychains, macQS relies on a number of system-ievel
keychains that ITlalntaIA BLlthentlcatlon assets tha't BreA't usel' specific, sLIch Bs Aetwol'k
credentials and public key infrastructure (PKI) identities. Qne of these keychains, System Roots, is immutable and stores internet PKI root certificate authority (CA) certificates to facilitate common tasks like online banking and e-commerce. The user can similarly deploy interna ly provisioned CA certificates to managed Mac computers to help validate internal sites Bnd sel'vices.

Apple PIBdclm Secullty
CONFIDENTIAL

DX-5492.089

APL-EG 08874862

FileVault
Vojume encryption ei4h FileVault in macOS
Mac computers offer FileVBult, a built-in encryption capability, to secure all data at rest. FileVault uses the AES-XTS data encr'yption algorithm to protect full volumes on inter'nal and removable star'age devices,
FiieVBUIt an a Mac with Apple silicon is Implemented using Data Protection Class C with a volume key. On B Mac vvith the Apple T2 Security Chip Bs Vrelf as a Mac vyith Apple si}icon, encrypted internal storage devices directly connected to the Secure Enclave leverage its hardware security capabilities as well as that of the AES engine. After a user turns on FileVBult on B Mac, their credentials are required during the baot process.
internal storage with FileVault turned on
Without valid login credentials or' a cryptogr'Bphic recover'y key, the internal APFS volumes remain encrypted and are protected from unauthorized access even if the physical storage device is removed and connected to anather camputer. In rnacQS 19.15, this includes
'both the system v'alume Bnd the data volume. Starting in macQS 11, thesystemvolume
is protected by the Signed system volume (SSV) feature, but the data volume remalna protected by encryption. Internal volume encryption on a Mac with Apple silicon as well as those with the T2 chip is implemented by constructing and managing a hierarchy of keys, Bnd builds on the hardware encryption technologies built into the chip This hierarchy of keys is designed to simultaneously, achieve four goals:
· Require the user's password for decryption
Protect the system from B brute-force attack directly Bgairist storage media removed from Mac Provide B swift and secure method for wiping content via deletion of necessary cI'yptogI"aphlc mateI'IBI
· Enable users ta change their password '(Bnd in turn the cryptagraphie keys used to protect their files) without requiring reencryption af the entire volume
xART key

User pssssror4 ~ +~
Hsrdtlvs're key

Hard~re key w++ VO IurnkeeyetteryPtlcn ~ v ol u m e dsts Ksy encryptitnt
'key

Internal volume. encr'yption when FileVsult is turnett on in meoQS.

Apple Platform Security
CONF I l3ENTIAL

Qn a Mac with Apple silicon and thase with the T2 chip, all FIIeVauit key handling occurs in the Secure Enclave; encryption keys are never directly exposed to the Intel CPU. A}l APFS valurnes are created with a volume encryption key by default. Volume arid metadata contents are encrypted with this volume encryptian key, which is wrapped with the class key. The class key is protected by a combinatiori of the user's password and the hardware UID when Filevault is turned on.
Internal storage with FiieVault turned off If FileVault isn't turned on in a Mac with Apple silicon or a Mac with the T2 chip during the
iriitial Setup Assistant praoess, the volume is still encrypted hut the volume encryption key is protected only by the hardware UID in the Secure Enclave.

Voiufne encrvtstioni keir

VOIIIITle dR't8

Internal volume. encryption when FileVault is turnaai off in macos.
If Fi}evault is turned on later -- a process that is Immediate sirice the data was already encrypted -- an anti-replay mechanism prevents the old key (based on hardware Ulled only)
fram being used to.decryptthe volume. The volume is then protected by a combination Qf
the user password with the hardware UID as previously described.
l3eleting FileVault volumes iNhen deleting a valurne, Its volume encry'ption key is securely deleted by the Secure Enclave. This prevents future access with this key even by the Secure Enclave. In addition, all volume encryption keys are wrapped with a media key. The media key doesn't provide addltianal confidentiality of data,,but Instead Is designed to enable swift and secure
deletion of data because without It, dqcryptiori is impossible.
On a Mac with Apple silicon and those with the T2 chip, the media key is guaranteed to be erased by the Secure Enclave supported technology -- for example by remote MI3M commands. Erasing the media key in this manner renders the volume. cryptographically inaccessible
Removable storage devices
Encryption of removable storage devices doesn't utilize the security. capabilities of the
Secure Enclav'e,,and its encryption is performed Inthe same manner asan Intel-based Mac
without the T2 chip.

Apple Platform Security
CONF I l3ENTIAL

Apple Fi e System (APFS) in macQS 10.13 or later changes how FileVault encryption keys are generated. In previous versions of macQS on CoreStorage volumes, the keys used in the FileVault encryption process were created when a user or organization turned on FileVault on a Mac, In macGS on APFS volumes, the keys are generated either during user creation, setting the first user's password, or during the first login by a user of the Mac. This implementatiion of the encryption keys, when they"re generated, and how they" re stol'ecl al'e all pal't. Qf B featLII e kAQWA as Secul e Tokerf. Speclflcally, a secLII'e token Is a wrapped version of a key encryption key (KEK) protected by a user's password.
When deploying FileVault on APFS, the user can continue to:
Use existing tools and processes, such as a personal recovery key (PRK) that can be stored with a mobile device management (MI3M) solution for escrow Create and use an institutional recovery key (IRK)
I3efer enablement of FileVault until a user logs in to or out of the Mac
In macQS 'I'I, setting the initial password for the very first user on the Mac results in that user being granted a secure token. In some workflows, that may not be the desired behavior, as previously, granting the first secure token would have required the user account tolog in.To prevent this from happening, add; DisabledTags; Secure Token to the programmatically created user's Authent i c a t i o n A ut h o r i t y a t t ribute prior to setting the user's password, as shown below:
sudo dscl . append /Llsers/<usefr name> AuthenticationAuthority "; GisabledTag s;Secufre Token"
ITIacQS 'IG.'l5 Intl'QOILIcecl a Aew featLlfe -- Bootstf'ap Token -- to help with gf'anting a secuf'e token to both mobile accounts and the optional device enrollment-created administrator account ("IYlanaged adITIIAIstl'atof""). In ITIacGS I I, the Bootstl'ap Token can gf'ant a secuf'e token to any user logging in to a Mac computer, including local user accounts. Using the Bootstrap Token feature of rnacQS 'IG.'l5 or later requires:
Mac enrollment in MI3M using Apple School Manager or Apple Business Manager, which makes the Mac supervised
MDM vendor support
In macQS 'IG.'15.4 or later, a Bootstrap Token is generated and escrowed to MI3M on the first login by any user who is Secure Token -- enabled if the MDM solution supports the feature. A bootstrap token can also be generated and escrowed to MI3M using the profiles command-line tool, if needed.
In macQS 'll, the bootstrap token may a so be used for more than just granting secure token to user accounts. Gn a Mac with Apple silicon, the bootstrap token, if available, can be used to authorize the installation of both kernel extensions and software updates when managed using MDM.

Apple PIBIIGI m SpcUI IIX
CONFIDENTIAL

DX-5492.092

APL-EG 08874865

In BclclltloA to 6Acl'yptlAg clata Bt rest, Apple devrces help pl'event Bpps fr'om BccessIAg 3 user's personal information without permission using various technologies including Data Vault. In Settings in iQS and iPadGS, or System Preferences in macQS, users can see which Bpps they have pel'ITllt ted to access cel'tain IAfol'ITIatloA Bs well Bs gl'BAt ol' revoke Bny future access. Access is enforced in the following:
iQS, ipaciOS, BncimacQS: Calendars, Camera, Contacts, Microphone, Photos, Reminders, Speech recognition
iQS BnciipaciQSr Bluetooth, Home, Media, Media apps and Apple Music, Motion and fitness
macQS: Input monitoring (for example, keyboard strokes), Prompt, Screen recording (for example, static screen shots and video), System Preferences
In iQS 'l3.4 or later and (iPadQS 'l3.4) or later, all third-party apps automatically have their data protectecl In 3 Data Vault. I3ata Vault helps protect BgaIAst unauthorlzecl access to the clata even from pl'Qcesses that Bl'en't themselves sanclboxecl.
If the user signs in to iCloud, apps in iQS and iPadQS are granted access by defau t to iCloud Drive. Users may control each app's access under iCloud in Settings. iGS and IPacIQS also pl'Qvlcle I'estrlctlons that pl'eveAt clata ITIQveITIent between Bpps Bncl BccQLInts installed by a mobile device management (MI3M) solution and those installed by the user.

HealthKit provides a central repository for health and fitness data on iiPhone and Apple Watch. HealthKit also works directly with health and fitness devices, such as compatible Bluetooth Low Energy (BLE) heart rate monitors and the motion coprocessor built into many iGS devices. All HealthKit interaction with health and fitness apps, healthcare
institutions, and health and fitness devices require p ermissionof the user. This data
is stored in the Data Protection class Protected Unless Open. Access to the data is relinquished 'IG minutes after the device locks, and data becomes accessible the next time user enters their passcode or uses Touch II3 or Face II3 to unlock the device.
H 63I t h K IIt3 I s 0 c 0 I I 6ct s 3 A d st 0 I' 6 s IYI 3 A 396ITI6 Atcl 3't 3, s u c h 3 s 3 c c 6 s s p 6 I' ITI I ssI0 Asf 0 I' 3 p p s, names of devices connected to I-lealthKit, and scheduling information used to launch apps wheA Aew clata Is available. This data Is stofecl In the I3ata Protection class Pl'otectecl Until First User Authentication. Temporary journal files store health records that are generated when the device is locked, such as when the user is exercising. These are stored in the l3ata Protection class Protected Unless Open. When the device is unlocked, the temporary journal files are imported into the primary health databases, then deleted when the merge is completed.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.093

APL-EG 08874866

Health data can he stared In iClaud. End-to-end eneryptian for Health data requires iQS 12 or later and twto-factor authentieatian. Gtherw}se, the user's data is stil} erlcrypted irl storage arid transmission but isn't encrypted arid-te-end. After the user turns on twofactar authentication and updates ta iQS 12 ar later, the user's health data is migrated ta end-ta-end efiel"yptlan-
If the user backs up their device using iTunes (in macQ816.14 or earlier) or the Finder (macQS '}0.15 ar later),,health data is stored only if the backup is encrypted.
Clinical health records Users can sign in ta suppal'ted health systems within the Health app to obtain a capy'
of their c}irlica} health records, When corlnecting a user to a health system,, the user authenticates using OAuth 2 client credentials. After connecting, clinical health record data is downlaaded directly fram the health institution using a TLS 1.3 protected connection. Qnee down}aaded, c}irlieal health records are secure}y stared alongside other health data.
Health data integrity
Data stored in the. database includes metadata ta track the provenance af each data recard. This metadata includes an app identifier that identifies which app stored the record, Additionally, an optiarial metadata item can centairi a digitally. signed copy of the record. This ls intended ta provide data integrity for records generated by a trusted device. The format used for the dig}tal signature is the Cryptographic Message Syntax (CMS) specified in RFC 5652.
Health data access by third-party apps Access to the HealthKit API is controlled with erltitlements, and apps must corlfarm ta
restrictions about how the data is used. For example,, apps aren't a}}awed to use health data for advertising, Apps ar'e also required to. provide users with a privacy policy that details its use of health data
Access to health data hy apps is eantralled hy the user"s Privacy settings. Users are asked to grant access when apps request access to health data, simi}ar ta Contacts, Photos, and other iGS data sources. Hawever, with health data, apps are granted separate access for reading and writing data, as well as separate access for each type of health data. Users can view, and revoke, permissions they' ve granted for accessing health data under Settings ~ Health > l3ata Access R Devices.
If granted permission to write data,,apps can also read the data they write. If granted the permission to read data, they can read data written 'by all sources. However, apps can' t determine access granted ta other- apps. In addition, apps can't conclusively tell if they have been graritedread access ta health data. When an app daesn't have read access,, all queries return na data -- the same response that an empty database would return. This prevents apps from inferring the user's htaalth status by learning which types of data the user is tracking.
Medical ID for users The Health app gives users the option of filling aut a Medical ID form with infarmatian that cauld be important during a medical emergency. The information is entered ar updated
manually and isn't synced with the information in the health databases.

Apple Platform Security
CONF} l3ENTIAL

DX-5492.Q94

The Medical ID information is viewed by tapping the Emergency button on the Lock Screen. The information is stored ori the device using the Data Protection class No Protection so that it's accessible without having to enter the device passcode. Medical ll3 is an optiorial feature that enables users to decide how to balance both safety and privacy concerns. This data is backed up in iC}oud Backup in jQS 13 or earlier. Iri IGS14, Medical ID is synced between devices using CloudKit and has the same encryption characteristics as the rest of health data.
l3igit81 signing and encryption
Access control lists
Keychain data is partitioned and protected with access control lists (ACLs). As a result, credentials stored by third-party apps can't be accessed by. apps with different ideritities unless the user explicitly approves them. This protection provides a mechanism for securjrlg authqritlcatiorl credentials iri Apple devices across a range of apps and services within the organization.
Iri the Mail app, users can send messages that are digitally signed arid encrypted. Mail automatically discovers appi'opriate RFC 5322 case-sensitive email address subject or subject alternative names ori digital signing and isncryptiori certificates on attached Personal Identification Verification (PIV) tokens in compatible smart cards. If a configured email account matches an email address on a digital signing or encryption certificate on an attached PIV token, Mail automatically displays the signing button in the toolbar of a new message window. If Mail has the recipient's email encryption certificate or can discover it in the Microsoft Exchange global address list (GAL), an unlocked icon appears in the new message toolbar. A locked lock icon indicates the message will be sent encrypted with the
recipients' public key.
Per-message S/MIME
iGS, iPadGS, and macGS support per-message S/MIME. This means that 8/MIME users can choose to always sign and encrypt messages by default or to selectively sign and encrypt I lid I v Idua InlASSag es. Identities used with S/MIME can be delivered to Apple devices using a configuration profile, a mobile device management (MDM) solution, the Simple Certificate Enrollment Protocol (SCEP) ,,or Microsoft Active Directory Certificate Authority.
Smart cards
macoS 10.-12 or later' includes native suppor't for PIV cards.- These cards are widely used in commercial and government organizations for two-factor authentication, dlgitsl signing, and encryptiori.
Apple Platform Security
CONF I l3ENTIAL

Smart cards include one or more digital identities that have a pair of public and private keys and an associated certificate Uniockjng a smart card with the personal identificatiorl number (PIN) provides access to the private keys used for authentication,,ericryption, and signing operations, The certificate determines what a kley Can 'be used for,,what attributes are associated with lt, and whether it's validated (signed) by a certificate authority (CA) Gertlf'ioate. Smart cards can be used for two-factor authentication. The two factors needed to unlock a card ar'e "something the user has." (the card) and "something the user knows" (the PIN). macoS 10 12 or later also has native support for smart card Login Window authentication and client certificate autheriticatian to websites on Safari. It also supports Kerberos authentication .using key pairs (PKINIT) for single sign-on to Kerberos-supported services. To learn more about smart cards and macOS, see Intro to smart card integration in the DepioymentReference forMac.
Encrypted disk images
Iri rnacQS, encrypted disk images serve as secure containers in which users can store er transfer sensitive documents and other files. Encrypted disk images are created using Disk Utility, located in /Applications/Utiliti es. Disk images can be encrypted using either-128bit or 256-bit AES encryption. Because a mounted disk image is treated as a local volume connected to a Mac, users can copy, move, and open files and folders stored in it. As with FiieVault, the contents of a disk image are encrypted and decrypted in real time. Kith encrypted disk i mages, users can safely. exchange documents, files, and folders by saving an encrypted disk image to removable media, seriding it as a mail message attachment, or
storing it on a remote server. For more information on encrypted disk i mages, see the Disk
Utility User Guide.
Apple Platform Security
CONF I l3ENTIAL

Toclay, Bpps Bl'6 among the Most cl"Itlcal BIBMBAts Qf 3 secLII'Ity Bl'chltectUI'e. Even Bs Bpps provide amazing productivity benefits for users, they also have the potential to negatively impact system security, stability, and user data if they' re not handled properly.
Because of this, Apple provides layers of protection to help ensure that apps are free of known malware and haven't been tampered with. Additional protections enforce that access fl'QM Bpps to Usel data Is cal'efUlly mediated. These secUI'Ity controls pl'ovicle 3 stable, secure p atform for apps, enabling thousands of developers to deliver hundreds of thousands of apps for iGS, iPadGS, and macGS -- all without impacting system integrity. And users can access these apps on their Apple devices without undue fear of viruses, ITIB wal'6, Ql' UABUthorlzecl attacks.
Qn iPhone, iPad, and iPod touch, all apps are obtained from the App Store -- and all apps are sandboxed -- to provide the tightest controls.
Qn Mac, many apps are obtained from the App Store, but Mac users also download and use Bpps fl'QIYI the IAternet. To safely sLlppoi't Intel'Aet downloacllng, ITIacGS layers Bclclltlonal controls. First, by default in macQS 10.'I5 or later, all Mac apps need to be notarized by Apple to launch. This requirement helps to ensure that these apps are free of known malware without requiring that the apps be provided through the App Store. In addition, ITIacQS IAclucles s'tate-Gf-the-Bl"t Bntivlr'Lls pl'G'tectlon to block -- Bncl If Aecessai'y remove-
ITIB IWBI'e.
As an additional control across platforms, sandboxing helps protect user data from LIABUlthol'Izecl access by Bpps. Ancl In MacQS, clata IA cl'ltical areas Is Itself protectedwhich helps ensure that users remain in control of access to files in Desktop, Documents, Downloacls, BAcl other Bl'eas fl'QITI Bll Bpps, whether' the Bpps BtteITlptlng access Bl'6 themselves sandboxed or not.

Native capability Plug-in unapproved list, Safari extension unapproved list File quarantine
Xprotect/YARA signatures MRT (Malware Removal Tool)

Third-party equivalent Virus/Malware definitions
Virus/Malware definitions Virus/Malware definitions Endpoint protection

Appfe PIBIIGI m Seoul lry
CONFIDENTIAL

DX-5492.097

APL-EG 08874870

Native capability Gatekeeper
eficheck (Necessary for a Mac without an Apple T2 Security Chipj Application firewall Packet Filter (pf) System Integrity Protection Mandatory Access Controls Kext exclude list
Mandatory app code signing
App notarization

Third pal'ty equivalent Endpoint protection; enforces code signing on apps to ensure only trusted software runs. Endpoint protection; rootkit detection
Endpoint protection; firewalling Firewall solutions Only Apple can provide this Only Apple can provide this Only Apple can provide this Only Apple can provide this Only Apple can provide this

Unlike other mobile platforms, iQS and iPadQS don't allow users to instal potentia ly ITI B I Ic0I LIs UI As Ig Aecl B p p s f r 0 m we tj s I t e s 0 r I' U A LI AtI'Llst e cl B p p s. At r LI A t IITI e, c 0 cl e s I g A Bt UI'e checks that. Bll execLltable merAQI'y pagPs Bl'B IYlacle Bs they Bl'e IQBclecl 'to ensUIre that Bn Bpp hasn't been ITIQcllflecl sIAcP. It was Installed Ql" last UpclatPcl.
After an app is verified to be from an approved source, iOS and iPadOS enforce security measures designed to prevent it from compromising other apps or the rest of the system.

After the iQS or iPadQS kernel has started, it controls which user processes and apps can be run. Toensure that allapps come from a known and approved source and haven't been tampered with, iQS and iPadOS require that all executable code be signed using an Appleissued certificate. Apps provided with the device, like Mail and Safari, are signed by Apple. Thll'cl-pal"ty Bpps IYILIst also oe vallclatecl Bncl slgnecl Lislng Bn Apple-IssLIPcl cPI'tlflcate. Mandatory code signing extends the concept of chain of trust from the operating system to Bpps BAcl pl'Pvents thll'd-pal'ty Bpps fl'om IoadIAg UIAsignecl cocle I'esoUI'ces Ql' UIsing selfmodifying code.

Apple PIBIIGIm Secul Ily
CONFIDENTIAL

DX-5492.098

APL-EG 08874871

Developers can sign their apps through certificate validation (through the Apple Developer Program). They can also embed frameworks inside their apps and have that code validated with an Apple-issued certificate (through a team identifier string).
Certificate vaiiciafion: To develop and install apps in iQS or iPadQS devices, developers must register with Apple and join the Apple Developer Program. The real-world identity of each developer, whether an individua or a business, is verified by Apple before their certificate is issued. This certificate enables developers to sign apps and submit them to the App Store for distribution. As a resu t, all apps in the App Store have Qeen subITllttecl by an Iclentlf fable pef'son of' of'gaAIzatlon, servIAg as 3 deterl'en't to the creation of malicious apps. They have also been reviewed by Apple to ensure they generally operate as described and don't contain obvious bugs or other notable problems. In addition to the technology already discussed, this curation process gives users confidence in the quality of the apps they buy.
Code signature validation: iQS and iPadQS allow developers to embed frameworks inside of their apps, which can be used by the app itself or by extensions embedded within the app. To protect the system and other apps from loading third-party code Inslcle Qf their aclcll'ess space, the systeITI performs 3 cocle slgnatul'e vallclatlon of all the dynamic libraries that a process links against at launch time. This verification is accomplished through the team identifier (Team ID), which is extracted from an Apple-IssLIecl cef'tlflcate. A teaITI Iclentlflef Is 3 IG-character 3 phanLIITIeflc stl'Ing -- fol example, 'IA2B3C4D5F. A program may link against any platform library that ships with the system or any library with the same team identifier in its code signature as the main executable. Since the executables shipping as part of the system don't have a team identifier, they can only link against libraries that ship with the system itself.
Businesses also have the ability to write in-house apps for use withiin their organization and distribute them to their employees. Businesses and organizations can apply to the Apple Developer Enterprise Program (ADEP) with a D-U-N-S number. Apple approves applicants after verlfylAg thelf' Iclentlty 3Acl ellglblllty. After 3A organlzatlon becomes 3 member of ADEP, it can register to obtain a provisioning profile that permits in-house apps to I'Lln on clevlces It authof'Izes.
Users must have the provisioning profile installed to run the in-house apps. This ensures that only the organization's intended users are able to load the apps onto their iQS and iPadGS devices. Apps installed through mobile device management (MDM) are implicitly trusted because the relationship between the organization and the device is already established. Gtherwise, users have to approve the app's provisioning profile in Settings. Grganizations can restrict users from approving apps from unknown developers. Gn first launch of any enter prise app, the device must receive positive confirmation from Apple that the app is allowed to run.

Apple PIBtfGI tH SppUI IIX
CONFIDENTIAL

DX-5492.099

APL-EG 08874872

All third-party apps are "sandboxed," so they are restricted from accessing files stored by other apps or from making changes to the device. Sandboxing prevents apps from gathering or modifying information stored by other apps. Each app has a unique home directory for its files, which is randomly assigned when the app is installed. If a third-party app needs to access information other than its own, it does so only by using services explicitly provided by iQS and iPadQS.
System files and resources are also shielded from the users' apps. Most iQS and iPadOS system files and resources run as the nonprivileged user "mobile," as do a I third-party apps. The BAtll'e opel'a ting system pal"tltloA Is ITIQLlnted as I'eacl-GAIy. UAABcessal'y tools, such as remote login services, aren't included in the system software, and APIs don't allow apps to escalate their own privileges to modify other apps or iQS and iPadOS.
Use of entitlements
Access by thIrd-party apps to usel' InforITIatloA, and to featLII'es such as ICIGLIcl and extensibility, is controlled using declared entitlements. Entitlements are key-value pairs that are signed in to an app and allow authentication beyond runtime factors, like UNIX user II3. Since entitlements are digitally signed, they can't be changed. Entitlements are LlsBOI BxteAslve y by systeIYI apps ancl claeITIGAs to pel'fol'ITI speclflc pl'Ivl egecl Qpel'atlons that would otherwise require the process to run as root. This greatly reduces the potential f 0 I' p I' I v IeI g P.e s c aIatI0A b y a c 0 ITI p I'0 ITI Ised s y st P ITI a p p 0 I" d a e ITI 0A.
In addition, apps can only perform background processing through system-provided APIs.
This enables apps to continue to function without degrading p erformanceor dramatically
I ITI p a c t I A g b a t t e I' y I I f e .
Address Space Layout Randomization (ASLR) protects against the exploitation of memory corruption bugs. Built-in apps use ASLR to ensure that all memory regions are randomized upon launch. Randomly arranging the memory addresses of executable code, system libraries, and related programming constructs reduces the likelihood of many sophlstlcatecl Pxplolts. For exaITlple, a I'etul'A-to-llbc attack attPmpts to tl'Ick a clevlce IAto
executing ITlallcloLIs code by ITIanlpLIIatlng IYIPITIGI'y aclclresses of the stack aAOI system
libraries. Randomizing the placement of these makes the attack far more difficult to execute, especially across multiple devices. Xcode, and the iOS or iPadQS development environments, automatically compile third-party programs with ASLR support turned on.
Execute MeveI feature
Further protection is provided by iQS and iPadQS using ARM's Execute Never (XN) feature, which marks memory pages as nonexecutable. Memory pages marked as both writable and executable can be used only by apps under tightly contro led conditions: The kernel checks for the presence of the Apple-only dynamic code-signing entitlement. Even then, only a single mmap call can be made to request an executable and writable page, which is given a randomized address. Safari uses this functionality for its JavaScript JIT compiler.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 00

APL-EG 08874873

IQS, IPadQS, and macGS allow apps to provide functionality to other apps by providing extensions. Extensions are special-purpose signed executable binaries packaged within an app. During installation, the system automatically detects extensions and makes them available to Qthel" Bpps Llslng 3 ITIBtchlng systeITI.
Extension points
A systeITI BI'63 that suppol'ts extensions Is callecl Bn extension IGolrlf. Each extensIQA polAt provides APIs and enforces policies for that area. The system determines which extensiions are available based on extension point-specific matching rules. The system automatically launches extension processes as needed and manages their lifetime. Entitlements can be ulsecl to r'estl'Ict extension Bvallablllty to pal'tlculal' systenl Bpps. FGI' example, 3 Toclay view widget appears only in Notification Center, and a sharing extension is available only from the Sharing pane. Examples of extension points are Today widgets, Share, Actions, Photo Editing, File Provider, and Custom Keyboard.
Extensions run in their own address space. Communication between the extension and the Bpp fl"Qm which It was Bctlvatecl Llses Intel'pl"Qcess comITILInlcatlons IYIecllatecl by the system framework. They don't have access to each other's files or memory spaces. Extensions are designed to be isolated from each other, from their containing apps, and from the apps that use them. They are sandboxed like any other third-party app and have 3 contalnel' sepal'Bte fl'GITI the contalnlng Bpp s contalnel'. Howevel', they shal'6 the sBITI6 access to pl'Ivacy controls Bs the contBIAel' Bpp. SG If 3 usel' gf'ants Contacts access to Bn app, this grant is extended to the extensions that are embedded within the app but not to the extensions 3ctlva teel by the Bpp.
Custom keyboards are a special type of extension because it's enabled by the user for the entire system. After it's enabled, a keyboard extension is used for any text field except the passcocle Input Bncl Bny secLII'6 text view. To I'estl'Ict the tl'Bnsfel' Gf Llsel' clata, cLIstoITI keyboards run by defau t in a very restrictive sandbox that blocks access to the network, to services that perform network operations on behalf of a process, and to APIs that would allow the extension to exfiltrate typing data. Developers of custom keyboards can request that their extension have Qpen Access, which lets the system run the extension in the default sandbox after getting consent from the user.
MDM and extensions
For devices enrolled in a mobile device management (MDM) solution, document and keyboard extensions obey Managed Clpen In rules. For example, the MDM solution
c 3 A p lf'6 v 6 A t 3 u s 6 I' f I'Q ITI 6 x p Q r t I Ag 3 cl Q c u m 6 A t f I'G ITI 3 m 3 A 3 Q 6cl 3 p p t Q 3 A LI A ITI 3 A3Q6cl
DocLIment Provider, Ql' using BA LIAITIanagecl keyboard with 3 ITlanagecl Bpp. Aclclltlonally, app developers can prevent the use of third-party keyboard extensions within their app.

Apple PIBtfpf tH SppUI IIX
CONFIDENTIAL

DX-5492.1 01

APL-EG 08874874

The iQS Software Development Kit (SDK) for iOS and iPadQS offers a fu I suite of APIs that ITIake lt easy fol' thll'cl-pal'ty Bncl In-house developel's to Bclopt l3ata Pl'Qtectlon Bncl help ensure the highest level of protection in their apps. I3ata Protection is available for file and database APIs, including INSFileManager, Corel3ata, NSI3ata, and SQLite. The Mail app database (including attachments), managed books, Safari bookmarks, app launch images, and location data are also stored through encryption, with keys protected by the user's passcode on their device. Calendar (excluding attachments), Contacts, Reminders, Notes, Messages, and Photos implement the l3ata Protection entitlement Protected Until First User Authentication. User-installed apps that don't opt in to a specific l3ata Protection class receive Protected Until First User Authentication by default.
Joining an App Group
Apps and extensions owned by agiven developer account can share content when configured to be part of an App Group. It's up to the developer to create the appropriate groups on the Apple Developer Portal and include the desired set of apps and extensions. Once configured to be part of an App Group, apps have access to the following:
A shared on-volume container for storage,,which stays on the device as long as at least one app from the group is installed Shared preferences Shared keychain items The Apple Developer Portal ensures that App group II3s (GII3) are unique across the app e c Q s ysteITI.
The Made for iPhone, iPad, and iPod touch (MFi) licensing program provides vetted accessory manufacturers access to the iPod Accessories Protocol (iAP) and the necessary supporting hardware components.
When an MFi accessory communicates with an iQS or iPadOS device using a Lightning connector or through Bluetooth, the device asks the accessory to prove it's been authorized by Apple by responding with an Apple-provided certificate, which is verified by the device. The device then sends a challenge, which the accessory must answer with a signed response. This process is entirely handled by a custom integrated circuit (IC) that Apple pl'Qvldes to Bppl'QveclBccessol'y ITIanufactull'el's Bncl Is tl'Bnspal'ent to the Bccessol'y itself.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 02

APL-EG 08874875

Accessories can request access to different transport methods and functionality -- for example, access to digital audio streams over the Lightning cable, or location information provided over Bluetooth. An authentication IC ensures that only approved accessories are granted full access to the device. If an accessory doesn't support authentication, its access is limited to analog audio and a small subset of serial (UART) audio playback controls. AirPlay also uses the authentication IC to verify that receivers have been approved by Apple. AirPlay audio and CarPlay video streams use the MFi-SAP (Secure Association Protocol), which encrypts communication between the accessory and device using AES128 in counter(CTR) mode. Ephemeral keys are exchanged using ECI3H key exchange (Curve255'I9) and signed using the authentication IC's 1024-bit RSA key as part of the Station-to-Station (STS) protocol.
App security in macOS consists of a number of overlapping layers -- the first of which is the option to run only signed and trusted apps from the App Store. In addition, macOS layers protections to ensure that apps downloaded from the internet are free of known ITlalwal'B. ITIacOS offel's technologies to cletect ancl I'BITIove ITlalwaf'e, ancl Qffef's aclclltlonal pl'otectlons cleslgAecl to pf'event untl'Llstecl apps fl'QITI accessing usel' clata. Servfces from Apple such as Notarization and XProtect and MRT updates are designed to prevent ITlalware IAstallatlon and, whBA necessafy, to provlclp fof' a quick ancl Bfflcfent cletect-anclI'esponcl pfocess to block aAcl I'BIYlove aAy malwaf'e that may have at fll'st avolclecl cletectloA. ultimately, macOS users are free to operate within the security model that makes sense for them -- including running completely unsigned and untrusted code,
All apps from the App Store are signed by Apple to ensure that they haven't been tampered with or altered. Apple signs any apps provided with Apple devices. In macOS 'IG.15, all apps distributed outside the App Store must be signed by the developer using an Apple-issued Developer ID certificate (combined with a private key) and notarized by Apple to run under the default Gatekeeper settings. Apps developed in-house should also be signed with an Apple-issued l3eveloper ll3 so that users can validate their integrity.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 03

APL-EG 08874876

ln macGS, code signing and notarization work independently -- and can be p erformedby
different actors -- for different goals. Code signing is performed by the developer using their Developer ID certificate (issued by Apple), and verification of this signature proves to the user that a developer's software hasn't been tampered with since the developer built and signed it. Notarization can be performed by anyone in the software distribution chain and proves that Apple has been provided a copy of the code to check for malware and no known malware was found. The output of Notarization is a ticket, which is stored on Apple servers and can be optiona ly stapled to the app (by anyone) without invalidating the signature of the developer.
Mandatory Access Controls (MACs) require code signing to enable entitlements protected by the system. For example, apps requiring access through the firewall must be code signed with the appropriate MAC entitlement.

macQS includes a technology called Gatekeeper, which ensures that, by default, only trus'teel software runs QA a Llser's Mac. When a Llser clownloacls ancl QpeAs aA app, a plug-in, or an installer package from outside the App Store, Gatekeeper verifies that the software is from an identified developer, is notarized by Apple to be free of known malicious content, and hasn't been altered. Gatekeeper also requests user approval before opening downloaded software for the first time to make sure the user hasn't been tricked into running executable code they believed to simply be a data file.
By default, Gatekeeper ensures that all downloaded software has been signed by the App Store or signed by a registered developer and notarized by Apple. Both the App Store review process ancl the Aotanzatlon pipeline ensul e that apps contain AQ knowA ITla ware. Therefore, by default a/i software in macQS is checked for known maiicious content the first time it's Opened, regardless of how it arrived on the Mac.
Users and organizations have the option to allow only software installed from the App Store. Alternatively, users can override Gatekeeper policies to open any software unless restricted by a mobile device management (MDM) solution. Qrganizations can use MDM to configure Gatekeeper settings, including allowing software signed with alternate identities. Gatekeeper can also be completely disabled, if necessary.
Gatekeeper also protects against the distribution of malicious plug-ins with benign apps. Here, using the app triggers l oading a malicious plug-in without the user's knowledge.
WheA necessary, Gatekeeper QpeAs apps from ranclomlzecl, reacl-Only locations, p reventing
the automatic loading of plug-ins distributed alongside the app.
RUAII:ime protecII:ion
System files, resources, and the kernel are shielded from a user's app space. All apps from the App Store are sandboxed to restrict access to data stored by other apps. If an app from the App Store needs to access data from another app, it can do so only by using the APIS and services provided by macGS.

Appfe PIBtfpfm sppUIIt x
CONFIDENTIAL

DX-5492.1 04

APL-EG 08874877

Protecting against malgre in macOS
Apple operates a threat intelligence process to quickly identify and block malware. Malware defenses al'8 structured in thl'ee Iayel'8-
'l. Prevent launch al execution af malware. App Store ar Gatekeeper and Notarizatian
2. Bieak malware fram running on customer systems: Gatekeeper, Notarization, and XPratect
3. HemediBte malt%are tiiat has executed: :MRT
The first layer af defense is designed to inhibit the distribution af malware, and prevent it fram launching even ance= this is the goal of the App Stare, and Gatekeeper combined w'ltii Mate'I'izatlorl
The next layer of defense is to ensure that. if malvrare appears an any Mac, it's quickly identified and blocked, both to halt spread and to rernediate the Mac systems it's already gained a foothold on. XProtect adds to. this defense, along with Gatekeeper and Notarization.
Finally, MRT acts to remediate malware that has rnariaged ta suceesefully execute.
These protections combine ta support best-practice protection from viruses and malware. There are additional protections, particularly on a Mac with Apple. silicon, ta limit the poterltial damage of malware that does manege ta execute. See Protecting app access to user data for ways that macGS can help protect user data from malware, and Gperating system integrity for ways macGS can limit the actions malware can take on the. system,
Notarization
Moteri'zation is a malware scanning service provided by Appiet Developers who ifvant ta distribute apps for rnacGS outside the App Store submit their apps far scanning as part of the distribution process. Apple scans this software for known malware and, if none is found, issues 8 Natarjzatiorl ticket Typically, developers staple this ticket ta their app so Gatekeeper aan verify and launch the app, even off line.
Apple can also issue a revocation ticket for apps knewri to be malicious -- even if they.'ve been previously notarized. macQS regular'ly checks for new revocation tickets sa that Gatekeeper has the latest information and can block launch of such files. This process can very quickly black malicious apps because updates happen iri the background much more frequently than even the background updates that push new XPratect signatures. In addition, this pratectiarl can be applied ta both apps that have been prevjousiy and those th.at haven' t.
XP'rotect
macGS includes built-in antivirus technology called XPratect for the signature-based detection of rnalware. The system uses YARA signatures, a tool used ta conduct signaturebased detection af malware, which Apple updates. regularly. Apple monitors for new melware infections and strains, and updates signatures automatically -- independent fram system updates -- to help defend a Mac from malware infections. XPretect automatically detects and blacks the executian af known malware. In rnacGS 16.15 or later, XPratect checks for krlaWn malicious content whenever:
· An app is first launched
An app has been changed (in the file system)

Apple Platform Sec or lty

105

CONFIDENTIAL

When XProtect detects known malware, the software is blocked and the user is notified and given the option to move the software to the Trash.
/Vote: Notarization is effective against known files (or file hashes) and can be used on apps that have been previously launched. The signature-based rules of XProtect are more generic than a specific file hash, so it can find variants that Apple has not seen. XProtect Operates with a slower upclate cycle than Aotarlzatlon ancl scaAs Only apps that have been changed or at first launch.
Mal wareRemoval Tool
Should malware make its way onto a Mac, macGS also includes technology to remediate infections. The Ma/ware Pemova/ Too/ (MAT) is an engine in macQS that remediates infections based on updates automatically delivered from Apple (as part of automatic Updates of systeIYI clata flies ancl secLII'Ity Upclates). MRT I'emoves IYIBIWBI"6 Upon recelvIAg updated information, and it continues to check for infections on restart and login. MRT doesn't autQITlatlcally I'eboot 'the Mac.
Apple issues the updates for XProtect and MRT automatically based on the latest threat intelligence available. By default, macGS checks for these updates daily. Notarization updates are distributed using CloudKit sync and are much more frequent.
Response process
When new malware is discovered,,a number of steps may be performed:
Any associated Developer ID certificates are revoked. Notarization revocation tickets are issued for all files (apps and associated files). XPI'Qtect slgnatLlfes al'6 developed and I'eleasecl. MRT signatures are developed and released. These slgnatUI'es BI'6 also Bppllecl I'etroactlvely t0 pl'evIOLIsly A0'tarlzecl software, ancl any Aew detect lons caA I'esiLllt IA Qne Ql' ITIQre Qf the pl'evloLIs actions Qccul'I" Ing. Ultimately, a malware detection launches a series of steps over the next seconds, hours, and days that follow to propagate the best protections possible to Mac users.

Apple be ieves that users should have full transparency, consent, and control over what apps are doing with their data. In macQS 'IG.15, this model is enforced by the system to ensure that all apps must obtain user consent before accessing files in Documents, Downloads, Desktop, iCloud Drive, or network volumes. In macQS 'IG.13 or later, apps that require access to the full storage device must be explicitly added in System Preferences. ln aclclltlon, accesslblllty ancl BLltQITIatlon capa Glfltles I'equll'6 Usel' pel'ITIIssIGA to 6AslJre they don't circumvent other protections. Depending on the access policy, users may be prompted or must change the setting in System Preferences > Security 8 Privacy > Privacy:
Apple pletferm SeeunIy

CONFIDENTIAL

DX-5492.1 06

APL-EG 08874879

item

Uaer promplerl by app

Accessibility

Full internal storage access

Files and folders
Note: Includes: Desktop, Docurnenla, Download a, network volumes.and removable volumes

Automation (Apple events)

O

User musteditsystem privacy settings

lterns in the user's Trash are protected from any apps that are using Full Disk Access; the user won't get prompted for app access. If the user wants apps to access the files, they must be moved from the Trash to another location.
A uacr who anablcc FilaVault on a Mac is asked to provide valid cradcntiala baforo continuing the boot process and gain access to specialized startup modes. Without valid login credentials or a recovery key, the entire volume remains encrypted and is protected from unauthorized access, even if the physical storage device is removed and connected
to another computer.
To protect data in an enterprise setting, IT should define and enforce FileVault configuration policies using mobile device management (MDM). Organizations have several options for managing encrypted volumes, including institutional recovery keys, personal recovery keys (that can optionally be stored with MDM for escrow), or a combination of both. Key rotation can also be set as a policy in MDM.

Secure features in the Notes app
Secure notes
The Notes app includes a secure notes feature that allows users to protect the contents of specific notes. Secure notes are end-to-end encrypted using a user-provided passphrase that is required to view the notes on iOS, ipadOS, macOS devices, and the iClaud webnite. Each iCloud account (including "On rnye device accounts) can have a separate passphrase.
When a user secures a note, a 16-byte key is derived from the user's passphrase using PBKDF2 and SHA256. The note and all of its attachments are encrypted using AES with Galois/Counter Mode (AES-GCM). New records are created in Core Data and CloudKit to store the encrypted note, attachments, tag, and initialization vector. After the new records are created, the original unencrypted data is deleted. Attachments that support encryption include images, sketches, tables, maps, and websites. Notes containing other types of attachments can't be encrypted, and unsupported attachments can't be added to secure notes.

Apple Plane m ceca tr
CONFIDENTIAL

DX-5492.10T

107
AIDL-EG 08874880

To view a secure note, the user must enter their passphrase or authenticate using Touch ID or Face ID. After successfully authenticating the user, whether to view or create a secure note, Notes opens a secure session. While the secure session is open, the user can view or secure other notes without additional authentication. However, the secure session applies only to notes protected with the provided passphrase. The user still needs to authenticate for notes protected by a different passphrase. The secure session is closed when:
The user taps the Lock Now button in Notes Notes is switched to the background for more than 3 minutes (8 minutes in macQS) The iQS or ipadQS device locks To change the passphrase on a secure note, the user must enter the current passphrase, because Touch ID and Face ID aren't available when changing the passphrase. After choosing a new passphrase, the Notes app rewraps, in the same account, the keys of all existing notes that are encrypted by the previous passphrase.
If a user mistypes the passphrase three times in a row, Notes shows a user-supplied hint if one was provided by the user at setup. If the user still doesn't remember their passphrase, they can reset it in Notes settings. This feature allows users to create new secure notes with a new passphrase, but it won't allow them to see previously secured notes. The previously secured notes can still be viewed if the Qld passphrase is remembered. Resetting the passphrase requires the user's iCloud account passphrase.
ShaiI ed nOteS
Notes that aren't end-to-end encrypted with a passphrase can be shared with others. Shared notes still use the CloudKit encrypted data type for any text or attachments that the user puts in a note. Assets are always encrypted with a key that's encrypted in the CKRecol'cl. Metaclata, sLIch Bs the cl'eatlloA Bncl IYIocllflcatIQA elates, Bl'en't encrypted. CloudKit manages the process by which participants can encrypt and decrypt each other' s Clata.
In the Shortcuts app, shortcuts are optiionally synced across Apple devices using iCloud. Shortcuts can also be shared with other users through iCloud. Shortcuts are stored locally In Bn encl"ypted fol'mat.
Custom shortcuts are versatile -- they' re similar to scripts or programs. When downloading shortcuts from the internet, the user is warned that the shortcut hasn't been reviewed by Apple and is given the opportunity to inspect the shortcut. To protect against malicious shol'tcu ts, Llpcla teel ITIBIWBI'e clef lnl tlons Bl'e clownloaclecl to Iclentlfy ITIBIIclous shol-tcu ts Bt
I'Lln tl me.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 08

APL-EG 08874881

Custom shol'tcuts can also I'UA Llser- specified JBVBScl'Ipt on weI3sltes In Safal'I wheA
invoked from the share sheet. To protect against malicious JavaScript that, for example, tl'Icks the Llsel' In'to rUnnlng 3 scl'Ipt QA 3 social IYIeclla wel3slte that hal vests thell' clata,
the JavaScript is validated against the aforementioned ma ware definitions. The first time 3 Usel' I'Llns JBVBScl'Ipt on 3 doIYIBIA, the User Is pl'QIYlptecl to allow shol"tcUts con talnlng JavaScript to run on the current webpage for that domain,

Apple PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.1 09

APL-EG 08874882

Apple has built a robust set of services to help users get even more utility and productivity out of their devices. These services provide powerful capabilities for cloud storage, sync, passworcl storage, Buthentlcatlon, payment, messaging, communlcatlons, Bncl more, Bll while protecting users' privacy and the security of their data.
These services include iCloud, Sign in with Apple, Apple Pay, iMessage, Business Chat, FaceTime, Find My, and Continuity and may require an Apple IID or Managed Apple ID. In some cases, a Managed Apple II3 can't be used with a specific service, like Apple Pay,
/Vote: Not all Apple services and content are available in all countries or regions.

An Apple ID is the account used to sign in to Apple services such as iCloud, iMessage, FaceTime, the iTunes Store, the App Store, the Apple TV app, Apple Books, and more. It' s important for users to keep their Apple ll3s secure to prevent unauthorized access to their accounts. To help with this, Apple lll3s require strong passwords that:
Must be at least eight characters in length Must contain both letters and numbers
Must not contain more than three consecutive identical characters
Can't be acommonly used password
Users are encouraged to exceed these guidelines by adding extra characters and punctuation marks to make their passwords even stronger.
Apple also notifies users In email Bnd/or push notifications when Important changes Bre made to their account -- for example, if a password or billing information has been changed or the Apple ID has been used to sign in on a new device. Ilf anything looks unfamiliar, users
are instructed to change their Apple ID password i mmediaetly.

x Apple PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.11 0

APL-EG 08874883

In addition, Apple employ's a variety af policies and procedures designed ta pratect user accounts. These include Iimftfrlg the number of retries for sign-in and passWord reset attempts, active fraud monitoring to help identify attacks as they occur, and regular policy reviews that allow Apple to adapt to any new information that cauld affect user security.
hfofe: The Managed Apple ll3 password policy is. set by an administrator in Apple School Manager or Apple Business Manager.
Tvve-tactor guthentIcgtion
Ta help users further secure their accounts; Apple offers two =factor authentication --an extra layer of security for Apple IDs. It's designed ta ensure that only the account's awner can access the account, even if someone else kno1fvs the pass1fvord. Vfffth tWo-factor authentication, a user"s account can be accessed on only trusted devices, such as the user's iPhone, IPad, iPod touch, or Mac,,or on other devices after completing a verification from one of these trusted devices or a trusted phone number. To sign in for the first time on any new device, tvvo pieces of information are required -- the Apple ID password and a six-digit verification code that's displayed on the user's trusted devices or sent to a trusted phone number. By entering the code, the user confirms that they trust the new device and that it's safe ta sign fn. Because a password alone is no longer' enough to access a user's account, two-factor authentication improves the security of the user's Apple ID and all the personal infor'mation they store with Apple. It's integrated directly into iGS r iPadGS, rnaaOS, tvQS, watchQS, and the authentication systems used by Apple websites.
VVhen a user signs in to an Apple website using a web browser, a second factor request is sent to all trusted devices associated with the user's IClaud account, requesting approval of the Vveb sessiorl. If the user is signing in to an Apple website from a browser on a trusted device, they see the verification code displayed locally on the device they.'re using.. VVhen the user enters the code on that device, the web session is approved.
AccGU lit, 'r8cov8rtfr If an Apple II3 account password is forgotten, a user can reset it on a trusted device. If a trusted device isn't available and the password fs known, a user can use a trusted phone number can be used to autherlticate through SMS verification. In addition, to provide immediate recovery for an Apple ID, a previously used passoode aan be used to reset in conjunction with SMS. If these options aren't passible,, the account recovery' process must be followed. For more information, see the Apple Support article Recover your Apple lf3 when you can't reset your password.
Managed Apple II3 security
Managed Apple IDs functfon much like an Apple II3 but are owned and controlled by enterprise or educational organizations. These organizations can reset passwords, limit purchasingand communications such asFaceTime and Messages, and set up role-based permissions for employees, staff members, teachers,, and students.
For Managed Apple IDs, some services are disabled (for example, Apple Pay, iCIoud Keychain, HomeKit, and Find My).

Apple Platform Sec or lty
CONF fl3ENTIAL

DX-5492.111

Inspecting Managed Appie I os
Managed Apple IDs also support inspection, which allows arganizat}ans to camp}y with legal and privacy regulations. An Apple Schaol Manager admiriistrater, manager,,ar teacher can inspect specific Managed Apple ID accounts. Inspectors can mani'tar only accounts that are below them in the organization's hierarchy. Far example, teachers can monitor students, managers can inspect teachers and students, and administrators can inspect managers, teachers, and students. %hen inspecting credentials are requested us}ng Apple School Manager, a special account is issued that has access to only the Managed Apple ll3 for which inspecting was requested. The inspector can then read and modify the user's content star'ed In iC}oud or in CloudKit-enabled apps Every request for aud}ting access is }ogged }rl Apple School Manager. The logs show who the inspector was, the Managed Apple ID the inspector recjuested access ta, the time af the reqluest,,and whether the inspection Nfas performed.
Managed AppleIDs and personal devices
Managed Apple I}3s can also be used with persarlally awned IQS and ipadOS devices and Mac computers. Students sign in to. iC}aud using the Managed Apple l}3 issued by the institutian and an additional home-use password, which serves as the second factor of the Apple ID twa-factor authentication process. While students are using a Managed Apple II3 an a personal device, iClaud Keychain isn't available, and the institution might restrict other features such as FaceTirne or Messages. Any IC}oud documents created by students when they are signed in are subject ta audit as described previously in this section.
iCleud
iCloud security overview
iC}aud stores a user's contacts, calendars, photos, documents,,and mare and keeps the information up to date across all of the}r devices autamatically, iC}oud can also be used by third-party apps ta stere and sync daauments as well as key values for app data as defined by the developer. Users set up IC}oud by signing in with an Apple ID and choosing wh}ch serv}ces they would }ike ta use. Certa}n iCloud features, iC}oud Dr}ve, and IC}oud Backup can be disabled by IT administrators using mobile device management (MDM) configuration pf'afiles. The service Is agnostic about what ls being stored and handles a}l fife content the same way, as a cal}ection of bytes Each file is broken into chunks and encrypted by iC}oud using AES'i28 and a key derived from each chunk's contents, with the keys using SHA256. The keys and the file's metadata are stared by Apple in the. user's IC}aud account.- The encrypted chunks of the file. are stored, without any user-identifying informatian ar- the keys, using both Apple and thirdparty storage services -- such as Amazon Web Services or Qaogle Cloud Platform -- but these partners dan't have the keys to decrypt the user's data stored an their servers.
Apple Platform Security
CONF} DENTIAL

iCloud Drive security
iClaud I3rive. adds account-based keys to. protect documents star'ed in iClaud. iCloud Drive chunks and encrypts file contents and stores the encrypted chunks using third-party services. However, the file content. keys are wrapped by record keys stored with the iClaud I3rive. metadata. These record keys are in turn pratected by the user'.s iClaud Drive service key, which is then stared with the user's icioud account. Users get access ta their iCloud documents' metadata by having authenticated with iCIaud,,but they. must also possess the iCloud Drive service key' to expose protected parts of iCloud Drive storage.
ic[oud Orive backup
iCloud also backs up information,-- including device settings, app data, photos, and videos in the Camera Bali,,and conversations in the Messages app -- daily over Wi-Fi. iCIaud secures the cantent by encr ypting it when it's sent over the internet, stor ing it in an encrypted format and using secure tokens for authentication. iCloud Backup accurs only when the device is locked, connected to, a power source, and has ilyI-Fi access ta the internet Because of the encryption used ln iOS and ipad9S, iCloud Backup is designed ta keep data secure while allowing incremental, uriattended backup and restoration ta occur. When files are created iri Data Protectiori classes that aren't accessjble when the device is locked, their per-file keys are encrypted, using the class keys fram the iCIoud Backup keybag and backing the files up to iClaud in their ariginal, encrypted state. All files are encrypted during transport and,,when stored,,encrypted using account-based keys, as described in ClaudKit. The iCIaud Backup keybag contains asymmetric (Curve26619) keys for Data Protection classes that aren't accessible when the device ls locked. The backup set is stared ln the user's iCIoud account and consists o'f a copy of the user's files and the ICIoud Backup keybag. The iCIoud Backup keyhag is protected by a randam key, which is also stored with the backup set. (The user's iCloud password isn't used for encryption, so changing the iClaud passwtord wan "t invalidate existing backups.) A'hile the user's keyehain database is backed up ta iCIaud, it remains pratected by a UIDtangled key. This allows the keyehain to be restored only to the same device from which lt originated, and it means no ane. else, including Apple,,can r'ead the user's keyehain items.Gn restare, the backed-up files, iClaud Backup keybag,,arid the key for the keybag are retrieved fram the user's iClaud account. The iCloud Backup keybag is decrypted .using its key, then the per-file keys jn the keybag are used ta decrypt the files in the backup sre, which are written as new files to the file system, thus reenerypting them according ta their l3ata Protection class.
Security of iCloud Backup
The fallawing, content is backed up using iClaud Backup:
Apple Platform Sec or lty
CONF I l3ENTIAL

Records forpurchased music, movies,,TV shows,,apps,,and books, A user's iCloud Backup Includes information about purchased content present ari the user's devjce, but riot the purchased content itself. Wheri the user restares from an iCloud Backup, their purchased content Is automatically downloaded fram the iTunes Stare,, the App Stare, the Apple TV app, or Apple Books. Some types of content aren't dawnioaded automatically in all countries or regions, and previous purchases may be unavailable if they have been refunded ar are no longer available in the store. Full purchase history is associated with a user's Apple ID. · Photos and videos on a user's devices, Note that if a user turns on ICloud Photos in iGS 8.'I ar later, iPadGS 13.'I or later, ar OS X 10.'I Q.-B or later, their photos and videos are already'stared in iClaud, sa they'aren't included in the user's IClaud Backup.
· Contacts, calendar events, reminders, and notes · l3evlce settings
· App data · Home screen and app organization · HameKit canfiguratian
Medical IO data
· Visual Voicemail passward (requires the SIM card that was in use duririg backup]
· ijvlessag'e, Buslf'less Cha't, text (SM'8), alld MM'S ITlessag'es (requIr'ets the SIM c'ard that was in use during backupj
When Messages in iCIeud is enabled, iMessage,,Busiriess Chat, text ('SMS], and MMS messages are removed fram the user's existing iCloud Backup and are instead stored in an end-to-end encrypted CloudKit container for Messages. The user's ICloud Backup retains a key ta that caritainer. If the user later disables iCIaud Backup, that container's key is rolled, the new key is stared only in iClaud Keyehain (inaccessible ta Apple and any' third parties), and new data vvrjtten ta the container can't be decrypted with the old eantajner key.
The key used to restore the messages in iCIaud Backup is placed in twa locations, iCloud Keychain and a backup in CloudKit. The backup in CloudKit is done if iCloud Backup is enabled and unconditianally restored whether the user restores an iCloud backup or not.-
CloudKit end-to-end encryption
Many Apple services, listed in the Apple 'Support article iCloud security overview, use end-ta-end encryption with a ClaudKit service key protected by iCloud Keychain syneing. Far these CloudKit containers, the key hierarchy is roated in iCIoud Keychain and therefore
shares the security characteristics of iCloud Keyehain - namely,the keys are available
only on the user's trusted devices, and nat ta Apple or any third party. If access to, iClaud Keychain data is lost, the data in CloudKit is reset; and if data is available from the trued local device, it's uplaaded agalri ta ClaudKit. For mere irifarmatian, see Escrow security for iCloud Keychain.

Apple Platform Security
CGNFIDENTIAL

DX-5492.114

Messages in iCloud a so uses CloudKit end-to-end encryption with a CloudKlit service key protected by iCloud Keychain syncing. Ilf the user has enabled iCloud Backup, the CloudKit service key used for the Messages in iCloud container is backed up to iCloud to allow the user to recover their messages even if they have lost access to iCloud Keychain and their trusted devices. This iCloud service key is rolled whenever the user turns off iCloud Backup.

Situation

User recovery options for CloudKit end-to-end encryption

Access to trusted device

Data recovery possible using a trusted device or iCloud Keychain recovery.

No trusted devices

Data recovery only possible using iCloud Keychain recovery.

iCloud Backup enabled and access to trusted device

Dat a r e c overy possible using iCloud Backup, access to a trusted device, or iCloud Keychain recovery.

iCloud Backup enabled and no access to trusted device D ata recovery possible using iCloud Backup or iCloud Keychain recovery.

iCloud Backup disabled and access to trusted device

Dat a r e c overy possible using a trusted device or iCloud Keychain recovery.

Backup disabled and no trusted devices

Data recovery only possible using iCloud Keychain r e c 0 vs r y.

IQS, IPacIQS, Bncl ITIacQS ITIake It easy fol' Llsel's to BLlthentlcate to thll"cl-pal'ty Bpps Bncl websites that use passwords. The best way to manage passwords is not to have to use one. Sign in with Apple lets users sign in to third-party apps and websites without having to cl'Bate Bncl ITIanage Bn BdclltlGABI account or passworcl while pl'QtBctlng the sign-In with their two-factor authentiication for Apple ID. For sites that don't support Sign in with Apple, the ALltQITIatlc Stl'Qng Passwol"cl featUI'6 enable B Llsel' s clevlces to BUtoITIatlcally cl'Bate, sync, Bncl enter Llnlclue stl'ong passworcls fof' sites BAcl Bpps. In IGS Bncl IPacIQS, passwol'cls are saved to a special Password AutoFill keychain that's user controlled and manageable by going to Settings > Passwords.
In IYIacGS, savecl passwoi'cls can be ITIBAagecl In Safal'I Passwol'cls pl'efereAces. This sync
system can also be Llsed to syAc passwol'cls that Bl'6 ITIBALIBIIy cl'Bated by the Llsel'.

Sign in with Apple is a privacy-friendly alternative to other single sign-on systems. tI
provides the convenience and efficiency of one-tap sign-in while giving the user more
transparency and control over their personal information.

Apple PIBIIGI tH Secul lty

CONFIDENTIAL

DX-5492.11 5

APL-EG 08874888

Sign In with Apple allows Lfsef's to set Llp BA BCCQLIAt Bncl sign IA to Bpps BAcl websltes using the Apple ID they already have, and it gives them more control over their personal
Information. Apps can Only Bsk for the Lfsef's ABIYIe Bncl eITIBII Bclclress wheA setting Llp Bn
BCCQLInt, BAcl the Llsel' always has 3 choice: They can shaf'e their pel'sonal eITIBII Bclclf'ess with an app or choose to keep their personal email private and use the new Apple private email relay service instead. Thiis email relay service shares a unique, anonymized email address that forwards to the user's personal address so they can still receive useful communication from the developer while maintaining a degree of privacy and control aver their personal information.
Sign in with Apple is built for security. Every Sign in with Apple user is required to have two-factor authentication enabled for their Apple ID. Two-factor authentication helps
secure not only the user's Apple ID but also the accounts they establish with their apps.
Fuf'thel'IYIGI'e, Apple has clevelopecl Bncl Integl'Btecl 3 pl'Ivacy-fl'leAclly Bntlfl'BLIcl signalInto
Sign in with Apple. This signal gives developers confidence that the new users they acquire Bre I'eal people Bncl Aot bots Ql' scf'Iptecl Bccoulnts.

When iCloud Keychain is enabled, iQS, iPadQS, and macGS create strong, random, unique passwords when users sign up for or change their password on a website in Safari. In iGS Bncl IPacIGS, BLltornatlc stl'ong passworcl genef'BtloA Is also available IA Bpps. Usef's mLIst Qpt Quit of Llslng stl'Qng passwol'cls. Genef'Btecl passworcls Bf'e savecl In the keychafn BAcl kept up to date across devices with iCloud Keychain, when it's enabled.
By default, passwords generated by iGS and iPadQS are 20 characters long. They contain Gne clfglt, GAe uppel'case chal Betel', two hyphens, Bncl 'l6 lowercase characters. These genel'Bted passwol'cls Bl'e stl'QAg, con tafnlng 7 I bits Qf entl'Qpy.
Passwof'cls Bl'e generatecl basecl Gn heurfstlcs that cletef'IYllne whether 3 passwof'cl-flelcl experience is for password creation. If the heuristic fails to recognize a context-specific password being used atpassword creation, app deve opers can set IJITextContentType. n ewPassword on their text field and web developers can set Butocompl e t e = "newpassword" on their <input> elements.
To ensure that generated passwords are compatible with the relevant services, apps and websites can provide rules. Developers provide these rules using Uj:TextI n p u t P a sswordRules or the passfior d r u l e s a t t ribute on their <input> elements. Devices then generate the strangest password they can that fulfills these rules.

Password AutoFill automatically fills credentials stored in the keychain. The iCloud Keychain password manager and Password AutoFill provide the following features:
Filling in credentials in apps and websites Genel'Btlng stl'QAg passwol'ds Saving passwords in both apps and websites in Safari

x Apple PIBtfpf tH SppUI It
CONFIDENTIAL

DX-5492.116

APL-EG 08874889

SharIAg passwords secLIrely to 3 Llsel's contacts
Providing passwords to a nearby Apple TV that's requesting credentials
GeAeratlng BAcl saving passwol'cls within Bpps, Bs well Bs pl'Qvlcllng passwoi'ds to Apple TV, are available Only in iQS and iPadQS.
iOS and iPadQS allow users to input saved user names and passwords into credentialrelated fields in apps, similar to the way Password AutolFill works in Safari. In iGS and iPadGS, users tap a key affordance in the software keyboard's QuickType bar. In macGS, for apps built with Mac Catalyst, a Passwords drop-down menu appears below credentialrelated fields.
When BA Bpp Is s'trongly associated with 3 wcbsite that uses the saITIe Bpp-website association ITIechanlsITI Bncl that's powei'eel by the sBITIe apple-Bpp-site-association file, the iOS and iPadQS QuickType bar and macQS drop-down menu directly suggest credentials for the app, if any are saved to the Password AutoFill Keychain. This allows users to choose to disclose Safari-saved credentials to apps with the same security properties, without those apps having to adopt an API.
Password AutoFill exposes no credential information to an app until a user consents to release a credential to the app. The credential lists are drawn from or presented out of the Bpp s pl Qcess.
When an app and website have a trusted relationship and a user submits credentials within an app, iQS and iPadQS may prompt the user to save those credentials to the Password AutoFill keychain for later use.

iQS, iPadGS, and macQS apps can request the Password AutoFill keychain's help with signing a user in using ASAuthorizationPasswordProvider and SecAddSharedWebCredential. The password provider and its request can be used in conjunction with Sign in with Apple, so that the same API is called to help users sign into an app, regardless of whether the user's account is password based or was created using Sign in with Apple.
Apps can access savecl passwofcls Only If the Bpp cleveloper Bncl webslte BQIITllnlstl'Btor have given their approval and the user has given consent. App developers express their Intent to access Safai'I savecl passwoi'cls by Inclucling Bn entltleITIent In theli" Bpp. The entitlement lists the fully qualified domain names of associated websites, and the websites must place a file on their server listing the unique app identifier s of apps approved by App I e.
When an app with the corn.apple. developer. associated-domains entitlement is installed, iQS and iPadQS make a TLS request to each listed website, requesting Qne Qf the fallowing files:
3 p p eI - 3p p- s I te -3ss0 c I atI oA
. Well-know n / a p p l e - a p p - s i t e - a s s o c i a t i o n

Apple pletferm SeeunIy
CONFIDENTIAL

DX-5492.11 7

APL-EG 08874890

lf the file lists the app identifier of the app being installed, then iGS and iPadGS mark the website and app as having a trusted relationship. Qnly with a trusted relationship will calls to these two APIs result in a prompt to the user, who must agree before any passwords are I'eleasecl to the Bpp, Llpclatecl, Ql' cleletecl.

The Password AutoFill passwords list in iGS, iiPadQS, and macQS indicates which of a user's saved passwords will be reused with other websites, passwords that are considered weak, and passwords thathave been compromised by a data leak.
Using the same password for more than one service may leave those accounts vulnerable to a CI'eclentlal-stLlfflng attack. If a sel'vlcc Is bl'eachecl Bncl passwol'cls Bl'6 Ieakecl, Bttackel's may tl'y the salable CI'ecleAtlals QA Qthel' sel'vices to CQITlpf'ornlse BclclltlQABI BCCQUnts. Passwol'cls Bl'6 mal'keel Bs Ieusecf If 'the same passwol'cl Is seen Usecl for ITIQI'6 than one saved password across different domains.
Passwords are marked weak if they may be easily guessed by an attacker. iQS, iPadQS, Bncl macQS cletect colTIITIQA pattel'As Usecl to CI"cate ITlelYlorable passworcls, sLIch Bs Llslng words found in a dictionary, common character substitutions (such as using "p4ssw0rd" instead of "password"), patterns found on a keyboard (such as "q'I2we34r" from a QWERTY keyboard), or repeated sequences (such as "123'I23"). These patterns are often Ulsecl to CI'cate passwol'cls that satisfy ITIIAIITIUITI passworcl reqLIII'ements for sel'vices, bLlt are also commonly used by attackers attempting to obtain a password using brute force.
Because many services specifically require a four- or six-digit PIN code, these short passcodes are evaluated with different rules. PIN codes are considered weak if they are one of the most common PIN codes, if they are an increasing or decreasing sequence such as "1234" or "8765," or if they follow a repetition pattern, such as "123123" or "'l2332'I."
Passwords are marked leaked if the Password Monitoring feature can claim they have been present in a data leak. For more information, see Password Monitoring.
Weak, reused, and leaked passwords are either indicated in the list of passwords (macQS) or present in the dedicated Security Recommendations interface (iGS and iPadQS). If the Llsel' logs In to a webslte In Safal'I UsIAg a pl'evIGLlsly savecl passworcl that's vel'y weak Gl' that's been compromised by a data leak, they' re shown an alert strongly encouraging them to Ul p g I'3 cl 6 t Q B A B U tQITIBtIc st I'Q A g p a s sw QI'cl.
Apps that implement an Account Authentication Modification Extension can provide easy, tap-Qf-a-button Upglacies fol' passworcl-I'oasecl BCCQLIAts -- ABITIely, they can switch to Llslng Sign in with Apple or an automatic strong password. This extension point is available in iGS and iPadQS.

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.11 8

APL-EG 08874891

lf an app has implemented the extension point and is installed on device, users see extension upgrade options when viewing Security Recommendations for credentials associated with the app in the icloud Keychain password manager in Settirlgs. The upgrades are also offered when users sign in to the app with the at-risk credential. Apps have the ability to tell the system not to prompt users with upgrade options after signing in. Using new AuthenticationServices API, apps can also invoke their extensions and perform Llpgl'acies themselves, Icleally fl'QITI BA account settlAgs Ql' BCCQLInt manageITIeAt scf'eeA In the Bpp.
Apps can choose to sUppol"t strong passwof'cl Upgl'acies, Sign IA with Apple Llpgl'acies, Qf' both, In 3 stl'Qng passwol'cl Llpglf'Bde, the system generates Bn BUtofrlatlc strong passwOI'cl for the user. If necessary, the app can provide custom password rules to follow when genel'B ting the Aew passwol'cl. When 3 Llsef' switches BA BCCQUnt fl'QITI IJsfng 3 passwol"cl to using Sign in with Apple, the system provides a new Sign in with Apple credential to the extension to associate the account with. The user's Apple ID email isn't provided as part of the credential After a successful Sign in with Apple upgrade, the system deletes the previously used password credential from the user's keychain if it's saved there.
Account Authentication Modification Extensions have the opportunity to perform additional user authentication before performing an upgrade. For upgrades iinitiated within the passwol'cl fYIBAagel' of' Bftel" sfgnlng ln to BA Bpp, the extensIQA pl'Qvlcles the Usef' name Bncl passwol"cl fof' 'the BCCQLInt to Llpgl'Bcle. Fol' In-Bpp Llpgrades, QAIy 'the Llsef' name Is pl'Qvfclecl. lf the extension requires further user authentication, it can request to show a custom user interface before moving on with the upgrade. The intended use case for showing this Llsef' IAterface Is to have the Llsel' en tel 3 seconcl factol' Qf Buthentlcatlon to BLI thol'Ize the LI p g f'3 cl 6.
Password Monitoring is a feature that matches passwords stored in your Password AutoFill keychaln against 3 CQAtlnLIQUsly Llpclatecl BAcl CLlratecl list Qf passwof'cls knowA to have been exposed in leaks from different online organizations. If the feature is turned on, the monitoring protocol continuously matches your Password AutoFill keychain passwords BQBIAst the CUI"Bted Ils't.
The user's device continuously performs round-robin checks on a user's passwords, querying on an interval that's independent of the user's passwords, ensuring that vef'IflcatloA states I"6ITIBIA Up to elate wfth the CLII'I'6At cuf'Btecl list of Ieakecl passwol'cls. To pl'event leakage of lnfof'ITIatlon I'elatecl to how ITIany LIAIqLIe passwol cls 3 Llsel' has, reqUests are batched and performed in parallel. A fixed number of passwords are verified in parallel on each check, and should the user have fewer than this number, random passwords are generated and added to the queries to make up the difference.

Apple PIBIIGI m SppUI IIX
CONFIDENTIAL

DX-5492.11 9

APL-EG 08874892

How matching is done
Matching is done in a two-part process. The most commonly leaked passwords are contained within a local list on the user's device, lf the user's password occurs on this list, the user is immediately notified without any external interaction. This ensures that no information is leaked about the passwords a user has that are most at risk due to a password breach.
If the password isn't contained on the most frequent list, then it is matched against less frequently leaked passwords.
To verify whether a password not present in the local list is a match involves some interaction with Apple servers. To ensure that legitimate users' passwords aren't sent to Apple, a form of cryptographic private set intersection is deployed that compares the users' passwords against a large set of leaked passwords. This ensures that for passwords less at risk of breach, little information is shared with Apple. For a user's password, this information is limited to a 'l5-bit prefix of a cryptographic hash. Notably, the removal of the most frequently leaked passwords from this interactive process, using the loca list of most commonly leaked passwords, reduces the delta in relative frequency of passwords in the web service buckets. This greatly reduces the ability for Apple to infer a user's password.
The underlying protocol partitions the list of curated passwords, which contained approximately 'I 5 billion passwords at the time of this writing, into 2"' different buckets. The bucket a password belongs to is based on the first 'l5 bits of the SHA256 hash value of the password. Additionally, each leaked password, pw, is associated with an elliptic curve point on the NlsT P256 curve: P, = ct H, ,,(pw), where ct is a secret random key known only to Apple and H~~,, is a random oracle function that maps passwords to curve points based on the Shallue-van de Woesti)ne-Ulas method. This transformation is designed
to computatinoallyhidethe va ues of passwords and prevents revea ing newly leaked
passwords through Password Monitoring.
To compute the private set intersection, the user's device determines the bucket the user's password belongs to using A., the 15-bit prefix of SI-IA256(upw), where upw is one of the ulsel's passworcls. The clevlce genel'ates thell' own random constant, p, ancl sencls the point P = P H ,,(upw) to the server, along with a request for the bucket corresponding to A.. Here P hides information about the user's password and limits to A. the information exposed from the password to Apple. Finally, the server takes the point sent by the user's device, computes QP = ctp H,,,,,(upw), and returns it, along with the appropriate bucket of points8A. = ( P I S HA256(pw) begins with prefix A) -- to the device.
The returned information allows the device to compute 8', = gP P I P F 8, ) , a nd ascertains that the user's password has been leaked if tilP C 8',.

Aopfe PIBtfGfm SpcUIIt x
CONFIDENTIAL

DX-5492.120

APL-EG 08874893

When iCloud is enabled, users can AirDrop a saved credentia -- including the websites it' s savecl for, lts Llser name, Bncl Its passwor'cl -- to Bnothel' device. Sencllng CI ecleAtlals with AirDrop always operates in Contacts Only mode, regardless of the user's settings. Qn the receiving device, after user consent, the credential are stored in the user's Password AutoFill Keychain.
Password AutoFill is available to fill credentials in apps on Apple TV. When the user focuses on a user name or password text field in tvQS, Apple TV begins advertising a request for Password AutoFill over Bluetooth I ow Energy (BI E). Any nearby iPhone, iPad, or iPod touch displays a prompt inviting the user to share a credential with Apple TV. Here's how the encryption method is established:
If the device and Apple TV uses the same iCloud account, encryption between the devices happens automatica ly. If the device is signed in to an iCloud account other than the one used by Apple TV, the user is prompted to establish an encrypted connection through use of a PIN code. To receive this prompt, iPhone must be unlocked and in close proximity to the Siri Remote paired to that Apple TV. After the encrypted connection is made using BLE link encryption, the credential is sent to Apple TV and is automatically filled in to the relevant text fields on the app.
In IQS, IPBcIGS, Bncl IYIBCGS, users can designate B pal'tlclpatlng thll'cl-par"ty Bpp Bs B credential provider for Password AutoFill in Passwords settings (iQS and iPadQS) or in Extensions settings in System Preferences (macQS). This mechanism is built on app extensions. The credential provider extension must provide a view for choosing credentials, BAcl the extensron can Optionally provlcle metaclata about savecl creclentla s so they can be offered directly on the QuickType bar (iGS and iPadGS) or in an autocornplete suggestion (macOS). The metadata includes the website of the credential and the associated user name but not its password. iQS, iPadOS, and macGS communicate with the extension to get the password when the user chooses to fill a credential into an app or a website in Safal'I. CredentIBI IYIetaclata Is stol'ecl Inslcle the creclentlal pl'Qvldel Bpp's CQAtalner' Bncl Is automatically removed when an app is uninstalled.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.121

APL-EG 08874894

iCloud allows users to securely sync their passwords between iQS and iPadGS devices and Mac computers without exposing that information to Apple. In addition to strong privacy and security, other goals that heavily influenced the design and archiitecture of iCloud Keychain were ease of use and the ability to recover a keychain. iCloud Keychain consists of two services: keychain syncing and keychain recovery.
Apple designed iCloud Keychain and keychain recovery so that a user's passwords are still protected under the following conditions:
A user's iCloud account is compromised. iCloud is compromised by an external attacker or employee, A thll'd pal"ty Bccesses Ulsel' BccGUAts.
I Q S, I P 3 cl G S, B A cl m 3 c Q S c 3 A 3 LI to IYIBt I c 3IyI g e AeI'3t e c I'y p t 0 9 I'3 p h I c 3I Iy s t r Q Ag I' 3 A cl0 m s t I' I Ag s to U s e 3 s 3 c c 0 LI At p 3 s sw GI'cl s I n S 3 f 3 I' I . I Q S 3 A cl I P 3clQ S c 3 A 3 I s 0 g e A e r3t e st I" 0 Ag passwof'cls for Bpps. Generatecl passwol'cls Bl'e storecl In the keychain Bncl synced to othel' devices. Keychain items are transferred from device to device, traveling through Apple sei'vel's, bUlt Bl'e encfyptecl In sUch 3 way that Apple BAcl Q'thel' devices caA't I'ead theil' contents.
When a user enables iCloud Keychaiin for the first time, the device establishes a circle of trust and creates a syncing identity for itself. The syncing identity consists of a private key and a public key. The public key of the syncing identity is put in the circle, and the circle is signed twice: first by the private key of the syncing identity, then again with an asymmetric elliptical key (using P-256) derived from the user's iCloud account password. A so stored with the circle are the parameters (random salt and iterations) used to create the key that is based on the user's iCloud password.
The signed syncing circle is placed in the user's iCloud key-va ue storage area, It can't be read without knowing the user's iCloud password and can't be modified validly without having the private key of the syncing identity of its member.
When the user turns on iCloud Keychain on another device, iCloud Keychain notices that the user has a previously established syncing circle in iCloud that it isn't a member of. The clevlce cieates Its synclng Iclentlty key palll', then cl'eates Bn BpplllcatlQA ticket to reciuest membership in the circle. The ticket consists of the device's public key of its syncing identity, and the user is asked to authenticate with their iCloud password. The elliptical key-geAel'ation parameters Bre I'etrlevecl from ICIQUcl Bnd geAef'ate 3 key that's Llsecl to sign the application ticket. Finally, the application ticket is placed in iCloud.

Apple pletferm SeeunIV
CONFIDENTIAL

DX-5492.122

APL-EG 08874895

When the first device sees that an application ticket has arrived, iit asks for the user to acknowledge that a new device is asking to join the syncing circle. The user enters their iCloud password, and the application ticket is verified as signed by a matching private key. Now, the users who generated the request to join the circle can join it.
Upon the user's approval to add the new device to the circle, the first device adds the public key of the new member to the syncing circle and signs it again with both its syncing identity and the key derived from the user's iCloud password. The new syncing circle is placed in iCloud, where it's similarly signed by the new member of the circle.
There are now two members of the signing circle, and each member has the public key of its peer. They now begin to exchange individual keychain items through iCloud key-value storage or store them in CloudKit, whichever is most appropriate for the situation. If both circle members have the same item, the one with the most recent modification date is synced. If the other member has the item and the modification dates are identical, items are skipped. Each item that's synced is encrypted so that it can be decrypted only by a device within the user's circle of trust; it can't be decrypted by any other devices or by Apple.
This process is repeated as new devices join the syncing circle. For example, when a third device joins, the confirmation appears on both Qf the other user's devices. The user can approve the new member from either of those devices. As new peers are added, each peer syncs with the new one to ensure that all members have the same keychain items.
However, the entire keychain isn't synced. Some items are device specific, such as VPN i dentities, and shouldn't leave the device. Only items with the kSBCAttr Sy nchr o n i z a b l e attribute are synced. Apple has set this attribute for Safari user data (including user names, passwords, and crediit card numbers) as well as for Wi-Fi passwords and HomeKit encryption keys.
Additionally, by default, keychain items added by third-party apps don't sync. Developers must set the kSBCAttr S y nc hr o n i z a b j.e attribute when adding items to the keychain.

iCloud Keychain recovery provides a way for users to optionally escrow their keychain with Apple without allowing Apple to read the passwords and other data it contains. Even if the Llsel' has Only a sIAgle clevlce, keychaIA I Bcovery provlcles a safety Aet agaIAst clata loss. This Is partlcLIIal'ly IITlpol'tant wheA Safal'I is Llsecl to geABI'atB I'anclom, stl'ong passwol'cls fol' web accounts, because the only record of those passwords is in the keychain.
A col'Ael'stone Qf keychaIA I'ecovel'y Is secoAclal"y authentlcatlon aAcl a secull'6 escl'Qw service, created by Apple specifically to support this feature. The user's keychain is encl'yptecl using a stl"Qng passcocle, ancl 'the escl"Qw sel'vlcc pl'ovlcles a copy Qf the keychaln Only If a stl'Ict set Qf coAclltlons al'6 met.
Use of secondary eUIIhelnlticeltion There are several ways to establish a strong passcode:

Appfe PIBtfpfm SppUIIIX
CONFIDENTIAL

DX-5492.123

APL-EG 08874896

If two-factor authentication is enabled for the user's account, the device passcode is Llsecl to I'Bcovel' an Bscl'Qwecl keychaln
lf two-factol' aUthentlcatlon Isn't set Llp, the Usel' Is askecl to create an ICIQLIcl secUrlty cocle by provlcllng a six-cllglt passcocle. AlterAatlve y, wlthQUt two-factol' aLlthentlcatlon, users can specify their own, longer code, or they can let their devices create a cryptographically random code that they can record and keep on their own.
After the passcode is established, the keychain is escrowed with Apple. The iQS, iPadQS, or macQS device first exports a copy of the user's keychain and then encrypts it wrapped with keys in an asymmetric keybag and places it in the user's iCloud key-va ue storage area. The keybag is wrapped with the user's iCloud security code and with the public key of the hardware security module (HSM) cluster that stores the escrow record. This becomes the user's iCloud escrow record. For HSA2 accounts, the keychain is also stored in CloudKit and wrapped to intermediate keys that are recoverable only with the contents of the iCloud escrow record, thereby providing the same level of protection.
A/ofe: If the user decides to accept a cryptographically random security code instead of specifying their own or using a four-digit value, no escrow record is necessary. Instead, the iCloud security code is used to wrap the random key directly.
Besides establishing a security code, users must register a phone number. This provides a secondary level of authentication during keychain recovery. The user receives an SMS message that must be replied to for the recovery to proceed.
iCloud provides a secure infrastructure for keychain escrow to ensure that only authorized users and devices can perform a recovery. Topographically positioned behind iCloud are clusters of hardware security modules (HSMs) that guard the escrow records. As described previously, each has a key that is used to encrypt the escrow records under their watch.
To recover a keychaln, Llsel's mUst aUtheAtlcate with thell ICIGUcl account aAcl passwol'cl aAcl respond to an SMS sent to their registered phone number. After this is done, users must enter their iCloud security code. The HSM cluster verifies that a user knows their iCloud security code using the Secure Remote Password (SRP) protocol; the code itself isn't sent to Apple. Each member of the cluster independently verifies that the user hasn't exceeded the maximum number of attempts allowed to retrieve their record, as discussed below. If a majority agree, the cluster unwraps the escrow record and sends it to the user's device.
Next, the device uses the iCloud security code to unwrap the random keys used to encrypt the user's keychaiin. With that key, the keychain -- retrieved from iCloud key-value storage and CloudKit -- is decrypted and restored onto the device. iQS, iiPadQS, and macQS allow Only 'IG attempts to authenticate ancl Ietl'Ieve an escrow I'ecol'cl. After several failed attempts, the record is locked and the user must call Apple Support to be granted more attempts. After the 'IGth failed attempt, the HSM cluster destroys the escrow record and the keychain is lost forever. This provides protection against a brute-force attempt to retrieve the record, at the expense of sacrificing the keychain data in response.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.124

APL-EG 08874897

These policies are coded in the HSM firmware. The administrative access cards that permit the firmware to be changed have been destroyed. Any attempt to alter the firmware or access the private key causes the HSM cluster to delete the private key. Should this occur, the owner of each keychain protected by the cluster receives a message informing them that their escrow record has been last. They can then choose to reenroll.

With Apple Pay, users can use supported iPhone, iPad, Mac, and Apple Watch devices to pay In Bn easy, secLIre, BAcl pl'Ivate way In stol'Gs, Bpps, Bncl on the weo In Safal'I. Users can also add Apple Pay -- enabled transit and student ID cards to Apple Wallet. It's simple for users, and it's built with integrated security in both hardware and software.
Apple Pay is also designed to protect the user's personal information. App e Pay doesn' t collect Bny tl'BAsactlon Infof'ITIatlon that can be tlecl back to the usef'. PayITIGAt tl'Bnsactlons Bl'e betweeA the Llsel', the fTIGI'chaAt, Bncl the caf'cl Issuer.

The Secure Eement is an industry-standard, certified chip running the Java Card platform, which is compliant with financial industry requirements for electronic payments. The Secure Element IC and the Java Card platform are certified in accordance with the EMVCo Security Evaluation process. After the successful completion of the security evaluation, EMVCQ issues unique IC and platform certificates.
The Secure Element IC has been certified based on the Common Criteria standard.
MFC controller
The NFC controller handles Near Field Communication protocols and routes communication between the Application Processor and the Secure Element, and between the Secure Element and the point-of-saic terminal.
Apple Wa lleII:
Apple Wallet Is Lfsecl to Bclcl Bncl IYIBABge cfecllt, cleblt, Bncl store carcls Bncl to IYIake payments with Apple Pay. Users can view their cards and may be able to view additional information provided by their card issuer, such as their card issuer's privacy policy, recent transactions, and more in Apple Wallet. Users can also add cards to Apple Pay in:
Setup Assistant and Settings for iQS and iPadQS The Watch app for Apple Watch Wallet 8 Apple Pay in System Preferences for Mac computers with Touch ID

Apple PIBIIGI tH SppUI Itg

CONFIDENTIAL

DX-5492.125

APL-EG 08874898

In addltlon, Apple Wallet allows users to add and manage transit cards, rewards cards, boalcIIAg passes, tickets, gift cal'ds, stLIclent ID cal'cls, BAcl ITIQI'e.
Secure Enclave
Qn iPhone, iPad, Apple Watch, and Mac computers with Touch ID, the Secure Enclave
manages the BUthentlcatlon pl'Qcess BAcl eAables B payment tl'Bnsactlon to pl'oceecl.
Qn Apple Watch, the device must be unlocked, and the user must double-Click the side button. The double-click is detected and passed directly to the Secure Element or Secure Enclave, where available, without going through the Application Processor.
Apple Pay servers
The Apple Pay servers manage the setup and provisioning of credit, debit,, transit, and student ID cards in the Wallet app. The servers also manage the Device Account Numbers stored in the Secure Element. They communicate both with the device and with the payment network or card issuer servers. The Apple Pay servers are also responsible for reencrypting payment credentia s for payments within apps or on the web.

The Secure Element hosts a specially designed applet to manage Apple Pay. It also includes applets certified by payment networks or card issuers. Credit, debit, or prepaid cal'cl clata Is seAt fl'Qm the payment Aetwol'k QI' cal'cl IsslJel encl'yptecl to these Bpplets using keys that are known only to the payment network or card issuer and the applets' security domain. This data is stored within these applets and protected using the Secure Element's security features. During a transaction, the terminal communicates directly with the Secure Element through the near-fieid-communication (NFC) controller over a decllcatecl hal'clwal'e bLls.
MFC controller
As the gateway to the Secure Element, the NFC controller ensures that all contactless payITlent transactlQAs Bl'e coAOILIctecl UsIAg B point-Qf-sale terITIIABI that Is In close proximity with the device. Qnly payment requests arriving from an in-field terminal are marked by the NFC controller as contactless transactions.
After a credit, debit, or prepaid card (including store cards) payment is authorized by the cardholder using Touch ID, Face ID, or a passcode, or on an unlocked Apple Watch by double-clicking the side button, contactless responses prepared by the payment applets within the Secure Element are exclusively routed by the controller to the NFC flelcl. Consequently, payITIent BU thol'Ization cle tails fol' contactless payITIent tl'BAsactlons are contained to the local NFC field and are never exposed to the App ication Processor. In contrast, payment BUthol'IZBtloA cletalls for payIYIeAts wlthln Bpps Bncl QA the web Bl'e routed to the Application Processor, but only after encryption by the Secure Element to the Apple Pay server.

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.126

APL-EG 08874899

When a user adds a credit, debit, or prepaid card (including store cards) to Apple Wallet, Apple securely sends the card information, along with other information about user's accouAt ancl device,, to the cal'cl Issuel' Ql' carel Issuer's authorized sel vlcc pl'ovlclel". Using this information, the card issuer determines whether to approve adding the card to Apple Wa I let.
As part of the card provisioning process, Apple Pay uses three server-side calls to send and receive communication with the card issuer or network: Required Fields, Check Card, and Link and Provision. 'The card issuer or network uses these calls to verify, approve, and add cards to Apple Wallet. These client-server sessions use TLS 'l.2 to transfer the data.
Full card numbers aren't stored on the device or on Apple Pay servers. Instead, a unique l3evice Account Number is created, encrypted, and then stored in the Secure Element. This unique l3evice Account Number is encrypted in such a way that Apple can't access it. The l3evice Account Number is unique and different from most credit or debit card numbers; the carel IssLIBI' or payITIent netwol'k can prevent llts Llse Qn a magnetic stl"Ipe cal'cl, Qvel' the phone, or on websites. The Device Account Number in the Secure Element is never stored on Apple Pay servers or backed up to iCloud, and it is isolated from iGS, iPadGS, and watchGS devices and from Mac computers with Touch ID.
Cards for use with Apple Watch are provisioned for Apple Pay using the Apple Watch app on iPhone, or within a card issuer's iPhone app. Adding a card to Apple Watch requires that the watch be within Bluetooth communications range. Cards are specifically enrolled for use with Apple Watch and have their own Device Account Numbers, which are stored within the Secure Element on the Apple Watch.
When credit, debit, or prepaid cards (including store cards) are added, they appear in a list of cal'cls OILIrlng SetLlp AsslstaAt QA clevlces that al'e slgnecl In to the saITIB ICIOLIOI accoLInt. These cards remain in this list for as long as they are active on at least one device. Cards are removed from this list after they have been removed from all devices for 7 days. This feature requires two-factor authentication to be enabled on the respective iCloud account.
To add a card manua ly, the name, card number, expiration date, and CVV are used to facilitate the provisioning process. From within Settings, the Wallet app, or the Apple Watch app,,users can enter that information either by typing or by using the device's camera. When the camera captures the card information, Apple attempts to populate the name, card number, and expiration date. The photo is never saved to the device or stored in the photo library. After all the fields are filled in, the Check Card process verifies the fields other than the CVV. They are then encrypted and sent to the Apple Pay server.

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.127

APL-EG 08874900

If a terms and conditions ID is returned with the Check Card process, Apple downloads and displays the terms and condiitions of the card issuer to the user. If the user accepts the terms and conditions, Apple sends the ID of the terms that were accepted as well as the CVV to the Link and Provision process. Additionally, as part of the Link and Provision process, Apple shares information from the device with the card issuer or network, like information about the user's iTunes and App Store account activity (for example, whether the user has a long history of transactions within iTunes), information about the user's device (for example, phone number, name, and model of the user's device plus any companion Apple device necessary to set up Apple Pay), and the user's approximate location at the time the user adds their card (if the user has Location Services enabled). Using this information, the card issuer determines whether to approve adding the card to Apple Pay.
As the result of the Link and Provision process, two things occur:
The device begins to down oad the Wallet pass file representing the credit or debit card.
The device begins to bind the card to the Secure Element. The pass file contains URLS to download card art, metadata about the card such as contact InforITIatlon, the I'elatecl IssUBI's app, and sUpportecl featUres. It also contaIAs the pass state, which includes information such as whether the personalizing of the Secure Element has completed, whether the card is currently suspended by the card issuer, or whether 3 cl cl I tIoA3IveI'I f Ic3't Io n I s I'e q U I I'e d b e f Q I'e t h e c 3 I'cl c 3 n ITI 3 k e p 3 yITIen'ts w I t h A p p I e P 3y.
For a credit or debit card on file with iTunes, the user may be required to reenter their Apple ID password. The card number is retrieved from iTunes, and the Check Card process is initiated. Ilf the card is eligible for Apple Pay, the device downloads and displays terms and conditions, then send along the term's ID and the card security code to the Link and Provision process. Additional verification may occur for iTunes account cards on file.
When the app is registered for use with Apple Pay, keys are established for the app and for the card issuer's server. These keys are used to encrypt the card information that's sent to the card issuer, which prevents the information from being read by the Apple device. The provisioning flow is similar to that used for manually added cards, described previously, except one-time passwords are used in lieu of the CVV.
A carel IssUIBI' can cleclcle whether 3 cl'ecllt of' cleblt carel I'eclLIIres aclcliltloAal vellflcatlon. Depending on what's offered by the card issuer, the user may be able to choose between different options fol" aclclltlonal verlflcatlon, sUch as 3 text ITIessage, BITIall, cUIstoIYIBI' service call, or a method in an approved third-party app to complete the verification. For text messages or email, the user selects from contact information the issuer has on file. A code is sent, which must be entered into the Wallet app, Settings, or the Apple Watch app. Fol' cLIstoITIBI' sel'vlcc Ql' vBI'Iflcatlon Ulslng an app, the IssUIBI' pel'fol'ITIs thell' Qwn coITIITIUAIcatlon pl'ocess.

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.128

APL-EG 08874901

FQI" clevlces having 3 SecUI e EAclave, 3 payment can be IYIacle only after It I'ecelves authorization from the Secure Enclave. On iPhone or iPad, this involves confirming that the user has authenticated with Touch ID, Face ID, or the device passcode. Touch ID or Face IID, if available, is the default method, but the passcode can be used at any time. A passcode Is ButoITIatlcally Qfferecl after thr'ee UnsuccessfUII BtteITlpts to IYIatch 3 flngel'prln't, Ql' two LlnsUIccessfUI BtteITlpt's to IYIatch 3 face; Bf tel' five UAsUccessfLII attempts, the passcocle Is required. A passcode is also required when Touch ID or Face IID isn't configured or isn' t enabled for Apple Pay. For a payment to be made on Apple Watch, the device must be unlocked with passcode and the side button must be double-clicked.
Communication between the Secure Enclave and the Secure Element takes place over a serial interface, with the Secure Element connected to the NFC contro ler, which in turn is connected to the Application Processor. Though not directly connected, the Secure Enclave BAOI SecUII e EleITIent can coIYIrnLlnlcate secUI'ely UsIAg 3 shal ecl pall'Ing key that' s provisioned during the manufacturing process. The encryption and authentication of the communication are based on AES, with cryptographic nonces used by both sides to protect against replay attacks. The pairing key is generated inside the Secure Enclave from its UID key and the Secure Element unique identifier. The pairing key iis then securely transferred from the Secure Enclave to a hardware security module (HSM) in the factory, which has the key material required to then inject the pairing key into the Secure Element.
When the user authorizes a transaction, which includes a physical gesture communicated directly to the Secure Enclave, the Secure Enclave then sends signed data about the type Gf BLlthentlcatloA Bncl cletalls BboLlt the type Qf transaction (coA'tactless Ql'wlthlA Bpps) to the Secure Element, tied to an Authorization Random (AR) value. The AR value is generated in the Secure Enclave when a user first provisions a credit card and persists while Apple Pay is enabled, protected by the Secure Enclave encryption and anti-rollback mechanism. It's securely delivered to the Secure Element by leveraging the pairing key. On receipt of a new AR value, the Secure Element marks any previously added cards as deleted.
Paymenttl'Bnsactlons orIglnatlng fl'QITI the payIYIent Bpplets IncILIcle 3 payment cr'yptogl'BITI
along with a Device Account Number. This cryptogram, a one-time code, is computed LlsIAg 3 'transaction coUntel" BAcl 3 key. The traAsactloA coLIntel' Is Ilncf'eIYIentecl fol' each Aew tl'Bnsactlon. The key Is provlsloAecl In the paylYlent Bpplet cIUI'IAg pel'sonallzatlon BAOI Is known by the payment network and/or the card issuer. Depending on the payment scheme, Other data may a so be used in the calculation, including:
A Terminal LJnpredictable Number, for near-field-communication (NFC) transactions An Apple Pay server nonce, for transactions within apps
These security codes are provided to the payment network and to the card issuer, which allows the issuer to verify each transaction. The length Qf these security codes may vary based on the type of transaction.

Appfe PIBIIGfm SppUIItg
CONFIDENTIAL

DX-5492.129

APL-EG 08874902

If iPhone or Apple Watch is on and detects an INFC field, it presents the user with the requested card (if automatic selection is turned on for that card) or the default card, which is managed in Settings. The user can also go to the Wallet app and choose a card, or when the device is locked, can;
Double-click the Home button on devices with Touch IID
l3ouble-click the side button on devices with Face ID
Next, before information is transmitted, the user must authenticate using Touch ID, Face ll3, or their passcode. When Apple Watch is unlocked, doubie-clicking the side button activates the default card for payment. No payment information is sent without user a ut h e A t IcatoI A.
After the user authenticates, the l3evice Account Number and a transaction-specific dynamic security code are used when processing the payment. Neither Apple nor a user's device sends the full actua credit or debit card numbers to merchants. Apple may receive B AQAymous tl'BnsactlQA inforITIatloA sLIch Bs the Bppl Qxlmate tllTIe Bncl location of th e transaction, which helps improve Apple Pay and other Apple products and services.
Apple Pay can also beused to make payments on iPhone, iPad, Mac, and Apple Watch apps. When users pay within apps using Apple Pay, Apple receives the encrypted transaction information. Before that information is sent to the developer or merchant, Apple reencrypts the tl"Bnsactlon with a cleveloper-speclflc key. Apple Pay I'etalns BAQAyrnlous transactloA information, such as approximate purchase amount. This information can't be tied to the user and never includes what the user is buying.
When an app initiates an Apple Pay payment transaction, the Apple Pay servers receive the encrypted transaction from the device prior to the merchant receiving it. The Apple Pay servers then reencrypt the transaction with a merchant-specific key before relaying it to the merchant.
When an app requests a payment, it calls an API to determine whether the device supports Apple Pay and whether the user has credit or debit cards that can make payments on a paymen't Aetwol'k Bcceptecl by the ITlerchant. The Bpp I"equests Bny pieces Qf InforITIatlon lt needs to process and fulfill the transaction, such as the billing and shipping address, and contact information. The app then asks iQS, iPadQS, or watchQS to present the Apple Pay sheet, which requests information for the app as well as other necessary information, such as the cal'cl to use.
At this time, the Bpp Is pl"eseAted with city, stBte, Bncl zip cocle InforIYIatloA to calculate the final shipping cost. The full set of requested information isn't provided to the app until the user authorizes the payment with Touch ID, Face ll3, or the device passcode. After the payment is authorized, the information presented in the Apple Pay sheet is transferred to the merchant.

Appfe PIBIIGfm SppUIIt v
CONFIDENTIAL

DX-5492.1 30

APL-EG 08874903

When the user authorizes the payment, a call is made to the Apple Pay servers to obtain a cryptographic nonce, which is similar to the value returned by the NFC terminal used for instol'6 tl"Bnsactlons. The AQAce, along with Qthef' tl'Bnsactlon clata, Is passecl to the SecUf'6 Element to generate a payment credential that's encrypted with an Apple key When the encrypted payment credential comes out of the Secure Element, it's passed to the Apple Pay servers, which decrypt the credential, verify the nonce in the credential against the nonce originally sent by the Apple Pay servers, and reencrypt the payment credential with the merchant key associated with the Merchant ID. The payment is then returned to the device, which hands it back to the app through the APII. The app then passes it along to the merchant system for processing. The merchant can then decrypt the payment credential with its private key for processing. This, together with the signature from Apple's servers, allows the merchant to verify that the transaction was intended for this particu ar merchant.
The APls require an entitlement that specifies the supported Merchant IDs. An app can also include additional data (such as an order number or customer identity) to send to the Secure Element to be signed, ensuring that the transaction can't be diverted to a different customer. This is accomplished by the app developer, who can specify applicationData on the PKPaymentRequest. A hash of this data is included in the encrypted payment data. The merchant is then responsible for verifying that their applicationData hash matches what' s IACIUclecl In the payITlent clata.
Apple Pay can be used to make payments atwebsites on iPhone, iPad, Apple Watch, and Mac computers with Touch ID. Apple Pay transactions can also start on a Mac and be completed on an Apple Pay -- enabled iPhone or Apple Watch using the same iCloud account.
Apple Pay on the web requires that all participating websites register with Apple. After the domain is registered, domain name validation is performed only after Apple issues a TLS client certificate. Websites supporting Apple Pay are required to serve their content over HTTPS. For each payment transaction, websites need to obtain a secure and unique merchant session with an Apple server using the Apple-issued TLS client certificate. M 6 I c h 3 A t s 6 s s I 0 A cl 3 t B Is s I g A 6 cl Q y Apple . After 3 fTI 6 I'c h 3 A t s 6 s s I 0 A s I g A3tLI'6 Is v 6 r I f I 6cl, 3 website may query whether the user has an Apple Pay -- capable device and whether they have 3 CI'ecllt, cleblt, Ql'pl'epalcl caf'cl Bctlvatecl QA 'theclevlce. No Qthel' cletalls al'6 shal'ecl. lf the user doesn't want to share this information, they can disable Apple Pay queries in Safari privacy settings on iPhone, iPad, and Mac devices.
After a merchant session is validated, all security and privacy measures are the same as when 3 Llsel' pays wl thin Bn Bpp.
If the User Is transITIlttlng payITIeAt-I'elatecl Infol'IYIatlQA frofTI 3 Mac to Bn IPhone Ql' Apple Watch, Apple Pay I-landoff uses the end-to-end encrypted Apple Identity Service (IDS) protocol to transmit payment-related information between the user's Mac and the authorizing device. IDS uses the user's device keys to perform encryption so no other device can decrypt this information, and the keys aren't available to Apple. Device discovery for Apple Pay Handoff contains the type and unique identifier of the user's credit cal'cls along with sQIYIe ITIetaclata. The clevlce-speclflc BCCQLIAt number of the Usef's carel isn't shared, and it continues to remain stored securely on the user's iPhone or Apple Watch. Apple also securely transfers the user's recently used contact, shipping, and billing addresses over iCloud Keychain.

Apple PIBIIGI m SppUI Itg
CONFIDENTIAL

DX-5492.1 31

APL-EG 08874904

After the user authorizes payment using Touch ID, Face ID, a passcode, or double-clicking the side button on Apple Watch, a payment token uniquely encrypted to each website's merchant certificate is securely transmitted from the user's iPhone or Apple Watch to their Mac and then delivered to the merchant's website.
Qnly devices in proximity to each other may request and complete payment. Proximity is determined through Bluetooth Low Energy (BLE) advertisements.

To transmit data from supported passes to compatible NFC terminals, Apple uses the Apple Value Added Services (Apple VAS) protocol. The VAS protocol can be implemented on contactless termina s and uses NFC to communicate with supported Apple devices. The VAS protocol works over a short distance and can be used to present contactless passes Inclepenclently or Bs part of Bn Apple Pay transaction.
When the device is held near the NFC terminal, the terminal initiates receiving the pass I n f 0 rITIBt Io n b y s e n cl Inga I'e cl Liest f o I' a p B s s. I f t h e u s e r h B s a p B s s w I t h t h e p B s s p I'0 v I cleI's identifier, the user is asked to authorize its use using Touch ID, Face ID, or a passcode. The pass information, a timestamp, and a single-use random ECDH P-256 key are used with the pass provider's public key to derive an encryption key for the pass data, which is sent to the terminal.
From iQS 'l2 to and including iQS 'l3, users may manually select a pass before presenting it to the merchant's NFC terminal. In iQS 13.1 or later, pass providers can configure manually selected passes to either require user authentication or be used without authentication.

Credit, debit, and prepaid cards added to the Secure Element can be used only if the Secure Element is presented with authorization using the same pairing key and Authorization Random (AR) value from when the card was added. Qn receipt of a new AR value, the Secure Element marks any previously added cards as deleted. This allows the operating system to instruct the Secure Enclave to render cards unusable by marking its copy of the AR as invalid under the following scenarios:

When the passcode isdisabled When the password is disabled The user signs out of ioloud The user selects Erase All Content and Settings The device is restored from Recovery mode Llnpairing

Device iPhone, iPad, Apple Watch
iPhone, iPad, Mac, Apple Watch iPhone, iPad, Apple Watch iPhone, iPad, Mac, Apple Watch Apple Watch

Appfe PIBdcf m Secuf lry
CONFIDENTIAL

DX-5492.1 32

APL-EG 08874905

Users can suspend Apple Pay on iPhone, iPad, and Apple Watch by placing their devices in Lost Mode using Find My. Llsers also have the ability to remove and erase their cards from Apple Pay using Find My, iCloud.corn, or directly on their devices using the Wallet app. Qn Apple Watch, cards can be removed using iCloud settings, the Apple Watch app on iPhone, or directly on the watch. The ability to make payments using cards on the device is suspended or removed from Apple Pay by the card issuer or respective payment network, even if the device is off line and not connected to a cellular or Wi-Fi network. Users can also call their card issuer to suspend or remove cards from Apple Pay.
When a user erases the entire device -- using Erase All Content and Settings, using Find My, or restoring their device -- iPhone, iPad, iPod touch, Mac, and Apple Watch instruct the Secure Element to mark all cards as deleted. This has the effect of immediately changing the cards to an unusable state until the Apple Pay servers can be contacted to fully erase the cards from the Secure Element. Independently, the Secure Enclave marks the AFI as invalid so that further payment authorizations for previously enrolled cards aren't possible. When the device is online, it attempts to contact the Apple Pay servers to ensure that all cal'ds ln the SecLII'e EIBITIent af'e erased.
In iQS 'I'l.2 or later, iPadQS 'l3.'I or later, and watchQS 4.2 or later, Apple Pay can be used on an iPhone, iPad, or Apple Watch to send, receive, and request money from other users. When a user I'ecelves lYloney, lt's aclclecl to an Apple Cash accoLInt that can be accessecl In the Wallet app or within Settings > Wa let 5 Apple Pay across any of the e igible devices the user has signed in with their Apple ID.
In iOS 'l4, iPadQS 'l4, and watchOS 7, the organizer of an iCloud family who has verified their identity can enable Apple Cash for their family members under the age of 'I8. Optionally, the organizer can restrict the money sending capabilitiies of these users to family members only or contacts only. If the family member under the age of 18 goes through an Apple ID account recovery, the organizer of the family must manually reenable the Apple Cash card for that user. If the family member under the age of 'I8 is no longer part of the iCloud family, their Apple Cash balance is automatically transferred to the ol'gaAIzel' s accoulnt.
When the user sets up Apple Cash, the same information as when the user adds a credit or debit card may be shared with our partner bank Green Dot Bank and with Apple Payments Inc., a wholly owned subsidiary created to protect the user's privacy by storing and processing information separately from the rest of Apple, and in a way that the rest of Apple doesn't know. This information is used only for troubleshooting, fraud prevention, and regulatory purposes.

Aopfe PIBIIGfm SPCUIItg
CONFIDENTIAL

DX-5492.1 33

APL-EG 08874906

To use person-to-person payments and Apple Cash, a user must be signed in to their ICIQLIGI accoLInt GA an Apple Cash -- cQITlpatlble clevfce and have two-fac'tor aLlthentlcatloA set up on the iCloud account. Money requests and transfers between users are initiated from within the Messages app or by asking Siri. When a user attempts to send money, iMessage displays the Apple Pay sheet. The Apple Cash balance is always used first. Ilf necessary, additional funds are drawn from a second credit or debit card the user has added to the Wallet app.
The Apple Cash card in the Wallet app can be used with Apple Pay to make payments in stores, in apps, and on the web. Money in the Apple Cash account can also be transferred to a bank accGUAt. IA aclclltlon to ITIQAey beIAg I'BcBIvecl fl'QIYI aAothef' Llsef", money caA be added to the Apple Cash account from a debit or prepaid card in the Wallet app.
Apple Payments Inc. stores, and may use, the user's transaction data for troubleshooting, fl'aUGI pl'Bventlon, ancl I'BgLIIatory pUrposes once a transaction Is cQIYlpletecl. The I'Bst Qf Apple doesn't know who the user sent money to, received money from, or where the user made a purchase with their Apple Cash card.
When the user sends money with Apple Pay,adds money to an Apple Cash account, or tf'ansfel's IYIGAey to a baAk accoUnt, a call Is IYIacle to the Apple Pay servers to obtain a cryptographic nonce, which is similar to the va ue returned for Apple Pay within apps. The nonce, along with Qthef' tl'ansactlon clata, Is passecl 'to the Secure EIBITlent to generate a payment signature. When the payment signature comes out of the Secure Element, it' s passed to the Apple Pay servers The authentication, integrity, and correctness of the transaction is verified through the payment signature and the nonce by Apple Pay servers, Money transfer is then initiated, and the user is notified of a completed transaction.
If the transaction involves:
A debit card for adding money to Apple Cash
Providing supplemental money if the Apple Cash balance is insufficient An encrypted payment credential is also produced and sent to Apple Pay servers, similar to how Apple Pay works within apps and websites.
After the balance of the Apple Cash account exceeds a certain amount or if unusual activity is detected, the user is prompted to verify their identity. Information provided to verify the user's identity -- such as social security number or answers to questions (for example, to confirm a street name the user lived on previously) -- is securely transmitted to the Apple partner and encrypted using their key. Apple can't decrypt this data. The user is prompted to verify their identity again if they perform an Apple II3 account recovery, before regaining access to their Apple Cash balance.

Appfe PIBIIGI m SppUI IIX
CONFIDENTIAL

DX-5492.1 34

APL-EG 08874907

In iQS 'l2.4 or later, macQS 10.'l4.6 or later, and watchQS 5.3 or later, Apple Card can be used with Apple Pay to make payments in stores, in apps, and on the web.
To apply for Apple Card, the user must be signed into their iCloud account on an Apple Paycompatible iQS or iPadOS device and have two-factor authentication set up on the iCloud account. When the application is approved, Apple Card is available in the Wallet app or within Settings > Wallet 8 Apple Pay across any of the eligible devices the user has signed in with their Apple ID.
When a user applies for Apple Card, user identity information is securely verified by Apple's identity provider partners and then shared with Goldman Sachs Bank USA for the purposes of identity and credit evaluation.
Information such as the social security number or ID document image provided during the application iis securely transmitted to Apple's identity provider partners and/or Goldman Sachs Bank USA encrypted with their respective keys. Apple can't decrypt this data.
The income information provided during the application, and the bank account information used for bill payments,,are securely transmitted to Goldman Sachs Bank USA encrypted with their key. The bank account information is saved in the keychain. Apple can't decrypt this data.
When adding Apple Card to the Wallet app, the same information as when a user adds a credit or debit card may be shared with the Apple partner bank Goldman Sachs Bank USA and with Apple Payments Inc. This information is used only for troubleshooting, fraud pl'eventlon, ancl I'egUIatol"y pUrposes.
A physical card can be ordered from Apple Card in the Wa let app. After the user receives the physical card, it's activated using the NFC tag present in the bifold envelope of the physical cal'cl. The tag Is UnlqUe pel' cai'd ancl can't be Llsecl to activate anothei' Usel's cal'cl. Alternatively, the card can be manually activated in the Wallet settings. Additionally, the user can also choose to lock or unlock the physical card at any time from the Wallet app.
Payments due on the Apple Card account can be made from the Wallet app in iOS with Apple Cash and a bank account. Bill payments can be scheduled as recurring or as a
one-tIIYle payment at a specific elate with Apple Cash BAcl a baAk accoLIAt. When a Usel'
makes a payment, a call is made to the Apple Pay servers to obtain a cryptographic nonce similar to Apple Cash. The nonce, along with the payment setup details, is passed to the Secure Element to generate a signature. When the payment signature comes out of the Secure Element, it's passed to the Apple Pay servers. The authentication, integrity, and correctness of the payment are verified through the signature and the nonce by Apple Pay servers, and the order is passed on to Goldman Sachs Bank USA for processing
Displaying the Apple Card number details in the pass using the Wallet app requires user authentication with Face ID, Touch IID, or a passcode. It can be replaced by the user in the card information section and disables the previous one.

Apple PIBtfGI tH SpcUI Itg
CONFIDENTIAL

DX-5492.1 35

APL-EG 08874908

Adding transit and student ID cards to Wallet
TI QIlSlt Gelt dS In many global markets,, users can add supported transit cards to the Wallet app on supported models of iPhone and Apple Watch. Depending on the transit operator, this. may be done by transferring the value and commuter pass from a physical card into its digital Apple Wallet representation or by provisionirig a new transit card irrto the Wallet app from the VVallet app or the transit card issuer's app. After transit cards are added to the Wallet app, users can ride transit simply by holding their iPhone or Apple Watch near the transit reader. Some cards can also be used to make paymerrts.
Added transit cards are associated with a user's ICloud account. If the user adds more than one card to the Wallet app, Apple or the tr'ansit card issuer may be able to link the user'.s personal information and the associated account information between cards. Transit cards and transactions are protected by a set of hierarchical cryptographic keys.
During the process of transferring the balance 'from a physical card to the Wallet app, users are reqluired to enter card specific iriforrnation. Users may also need to provide personal information for proof of card possession. When transferring passes from iPhone to Apple N(etch, both devices must be onfin re during transfer.
The balance can be recharged with funds from credit, debit and prepaid cards through Wallet or from the transit card Issuer's app. To understand the security of reloading the balance. when using Apple Pay, see. Paying with cards within apps. To learn how the transit card is provisioned from within the transit card issuer's app, see Adding credit or debit cal cis from a cal'cl issuer's app.
If provisioning from a physical card is supported, the trarisit card issuer has the cryptographic keys needed to authenticate the physical card and verify. the user's entered data. After the data is verified, the system can create a Device Account Number for the Secure Element and activate the newly added pass in the Wallet app with the transferred balance. In some cities, after provisioning. from the physical card is complete, the physical card is. disabled.
At the end of either type of prov'isioning, If the transit card balance Is stored on the device, it's encrypted and stored to a designated applet in the Secure Element The transit operator has the keys to perform cryptographic operations ori the card data for balance transactions.
By default, users benefit from the seamless Express Transit experience that allows them to pay and ride without reqluiring Touch ID, Face ID, or a passcode. Information such as recently visited stations, transaction history, and additional tickets may be accessed by any nearby contactless card reader with Expr'ess Mode enabled. Users can enable the Touch ID, Face ID, or passcode authorizatiorl requirement In the W'allet. 5. Apple Pay settings by disabling Express Transit.
As with other Apple Pay cards, users can suspend or remove transit cards by:
Erasing the device remotely with Find My · Enabling Lost Mode with Find My
Entering a mobile device management (MDM) remote wipe command Removing all cards from their Apple ID account page
Apple Platform Security
CONF I l3ENTIAL

Removing all cards fram IClaud.corn Removing all cards from the Wallet app · Removing the card in the issuer's app Apple Pay servers notify the transit operator ta suspend or disable those cards. If a user removes a transit card from an online device, the balance can be recovered by adding it back to a device signed in with the same Apple ID. If a device is aff line, powered aff, or unusable,,recovery may not be possible.
Credit and debit cards
In some cities, transit readers accept EMV (smart) cards to pay far' tr'ansit rides.- When users present an EMV credit or debit card to those readers, user authentication is required just as with ePay with credit and debit cards in the stores."
In jGS 12 3 or later, some existing EMV eredjt/debit cards in the Wallet app can be enabled for Express Transit, which allows the user to pay for a trip at supported transit operators without requiring Touch ID, Face ID, ar a passcode. When a user provisions an EMV credit. or debit card, the first card provisioned to the Wallet app is enabled for Express Transit. The user can tap the More button on the front of the card in the Wallet app and disable Express Transit. far that card by setting Express Transit Settings ta None. The user can also select a different credit ar debit card as their Express Transit card via the Wallet app. Touch II3, Face ID,,or a passcode is. r'equlred ta reenable or select a different card for Express Transit,
Apple Card and Apple Cash are eligible far Express Transit.
Student 10 cards
In iOS 12 ar later,,students, faculty, and staff at participating campuses can add their student ID card to the Wallet app on supported models of iPhone and Apple Natch ta access locations and pay wherever their card is accepted.
A user adds their student ID card ta the Wallet app through an app provided by the card issuer or partjcjpating school. The technical process by which thjs occurs js the same as the one described in Adding credit or debit cards from a card issuer's app. In addition, issuing apps must support two-factor authentication on the accounts that guard access ta their student IDs. A card may be set up simultaneously on up to any two supported Apple devices signed in with the same Apple ID.
When a student ID card is added ta the Wallet app, Express Mode is turned an by default. Student ID cards ln Express Mode interact with accepting terminals without Touch ID, Face ID, passcode authenticatian, or double-clicking the side button on Apple Watch. The user can tap the More button an the front ef the card in the Wallet app and turn off Express Made to disable this feature. Touch ID,,Face ID, ar a passcade is required to reena'ble Express Mode.
Student ID cards can be disabled or removed by:
Erasing the device remotelywith Find My
Enabling Lost Mode with Find My Receiving a mobile device management (MDM) remote wipe command · Riemovirlg all cards from their Apple ID account page
Apple Platform Security
CONF I l3ENTIAL

Removing all cards from iCloud.corn Removing all cards from the Wallet app RBITIovlng the cal'd In 'the IssLIBI' s app

Apple iMessage is a messaging service for IQS and IPadQS devices, Apple Watch, and Mac computel's. IMessage sLlppol" ts text 3AOI attachITIBAts sLIch as photos, contacts, locations, links,and attachments directly on to a message, such as a thumbs up icon. Messages appeal' Qn all Qf 3 usef's I'Bglsterecl devices so that 3 convef'satloA can be contlALIBOI floITI any of the user's devices. iMessage makes extensive use of the Apple Push Notification service (APNs). Apple doesn't log the contents of messages or attachments, which are protected by end-to-end encryption so no one but the sender and receiver can access them. Apple can't decrypt the data.
When a user turns on iMessage on a device, the device generates encryption and signing pairs of keys for use with the service. For encryption, there is an encryption RSA 1280bit key as well as an encryption EC 256-bit key on the INIST P-256 curve. For signatures, Elliptic Curve Digital Signature Algorithm (ECDSA) 256-bit signing keys are used. The private keys are saved in the device's keychain and only available after first unlock. The public keys are sent to Apple Identity Service (IDS), where they are associated with the user's phone number or email address,,along withthe device's APNs address.
As users enable additional devices for use with iMessage, their encryption and signing public keys, APNs addresses, and associated phone numbers are added to the directory service. Users can also add more email addresses, which are verified by sending a confirmation link. Phone numbers are verified by the carrier network and SIM. With some networks, this requires using SMS (the user is presented with a confirmation dialog if the SMS isn't zero rated). Phone number verification may be required for several system services in addition to iMessage, such as FaceTime and iCloud. All of the user's registered clevfces cllsplay an alef't message whBA 3 Aew clevfce, phoAB number, Qr GITIall aclclf'Bss Is 3 cl cl 6 c.l
Usef's staf"t 3 Aew IMessage convelf'sation by Bn'terlng an address or name. If they Bntel' 3 phone number or emaiil address, the device contacts the Apple Identity Service (IDS) to retrieve the public keys and APNs addresses for all of the devices associated with the aclclressee. If the Llself' BAtel's 3 AaIYIG, the clevlcB fll"st Llses the Llsel's CGA tac'ts app to gathef' the phone AUITlbers 3Acl BITIall aclclf'esses assoclatecl with that AaITIB 3Ad then gets the public keys and APNs addresses from IDS.

Appfe PIBIIGI m SppUI IIX
CONFIDENTIAL

DX-5492.1 38

APL-EG 08874911

The user's outgoing message is individual y encrypted for each of the receiver's devices. The public encryption keys and signing keys of the receiving devices are retrieved from IDS. Fol each receivllng clevlce, the sencllng clevice generates a ranclom 88-bit vaILIB aAcl uses lit as an HMAC-SHA256 key to construct a 40-bit value derived from the sender and receiver public key and the plaintext. The concatenation of the 88-bit and 40-bit values makes a 128-bit key, which encrypts the message with it using AES in Counter (CTR) Mode. The 40-bit value is used by the receiver side to verify the integrity of the decrypted plaintext. This per- message AES key is encrypted using RSA-QAEP to the publiic key of the receiving device. The combination of the encrypted message text and the encrypted message key is then hashed with SHA-'I, and the hash is signed with the Elliptic Curve Digital Signature Algorithm (ECDSA) using the sending device's private signing key. In iQS 13 or later and iPadQS 'l3.'I or later, devices may use an Elliptic Curve Integrated Encryption Scheme (ECIES) encryption instead of RSA encryption.
The resulting messages, one for each receiving device, consist of the encrypted message text, the encrypted message key, and the sender's digital signature. They are then dispatched to the APNs for delivery. Metadata, such as the timestamp and APNs routing information, isn't encrypted. Communication with APNs is encrypted using a forwardsecret TLS channel.

Appfe PIBtfpfm sppUIIt x
CONFIDENTIAL

DX-5492.1 39

APL-EG 08874912

APNs can only relay messages up to 4 or16 KB in size, depending on the iOS or iPadOS version. If the message text is too long or if an attachment such as a photo is included, the attachment is encrypted using AES in CTR mode with a randomly generated 256-bit key and uploaded to iCloud. The AES key for the attachment, its Uniform Resource Identifier (URI), and an SHA-1 hash of its encrypted form are then sent to the recipient as the contents of an iMessage, with their confidentiality and integrity protected through normal iMessage encryption, as shown in the following diagram.

Attachment
encrypted with random key

loloud

User 1

Signed and encrypted message for user 2 with URI and
key for anachment

User 2

Public key and APNs token
for user 1
Ice
How iMesssgesends end receives messages.

Public key and APNs token
for user 2

For group conversations, this process is repeated for each recipient and their devices.
On the receiving side, each device receives its copy of the message from APNs and, if ncocaeary, rctriovcs thc attachment from iCloud. Thc incoming phone numbor or email address of the sender is matched to the receiver's contacts so that a name can be displayed when possible.
As with all push notifications, the message is deleted from APNs when it's delivered. Unlike other APNs notifications, however, iMessage messages are queued for delivery to off line devices. Messages are stored for up to 30 days.

Apple Pleue m Secs Sy
CONFIDENTIAL

DX-5492.140

140
APL-EG 08874913

SecureiMessage name and photo sharing
iMessage Name and Photo Sharing allows a user ta share a Name and Photo using iMessage The user may select their Me Card information, ar- custamize the name and include any image they ahaase. iMessage Name and Photo sharing uses atwa-stage system to distribute the name and photo.
The data is subdivided in fields, each encrypted and authenticated separately as well as authenticated together with the process below. Ther'e are three fields:
· Name
· Photo
Photo filename
A first step of the data creation is to randomly generate a record 128-bit key on the device. This record key is then derived with HKI3F-HMAC-SHA256 to create three subkeys: Key 'I:Key 2:Key 3 = HKQF(record key,,"nicknames"). Far each field,,a random 96-bit Initialization Vector (IV) is generated and the data is encrypted using AES-CTR and Key 1. A message authentication code {MAC) is then computed with HMAC-SHA266 using Key 2 and cav'erlng the field name, the field IV, and the field ciphertext. Finally, the set af individual 'field MAC values are concatenated and their MAC ls computed with HMACSHA266 using Key 3. The 286-bit MAC is stored along side the encrypted data. The first 128 bits of this MAC is used as Recardli3.
This encrypted recar'd is then star'ed in the CloudKit public database under the RecordID. This record is never mutated, and when the user- chooses ta change their name and photo, a new encrypted record is gerierated each time. When user 1 ehaoses to share their name and photo with user 2, they send the record key along with the recardll3 inside their iMessage payload, which ls encrypted
A'hen user 2's device receives this iMessage payload, it notices that the payload cantains a Nickname and Photo recordlD and key.User 2's device then goes aut to the public ClaudKit database ta retrieve the encrypted name and photo at the record ID and sends it across usllig IMessage.
After the message is retrieved, user 2's device decrypts the payload and verifies the signature using the recordlD itself. If this passes, user 2 is presented with the name and photo arid they can choose ta add this ta their contacts, or use it far Messages.

Secure BusinessChat using the Messages app
Business Chat is a messaging service that enables users to communicate with businesses using the Messages app. IIIfith Business Chat, the user is always in contral af the conversation. They carl also delete the conversation and block the business from massaging them in the future. For privacy, the business daesn't receive the user's phone number, email address, ar iCIaud accaurft. Information. Instead, a custom unique identifier called the Opaque IQ is generated by the Apple Identity Service (II38) and shared with the business. The Opaq'ue ID is unique. to the relationship between the user's Apple II3 and the business's Business ll3, A user has a different Opaque ID for every business they cantact using Business Chat. The user decides if and when ta share personal identifying information with the. business.

Apple Platform Security

CONF I l3ENTIAL

DX-5492.141

Business Chat supports Managed Apple IDs from Apple Business Manager and determines whether they are enabled for iMessage and FaceTime in Apple School Manager
Messages sent to the business are encrypted between the user's device and Apple's ITIessaglng servel's, Llslng the same security ancl Apple messagIAg sel'vels as IMessages. Apple messaging servers decrypt these messages in RAM, and relay them to the business over an encrypted link using TLS 1.2. Messages are never stored in unencrypted form while transiting through Apple's Business Chat service. Businesses' replies are also sent using TLS 'l.2 to the Apple messaging servers, where they are encrypted using the unique public keys of each recipient device.
lf user devices are online, the message is delivered immediately and isn't cached on the Apple messaging servers. If a user's device isn't online, the encrypted message is cached for up to 30 days to enable the user to receive it when the device is back online. As soon as the device is back online, the message is delivered and deleted from cache. After 30 clays, an Llnclellverecl cachecl ITIessage expires aAd Is perlTlanentiy clBIetecl.
The Business Chat service never stores conversation history.
FaceIime security
FaceTime is Apple's video and audio calling service. Like iMessage, FaceTirne calls use the Apple Push Notification service (APNs) to establish an initial connection to the user's registered devices. The audio/video contents of FaceTirne calls are protected by endto-end encryption, so no one but the sender and receiver can access them. Apple can' t clecl'ypt the clata.
The initial FaceTime connection is made through an Apple server infrastructure that relays data packets between the users' registered devices. Using APNs notifications and Session Traversal Lltilities for NAT (STLIN) messages over the relayed connection, the devices verify their identity certificates and establish a shared secret for each session. The shared secret is used to derive session keys for media channels streamed using the Secure Real-time Transport Protocol (SRTP). SRTP packets are encrypted using AES256 in Counter Mode and HMAC-SHA"I. Subsequent to the initial connection and security setup, FaceTime uses STUN and Internet Connectivity Establishment (ICE) to establish a peer-to-peer connection between devices, if possible.
Group FaceTime extends FaceTime to support up to 33 concurrent participants. As with classic oAB-to-oAB FaceTIITIB, ca Is al'e encl-to-BAcl BAcryptecl among the lnvltecl participants' devices. Even though Group FaceTime reuses much of the infrastructure and design of one-to-one FaceTime, Group FaceTime calls feature a new key-establishment mechanism built on top of the authenticity provided by Apple Identity Service (IDS). This protocol provides forward secrecy, meaning the compromise of a user's device won't leak the contents of past calls. Session keys are wrapped using AES-SIV and distributed among participants using an ECIES construction with ephemeral P-256 ECDH keys.
When a new phone number or email address is added to an ongoing Group FaceTime call, active devices establish new media keys and never share previously used keys with the newly invited devices.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.142

APL-EG 08874915

The Find My app combines Find My iPhone and Find My Friends into a single app in iQS, iPadQS, and macQS. Find My can help users locate a missing device, even an off line Mac. An online device can simply report its location to the user via iCloud. Find My works off line by sending out short range Bluetooth signals from the missing device that can be detected by other Apple devices in use nearby. Those nearby devices then relay the detected location of the missing device to iCloud so users can locate it in the Find My app -- all while protecting the privacy and security of all the users involved Find My even works with a Mac that is off line and asleep.
Using Bluetooth and the hundreds of millions of iOS, iPadQS, and macQS devices in active uise Bl'OLIACIthe woi"Icl, the Lisei' cBA locate a missing device even If It caA't connect to a Wi-Fi or cellular network. Any iQS, iPadQS, or macOS device with "off line finding" enabled in Fiind My settings can act as a "finder device." This means the device can detect the presence of another missing off line device using Bluetooth and then use its network connection to report an approximate location back to the owner. When a device has off line finding enabled, it also means that it can be located by other participants in the same way. This entire interaction is end-to-end encrypted, anonymous, and designed to be battery and data efficient, so there is minimal impact on battery life cellular data plan usage and user privacy is protected.
hfote: Find My may not be available in all countries or regions.
Find My is built on a foundation of advanced public key cryptography. When off line finding is enabled in Find My settings, an elliptic curve (EC) P-224 private encryption key pair noted (d,P) is generated directly on the device where cf is the private key and P is the public key. Additionally, a 256-bit secret SK, and a counter, is initialized to zero. This private key pair and the secret are never sent to Apple and are synced only among the user's other devices in an end-to-end encrypted manner using iCloud Keychain. The secret and the counter are used to derive the current symmetric key SK, with the following recursive construction: SK, = KDF(SK, ,,, "update")
Based on the key SK,, two large integers u, and v, are computed with (upv,) = KDF(SK,, "diversify"). Both the P-224 private key denoted CI and corresponding public key referred to as P are then derived using an affine relation involving the two integers to compute a shortlived key pair: The derived private key is d,, where d, = u, ' d + v, (modulo the order of the P-224 curve) and the corresponding public part is P, and verifies that P, = u,*P + v,*o.

v Appie PIBtfGI tH SppUI It
CONFIDENTIAL

DX-5492.143

APL-EG 08874916

When a device goes missing and can't connect to Wi-Fi or cellular -- for example, a MacBook Pro left on a park bench -- it begins periodically broadcasting the derived public key P, for a limiited period of time in a Bluetooth payload. By using P-224, the public key representation can fit into a single Bluetooth payload. The surrounding devices can then help in the finding of the off line device by encrypting their location to the public key. Approximately every 15 minutes, the public key is replaced by a new one using an incremented value of the counter and the process above so that the user can't be tracked by a persistent identifier. The derivation mechanism prevents the various public keys P, from being linked to the same device.
ln BclclltloA to rnaklng sure that location lnforrnatlon BAcl Qthet' clata Bl'e fully encrypted, pal'tlclpan'ts Iclen titles feITIBIA private froIYI each othel' Bncl from Apple. The tl"Bfflc sent 'to Apple by finder devices contains no authentication information in the contents or headers. As a result, Apple doesn't know who the finder is or whose device has been found Further, Apple doesn't log information that would revea the identity of the finder and retains no information that would allow anyone to correlate the finder and owner. The device owner receives only the encrypted location information that's decrypted and displayed in the Find My app with no indication as to who found the device.

x Apple PIBIIGI tH SPCUI It
CONFIDENTIAL

DX-5492.144

APL-EG 08874917

Using Find My to locate missing Apple devices
Any Apple devices within Bluetooth range that have off line finding enabled can detect a signal from another Apple device configured to allow Find My and read the current broadcast key P, Using an ECIES construction and the public key P, from the broadcast, the finder devices encrypt their current location information and relay it to Apple. The encrypted location is associated with a server index which is computed as the SHA266 hash of the P-224 public key P, obtained from the Bluetooth payload. Apple never has the decryption key, so Apple can't read the location encrypted by the finder. The owner of the missing device can reconstruct the index and decrypt the encrypted location.

EC P-224 derived public bsy
0
Nearby device
Now Find My locates devices.

EC P-224 FindMy
public key + Secret + Counter

Apple Plaue m Seep lv
CONFIDENTIAL

DX-5492.145

145
APL-EG 08874918

When trying to locate the missing device, an expected range of counter values is estimated for the location search period. With the knowledge of the original private P-224 key d and secret values SK, in the range of counter values of the search period the owner can then reconstruct the set of values (dn SHA256(P,.)) for the entire search period. The owner device used to locate the missing device can then perform queries to the server using the set of index values SHA256(P,) and download the encrypted locations from the server. The Find My app then locally decrypts the encrypted locations with the matching private keys d, and shows an approximate location of the missing device in the app. Location reports from multiple finder devices are combined by the owner's app to generate a more precise location.

How the owner gets the device location trom the Find MV app.

Owner

Locating devices that are off line
If a user has Find My iPhone enabled on their device, off line finding is enabled by default when they upgrade a device to iOS 13 or later, iPadOS 13.1 or later, and macOS 10.15 or later. This ensures that every user has the best possible chance to locate their device if it goes missing. However, if at any time the user prefers not to participate, they can disable off line finding in Find My settings on their device. When off line finding is disabled, the device no longer acts as a finder nor is it detectable by other finder devices. However, the user can still locate the device as long as it can connect to a Wi-Fi or cellular network.
When a missing off line device is located, the user receives a notification and email message to let them know the device has been found. To view the location of the missing device, the user opens the Find My app and selects the Devices tab. Rather than showing the device on a blank map as it would have prior to the device being located, Find My shows a map location with an approximate address and information on how long ago the device was detected. If more location reports come In, the currem location and time stamp both update automatically. Although users can't play a sound on an off line device or erase it remotely, they can use the location information to retrace their steps or take other actions to help them recover it.

Apple Plane m Seep lv
CONFIDENTIAL

DX-5492.146

lee
APL-EG 088749(g

COlltlllUltY
Continuity security overview
Continuity takes advantage af technologies like iCloud, 8'luetoath, and Wi-Fi to enable users to continue an activity from ane device ta another, make and receive phone calls,, send and receive text. messages, and share a cellular internet connection.
Handoff security
Ovefvlew
With Handoff, when a user's iGS,, iPadQS, and rnacQS devices are near each other, the user can automatically pass whatever they' re working an fram ane device ta the other. Handoff lets the user switch devices and instantly continue working.
%hen a user signs in to IClaud an a secand Handaff-capable dev'ice, the twa devices establish a Bluetooth Law Energy (BLE) 4.2 pairing out-of-band using APNs, The individual messages are encrypted much like messages in iMessage are. Af'ter the devices are paired, each device generates a symmetric 256-bit AES key that gets stared in the device's keychain. This key can encrypt and authenticate the BLE advertisements that communicate the device's current activity to other' iClaud pair'ed devices using AES256 in GCM mode, with replay protection measures
The first time a device receives an advertisement fram a new key, it establishes a BLE
connection to the originating device and performsan advertisement encryption key
exchange. This connection is secured using standard BLE 4.2 encryption as well as encryption af the individual messages, which is similar to haw IMessage is encrypted. In some situations, these messages are sent using APNs instead of BLE. The activity payload is protected and transferred in the same way as an iMessage.
Handoff between native apps and websites Handaff allows an rGS, lPadGS, or macGS rrative app to resume user activity on a webpage
in domains legitimately cantrolled by the app developer. It also allaws the native app user activity ta be resurn'ed ln a AID, bll'owsel.
To preverrt native apps from claimnig to resume websites not controlled by the developer,
the app must demonstrate legitimate control over the web domains it wants to resume. Control over a website domain is established using the mechanism for shared web credentials. Far details, see App access to saved passwords. The system must validate an app's domain name coritral before the app is permitted ta accept user activity Handoff.
The source of a webpage Handoff can be any browser that has adapted the Handaff APls. When the user views a webpage, the system advertises the domain name of the webpage in the encrypted Handoff advertisement bytes. Gnlryy the user's other devices can decrypt the advertisement bytes.

Apple Platform Sec or lty

147

CGNFI l3ENTIAL

DX-5492.147

C tn a I'ecelvIAg clevicB, the systeIYI cletects that an Installecl Aatlve app accepts Hancloff from the aclvel"tlsecl cIQITIain AaITIB ancl clisplays that native app IcoA as the Hancloff option. When launched, the native app receives the full URL and the title of the webpage. No other information is passed from the browser to the native app.
In the opposite direction, a native app may specify a fallback URL when a Handoff I'ecelving clevlce cloesA't have the saITIB native app installed. IA this case, the systeITI displays the user's default browser as the Handoff app option (if that browser has adopted Handoff APIs). When Handoff is requested, the browser is launched and given the fallback URL provided by the source app. There iis no requirement that the fallback URL be limited to domain names controlled by the native app developer.
Handoff of lergel data
In addition to using the basic feature of I-landoff, some apps may elect to use APIs that support sending larger amounts of data over Apple-created peer-to-peer Wi-Fi technology (much like AirDrop). For example, the Mail app uses these APIs to support Handoff of a mail draft, which may include large attachments.
When an app uses this facility, the exchange between the two devices starts off just as in Handoff. However, after receiving the initial payload using Bluetooth Low Energy (BLE), the receiving device initiates a new connection over Wi-Fi. This connection is encrypted (with TLS), which exchanges their iCloud identity certificates. The identity in the certificates is verified against the user's identity. Further payload data is sent over this encrypted connection until the transfer is complete,
Universal Clipboard leverages Handoff to securely transfer the content of a user's clipboard across devicBs so they caA copy on one clevlce and paste QA another. Content Is protected in the same way as other Handoff data and is shared by default with Universal Clipboard unless the app deve oper chooses to disallow sharing.
Apps have access to clipboard data regardless of whether the user has pasted the clipboard into the app. With Universal Clipboard, this data access extends to apps on the user's other devices (as established by their iCloud sign-in),

When a user's Mac, iPad, iPod touch, or HomePod is on the same Wi-Fi network as their iPhone, it can make and receive phone calls using the cellular connection on iPhone. Configuration requires the devices to be signed in to both iCloud and FaceTime using the same Apple IDaccount.
When an incoming call arrives, all configured devices are notified using the Apple Push Notification service (APNs), with each notification using the same end-to-end encryption as iMessage. Devices that are on the same network present the incoming call notification user interface. When the user answers the call, the audio is seamlessly transmitted from the user's iPhone using a secure peer-to-peer connection between the two devices.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.148

APL-EG 08874921

VVhen a call is answered on one device., ringing of nearby iCloud-paired dev'ices Is terminated by briefly advertising using HIuetoath Law Energy (BLE). The advertising bytes are ericrypted using the same method as Handaff advertisements.
Outgoing calls are also relayed to iPhone using APNs,,and audio is similarly transmitted over the secure peer'-to-peer link between devices. Users can disable phone calI relay on a device by turning off iPhone Cellular Calls in FaceTime settings.
iPhone Text Message Forwarding security
Text Message Forwarding automatically sends SMS text messages received on an iPhone ta e user's enrolled iPad, iPad touch, ar Mac. Each device must be signed in ta the iMessage service using the same Apple ID account. When Text Message Forwarding is turned an, enrollment ls automatic on devices within a user's cir'cle of trust if two;factor authentication is enabled. Otherwise, enrollment is verified on each device by entering a random six-digit numeric code generated by iPhone.
After devices are linked, IPhone ericrypts and forwards incomlrlg SMS text messages to each device, utilizing. the methods described in iMessage security overview. Replies are sent back ta iPhane using the same method, and then iPhane sends the reply as a text message usingthe carrier's'SMS transmission mechanism. Text Message Forwarding can be turned an or off in Messages settings.
instant Hotspot security
Instant Hotspot cannects other Apple devices to a personal iGS or iPadGS hatspot. iGS and iPadGS devices that support Instant Hotspot use Hluetoath Law Energy (HLE) to discover and communicate ta all devices that have signed in ta the same individual iCloud account or accounts used with Family Sharing (in iGS 13 and IPadGS). Compatible Mac computers with QS X 10.10 or later use the same technology ta discover and communicate with Instant Hatspat iOS and iPadGS devices.
Initially,,when a user enters Wi-FI settings an a device., it emits a BLE advertisement contairiirig arl identifier that all devices signed ln to the same ICIoud account agree uparl. The identifier is generated fram a DSID (Destination Signaling Identifier) that's tied to the iClaud account and rotated periodically. When other devices signed in to the same iClaud account are in close proximity and support Personal Hatspat, they detect the signal and respond, indicating the availability ta use Instant Hotspot.
When a user who isri't part af Family Sharing chooses an iPhene or iPad for Personal Hotspot, a f'equest ta turn on Personal Hatspat is sent ta that device. The request is sent across a link that. is encrypted using BLE encryption, and the request is encrypted in a fashion similar to iMessage encryption. The device then responds across the same BLE link using the same per-message encryption with Personal Hatspat connection information.

Apple Platform Security
CONF I l3ENTIAL

DX-5492.149

For users that are part of Famiy Sharing, Personal I-lotspot connection information is securely shared using a mechanism similar to that used by HomeKit devices to sync information. Specifically, the connection that shares hotspot information between users is secured with an ECDH (Curve255'l9) ephemeral key that is authenticated with the users' respective device-specific Ed255'l9 public keys. The public keys used are those that had previously synced between the members of Family Sharing using II3S when the Family Share was established.

The car keys feature is supported natively in supported iPhone devices and paired Apple Watch devices. Car keys are represented as passes (created by Apple on behalf of the automaker) in the Wallet app and support the full Apple Pay card life cycle (iCloud Lost Mode, Remote Wipe, local pass deletion, and Erase All Content and Settings). In addition to the standard Apple Pay card management, shared car keys can be deleted from the owner's iPhone, Apple Watch, and in the vehicle's Human Machine Interface (HMI).
Car keys can be used to unlock and lock the vehicle and to start the engine or set the vehicle IAto cll'Ive IYIocle. The "st anclal'cl tl'BAsactloA" Offers IYILltILIBI ButheAtlcatloA BAOI Is mandatory for engine start. Unlock and lock transactions might use the "fast transaction" when required for performance reasons.
Keys are created through pairing an iPhone with an owned and supported vehicle. All keys are created on the embedded Secure Element based on elliptic curve (NIST P-256) on-board key generation (ECC-OBKG), and the private keys never leave the Secure Element. Communication between devices and the vehicle use the NIFC standard, and key management uses an Apple to automaker server API with mutually authenticated TLS. After a key is paired to an iPhone, any Apple Watch paired to that iPhone can also receive a key. When a key is deleted either in the vehiicle or on the device, it can't be restored. Keys on lost or stolen devices can be suspended and resumed,,but reprovisioning them on a new device I'equlll'es B new pall'Ing Ql' shal'IAg.
Ownel PGII Ing
The owner must prove possession of the vehicle (the method is dependent on the Butomaker) Bncl can start the pall'Ing process In the ButolYIakel" s Bpp Llslng Bn 6IYIBII link received from the automaker or from the vehicle menu. In all cases, the Owner must pl'esent B coAfldentlal Qne-time pairing passwol'cl to the IPhone, which Is used to geAef'Bte a secure pairing channel using the SPAKE2+ protocol with the NIST P-256 curve. When using the app or the email link, the password is automatically transferred to the iPhone where it must be entered manually when pairing is started from the vehicle.

Apple PIBtfGI tH SppUI Itg
CONFIDENTIAL

DX-5492.1 50

APL-EG 08874923

Key sharing
The owner's paired fPhane can shar'e keys to eligible family members' and friends' iPhane. devices (and their- paired Apple Watch devices) by sending a device-specific invitation using iMessage and the Apple Identity 'Service (IDS). All shar'ing commands are exchanged using the end-ta-end encrypted 113$ feature. The owner's pair'ed iPhane keeps the 1138 channel from changing during the sharing process,
Upon acceptance af the invitation, the family member's ar friend's IPhane creates a digital key and sends the key creatiorl certlf'Icate chain back to the owner"s paired iPhane to verify that the key was created on an authentic Apple device. The awner's paired Iphone signs the ECC-public key af the other family member's ar friend's iPhone and sends the signature back to the family member's or friend's iPhone. The signing operation in the owner device requires user authentication (Touch ID, Face 113 or passcede entry) and a secure user intent described in Uses for Touch ID and Face ID. The authorization is requested when sending the invitation and is stared in the secure element for consumption when the friend device. sends back the signing request.
Key deletio.n
Keys can be deleted on the keyholder device from the owner device and in the vehicle. Deletions on the keyholder iPhone are effective immediately, even if the keyholder uses the key. Therefore a strong warning is shown before the deletion.
13eletians af keys Irl the vehfcfe depends on whether the autamaker requires the vehicle ta be online for the deletion or not.
In both cases,, the deletion on keyholder device ar vehicle is reported ta a key inventory ser'ver (KIS) an the autamaker side, whfch registers issued keys far a vehicle for insurance Pul'Poses.
The owner can request a deletion fram the back af the owner pass. The request ls first sent to the automaker for key removal Irl the vehicle. The conditions for removing the key from the vehicle are defined by the automaker. Only when the key is removed in the vehicle will the automaker server send a remote termination request to the keyhalder dev'ice.
When a key fs terminated in a device, the applet that manages. the digital car keys areates. a cryptographically signed termination attestation, which is used as proof af deletion by the autamaker and used ta remove the key fram the KTS.
Standard transactions
A secure channel between the reader and an IPhone is initiated by generating ephemeral
key pairs on the reader and the iPhone side. Using a key agreement method, a shared secret can be derived on both sides and used for generation of a shared symmetric key using Diffie-Hellman,, a key derivation function, and signatures fram the long-term key Bstabllshecl during paIring.
The ephemeral public key generated on the vehicle Side iS Sigried with the reader's lorigterm private key; which results in an authentication af the reader by the iPhone. Fram the IPharie perspective, ihiS p}'Gtacal fs cleslgr'iecl 'ta pl"'Bverit privacy-sensitive clata fl"GITI being revealed to an adversary intercepting. the communication.

Apple Platform Security
CONF I l3ENTIAL

DX-5492.153

Finally, the iPhone uses the established secure channel to encrypt its public key identifier along wllth the signatLlre computecl Qn a reacler's clata-clerlvecl challeAge ancl some
aclclltlonaI app- specificdata.This verification Qf the IPhone signature by the reacler allows
the reader to authenticate the device.
FB st t I 8 n 8 8 OII:on8
Thc IPhone generates a cryptogram basBcl on a secret previously sharecl clul'Ing a stanclarcl transaction. This cryptogram allows the vehicle to quickly authenticate the device in performance sensitive scenarios. Optionally, a secure channel between the vehicle and the device is established by deriving session keys from a secret previously shared during a standard transaction and a new ephemeral key pair. The ability of the vehicle to establish the secure channel authenticates the vehicle to the iPhone.
PI" IVG Cp
The key tracking server of the automaker doesn't store the device ID, SEIID, or Apple ID. It stores only a mutable identifier -- the instance CA identifier. This identifier isn't bound to any private data in the device or by the server, and it's deleted when the user wipes their device completely (using Erase All Contents and Settings).

Apple PIBtfGI tH SPCUI Itg
CONFIDENTIAL

DX-5492.1 52

APL-EG 08874925

In addition to the built-in safeguards Apple uses to protect data stored on Apple devices, there Bl'e ITIany IYIeasUI'es ol'gaAIzatlons can take to keep IAfoi'ITIatlon secUre Bs I't tl'Bvels to and from a device. All of these safeguards and measures fall under network security.
Users must be able to access corporate networks from anywhere in the world, so it' s
Importantto ensUre that they Bl'e BUthof'Izecl Bncl that thell' clata Is pf'Qtectecl OIUI'ing
transmission. To accomplish these security objectives, iQS, iPadQS, and macQS integrate proven technologies and the latest standards for both Wi-Fi and cellular data network connections. That's why our operating systems use -- and provide developer access to -- staAdal'cl Ae'twof'klAg pl'Qtocols fof' BUthentlcatecl, BUthol'Izecl, Bncl encl'yptecl CornIITUI A I CBtIQ AS.

MLS security
iQS, iPadQS, and macQS support Transport Layer Security (TLS 'I.G, TLS 1."I, TLS 'l.2, TLS 1.3) and Datagram Transport Layer Security (DTLS). The TLS protocol supports both AES128 and AES256, and prefers cipher suites with forward secrecy. Ilnternet apps such as Safari, Calendar, and Mall automatically use this protocol to enable an encrypted communication channel between the device and network services. High-level APIs (such as CFNetwork) make it easy for developers to adopt TLS in their apps, while low-level APIs (such as Network. framework) provide fine-grained control. CFNetwork disallows SSL 3, and apps that use WebKit (such as Safari) are prohibited from making an SSL 3 connection
In iOS 'I'I or later and macQS 'I0.13 or later, SHA-'I certificates are no longer allowed for TLS connections unless trusted by the user. Certificates with RSA keys shorter than 2048 bits are also disallowed. The RC4 symmetric cipher suite is deprecated in iQS 10 and macQS 10.'l2. By default, TLS clients or servers implemented with SecureTransport APls don' t have RC4 cipher suites enabled and are unable to connect when RC4 is the only cipher suite available. To be more secure, services or apps that require RC4 should be upgraded to use secure cipher suites. In iQS 'l2.'I, certificates issued after October 15, 20'I8, from a system-trusted root certificate must be logged in a trusted Certificate Transparency log to be allowed for TLS connections. In iQS 'l2.2, TLS 'l.3 is enabled by defau t for Network. framework and NSURLSession APIs. TLS clients using the SecureTransport AP)s can't use TLS 1.3.

Apple PIBIIGI m SppUI Itg
CONFIDENTIAL

DX-5492.1 53

APL-EG 08874926

App Transport Security provides default connection requirements.so. that apps adhere ta best practices far secure connections when using NSURLConnec'tion, CFURL, or NSURLSession APls. By default, App Transport Security limits cipher selection to include only suites that provide farward secrecy, specifically:
ECI3HE ECDSA AES and ECDHE RSA~ES in Galois/Counter Mode (BCM)
· Cipher Block Chaining (CBC) mode
Apps are able to disable the forward secrecy requirement per domain, in which case RSA AES is added to the set of available ciphers.
Servers must support TLS 'l.2 and forward secrecy, and certificates must be valid and signed using SHA256 or stronger with a minimum 2048-bit RSA key or 286-bit elliptic curve key.
Network connections that dan't Neet these requirements will fail .unless the app overrides App Transport Security Invalid certificates always result in a hard failure and na cannectian. App Transport Security is automatically applied to apps that are compiled for iQS 9 or liter and macQS 10.'l1 or later.
Certific8te v8lidity checking
Evaluating the trusted status of a TLS certificate. is performed in accar'dance. with established industry <endards, as set aut in RFC 5280, and incarparates emerging standards such as RFC 6962 (Certificate Transparency). In iGS 11 or later and maaGS 'l0.13 ar later,,Apple devices are periodically updated with a current list of revoked and constrained certifjcates, The list is aggregated from certificate revocation lists (CRLs), which are published by each of the built-in root certificate authorities trusted by Apple, as well as by their subordinate CA issuers The list may also include other constraints at Apple's discretion. Thjs lrlformatian is consulted whenever a network API function js used to make a secure connection. If there are too many revoked certificates from a CA to list individually,,a trust evaluation may instead require that an online certificate status response (QCSP) is needed, and if the response isn't available, the trust evaluation will fail.

Apple Platform Security
CONF I l3ENTIAL

DX-5492.154

IPv6 security
AII Apple operating systems support IPv6, imprlementlrlg several mechanisms to protect
the privacy, of users and the stability, of the netwarkrng stack. When Stateless Address Autaconfiguration (SLAAC3 is used, the IPv8 addresses of all interfaces are generated in a way that prevents tracking devices across networks and at the same time allows for a goad user experience by ensuring address. stability when no netwark changes take place. The. address generation algorithm is based on cryptagraphically generated addresses as of RFC 3972, enhanced by an interface-specific modifier to warrant that even different interfaces on the same. network eventually have different addr'esses. Furthermore, temporary addresses are created with a preferred lifetime of 24 hours, and these are used by default for any new cannectians. Aligried with the Private Wi-Fi address feature iritreduced iri iQS 14, IPadQS14,,and watchQS 7,a unique link-local address Is generated for every VN-Fi netWork that a device joins. The net@<ark's SSll3 is incorporated as an additional elemerlt for the address generation, similar ta the Network ll3 parameter as af RFC 7217. This approach is used in iQS 14, iPadQS 14, and watchQS 7.
To. pr'otect against attacks based on IPv6 extension headers and fragmentation, Apple devices implement protection measures specified in RFC 6980r RFC 7112, and RFC 8021I. Among other measures, these inhibit attacks where the upper-.layer header can be found only in the second fragment (as shown below), which in turn could cause ambiguities for security controls like stateless packet filters

h.~er

IPv5datag ra,munfragmented

UBstrrratten

el lens

-.

header

rtestfrr@ttert Uppenth Wg~s h d~ ~ pgyl~ d header t l :P,head'er

h eade r

First segment
Blasttnptlcln hea d er

Seoond fnsgmerlt Hrsp-tsy»hrsp Upper~hrya .Upperdaysrr
header header peyr cad

Art lpve datagrarn.
In addition, ta ensure the reliability of the iPv6 stack af Apple aperating systems, Apple devices enforce various limits on IPv6-related data structures,, such as the number of prefixes per Interface.

Virtual private network IVPN} security
Scour'e network ser'vices like virtual pr'ivate networ'king typically require minimal setup and configuration to work with iQS, IPadGS, and macGS devices.

Apple Platform Sec or lty

155

CONF I l3ENTIAL

PI otocols suppoi ted
These devices work with VPN servers that support the following protocols and authentication methods:
IKEv2/IPsec with authentication by shared secret, RSA Certificates, Elliptic Curve l3igital Signature Algorithm (ECI3SA) Certificates, EAP-MSCHAPv2, or EAP-TILS
SSL-VPN using the appropriate client app from the App Store
L2TP/IPsec with user authentication by MS-CIHAPV2 password and machine authentication by shared secret (iGS, iPadGS, and macGS) and RSA SecurID or CRYPTQCard (macGS only)
Cisco IPsec with user authentication by password, RSA SecurlD or CRYPTQCBrd, and machine authentication by shared secret and certificates (macQS only)
VP M deploymenIIs suppol ted
iQS, iPadQS, and macQS support the following:
VPM Qn Demand: For networks that use certificate-based authentication. IT policies specify which domains require a VPN connection by using a VPN configuration profile.
Per App VP/VrFor facilitating VPN connections on a much more granular basis. Mobile device management (MDM) solutions can specify a connection for each managed app Bncl speclflc QIQIYIBIAs In Safari. This helps ensure that secul'6 clata always goes to Bncl fl'QITI the col'porate netwol'k -- Bncl that a Llsel's personal clata doesn' t.
A/vvays GA VP/V; Can be configured for devices managed through an MI3M solution and supervised using Apple Configurator 2, Apple School Manager, or Apple Business Manager. Always Gn VPN eliminates the need for users to turn on VPN to enable protection when connecting to cellular and Wi-Fi networks. Always Qn VPN gives an organization full control over device traffic by tunneling all IP traffic back to the organization The default exchange of parameters and keys for the subsequent encl'yptlon, IKEV2 secul'es tl'Bfflc tl'BnsITIIsslon with clata encryption. The organlzatlon can ITIQAltol" BAd fll tel' tl"Bfflc to a ncl fl'QITI Its clevlces, secLII'6 clata wl thlA Its netwof'k, BAQI restrict device access to the internet.

All Apple platforms support industry-standard Wi-Fi authentication and encryption protocols, to provide authenticated access and confidentiality when connecting to the following secure wireless networks:
WPA2 Personal WPA2 Enterprise WPA2/WPA3 Transitional

Apple PIBIIGI tH SppUI Itg
CONFIDENTIAL

DX-5492.1 56

APL-EG 08874929

WPA3 Personal WPA3 Enterprise WPA3 Enterprise 'l92-bit security WPA2 and WPA3 authenticate each connection and provide 'l28-bit AES encryption to ensure confidentiality for data sent over the air. This grants users the highest level of assLlf'aAce tAat thelf' clata relTlalns protected w hen sencllng aAd I'ecelvlAg cofTIITILlnlcatlons over a Wi-Fi network connection.
WPA3 support
WPA3 is supported on the following Apple devices:
iPhone 7 or later iPad 5th generation or later Apple TV 4K or later Apple Watch series 3 or later Mac computers (late 2613 on, with 862.'I'lac or later) Newer devices support authentication with WPA3 Enterprise 'l92-bit security, including support for 256-bit AES encryption when connecting to compatible wireless access points (APs). This provides even stronger confidentiality protections for traffic sent over the air. WPA3 Enterprise 'l92-bit security is supported on iPhone 1'I, iPhone 1'I Pro, iPhone 'I'I Pro Max, and later IQS and ipadQS devices.
PMF support
In addition to protecting data sent over the air, Apple platforms extend WPA2 and WPA3 level protections to unicast and multicast management frames through the Protected Management Frame (PMF) service defined in 862.11w. PMF support is available on the following Apple devices:
iPhone 6 or later iPad Air 2 or later Apple TV HD or later Apple Watch series 3 or later Mac computers (late 2613 on, with 862.11ac or later) With support for 862.'IX, Apple devices can be integrated into a broad range of RADIUS authentication environments. 862.1X wireless authentication methods supported include EAP-TLS, EAP-TTLS, EAP-FAST, EAP-SIM, PEAPv6, and PEAPv'I.

Apple operating systems protect the device from vu nerabilities in network processor firmware. This means that network controllers with Wi-Fi have limited access to Application Processor memory.
When USEI or SDIQ (Secure Digital Input Output) is used to interface with the network processor, the network processor can't initiate direct memory access (DMA) transactions to the Application Processor.

x Appfe PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.1 57

APL-EG 08874930

When PCIe is used, each network processor is on its own isolated PCIe bus. An Input/ Qutput Memory Management Unit (IQMMU) on each PCle bus further limits the network processor's QMA access to only memory and resources containing its network packets Bncl conti'Ql stl'LlctLII'es.
DBPI eceted P r OIIOCOIS Apple products support the following deprecated Wi-Fi authentication and encryption protocols:
WEP Open, with both 40-bit and 104-bit keys WEP Shared, with both 40-bit and 'I04-bit keys l3ynamic WEP Temporal Key Integrity Protocol (TKIP) WPA WPA/WPA2 Transitional These protocois are no longer considered secure, and their use is strongly discouraged for compatibility, reliability, performance, and security reasons. They are supported for backward compatibility purposes only and may be removed in future software versions.
It's recommended that all Wi-Fi implementations be migrated to WPA3 Personal or WPA3 Enterprise, to provide the most robust, secure, and compatible Wi-Fi connections possible.

Apple platforms use a randomized media access control address (MAC address) when performing Wii-Fi scans when not associated with a Wi-Fi network. These scans can be performed to find and connect to a known Wi-Fi network or to assist Location Services for Bpps that Llse geofences, such Bs location-based reminders Qr fi xing a location In Apple Maps. Note that Wi-Fi scans that happen while trying to connect to a preferred Wi-Fi network aren't randomized. Wi-Fi MAC address randomization support is available on iPhone 5 or later.
Apple platforms also use a randomized MAC address when conducting enhanced Preferred Network Qff load (ePNG) scans when a device isn't associated with a Wi-Fii network or its processor is asleep. ePNG scans are run when a device uses Location Services for apps that use geofences, such as location-based reminders that determine whether the device is near a specific location.
Because a device'sMAC address changes when disconnected from a Wi-Fi network, it can't be used to persistently track a device by passive observers of Wi-Fi traffic, even when the device is connected to B cellular network. Apple has informed Wi-Fi manufacturers that iQS and iPadGS Wi-Fi scans use a randomized MAC address and that neither Apple nor manufacturers can predict these randomized MAC addresses.

Apple PIBIIGI tH SpcUI Itg
CONFIDENTIAL

DX-5492.1 58

APL-EG 08874931

iQS14, IPadQS14,,and watchQS 7 introduce a new Wi-Fi privacy feature: VVhen an iPhane,, 1Pa'd, }Pod touch, Gl" Apple Watch connects to a W}-Ff n'et}}vork, }t fdentlf les }tself vjrfth a' a' unique (randem) MAC address per network. This feature can be disabled either by the user Gr uaing a neW GPtian in the Wi-FI payload. Under certain circumstances,, the device wlff fall back to the actual MAC address, Far more information, see the Apple Support. article Use private Wi-Fi addresses in iGS 14t iPadGS 14, and watchGS 7.
Wi-Fi frame sequence number randomization VN-Fi frames fnclude a sequence number, which is used by the law-level 802.11 protocol to enable efficfent and reliable Wi-Fi commurlfcatfons. Becauae these sequence rlumbers increment on each transmitted frame, they could be used to correlate information transmitted during Wi-Fi scans with other frames transmitted by the same device.
To. guard againstthfs,Apple devices randomize the sequence numbers whenever a MAC address is changed to a new randomized address. This includes randomizing the sequence numbers for each new scan request that's initiated while the device is unassociated. This randomizatfon is supported on the following devices:
iPhone 7 or later iPad 6th generation ar later Appfe TV 4K or later · Apple Watch series 3 or later iMac Pro (Retina 6K, 27-inch,,2617) or later MacBoek Pro (13-inch, 2918) or later MacB'ook Pro (16-inch, 2018) or later · MacBook Af}' (R'etfrla, 13'-inch, 2018) Gl' later Mac mini (2018) or later iMac (Retina 4K, 21.5-inch, 2019) or later iMac (Retina BK, 27-inch, 20'19) or later Mac Pro (2019) or later
Wi-Fi connections Apple generates randomized MAC addresses far the Peer-ta-Peer Wi-Fi connections
that are used for Airl3rop and AfrPIay. Randomized addresses are also used for Personal Hotspot in iGS and ipadQS (wi'th a SIM card) and Internet Sharing in macGS. New random addresses are generated whenever these network interfaces are started, and unfque addresses are. independently generated for each interface as needed.
Apple Platform Security
CONFIDENTIAL

Wi-Fi networks are identified by their network name, known as a service set identifier (SS/D). Some Wi-Fi networks are configured to hide their SSID, which results in the wireless access point not broadcasting the network's name. These are known as hidden networks. iPhone 6s or later automatically detects when a network is hidden. If a network is hidden, the IQS or IPadGS device sends a probe with the SSID included in the requestnot otherwise. Thiis prevents the device from broadcasting the name of previously hidden networks a user was connected to, thereby further ensuring privacy.

BIUetooth secUvity
There are two types of Bluetooth in Apple devices, Bluetooth Classic and Bluetooth Low Energy (BLE). The Bluetooth security model for both versions includes the following cllstlnct secLII'lty featLII'es:

Bonding: The act of storing the keys created during pairing for use in subsequent connections to forITI a trLIstecl device pail' Authentication: Verifying that the two devices have the same keys Encryption: Message confidentiality Message integrity: Protection against message forgeries Secul e Slrnp/e Pafrfng: Pl"QtectloA against passive eavescll'Qpplng Bncl pl"Qtectlon against man-in-the-middle attacks
Bluetooth version 4.1 added the Secure Connections feature to Bluetooth Classic (BR/EDR) physical tl'Bnspol't.
The security features for each type of Bluetooth are listed below.

PaI I'Ing
Authentication Encryption Message integrity Secure Simple Pairing: Protection agalns'I passive eavesdl'opplng

Bluetooth Classic

Bluetooth Low Energy

P-256 elliptic curve

FIPS-approved algorithms (AESCMAC and P-256 elliptic curve)

Pairing information stored in a secure location in ios, iPados, macQS, tvoS, and watchoS devices

Pa u'In g In f0 I'm atI0 n s 't 0 I'e d In a secure location in ioS, iPados, macoS, tvQS, and watchQS devices

FIPS-approved algorithms (HMACSHA256 and AES-CTR)

FIPS-approved algorithms

AES-CCM cryptography, performed AES-CCM cryptography, performed

in the Controller

in the Controller

AES-CCM, used for message integrity

AES-CCM, used for message integrity

Elliptilc Curve Diffie-Hellman Exchange (ECDHE)

Elliptic Curve Diffie-Hellman Exchange (ECDHE)

Appfe PIBIfGIIH Seoul lly
CONFIDENTIAL

DX-5492.160

APL-EG 08874933

Bl uatpoth classic

Bluetooth Low Energy

Secure Simple Pairrng: Protection against man-in-the-middle (MITM') attacks

Two user-assisted numeric methoda: numerical comparispn or passkey entry

Two user-assisted numeric methods: numerical comparison.dr passkey entry
Pairings require a user response, including all non-MITM pairing raedas

Bluetooth 4.1 or later Bluetcoth 4.2.or later

iMao Late 2015 or later Maoaook Pro Early 291G or later
iphone B.or later

IOS 9, Br later IPadoa 1s.t or later rnacOS 10.12 of later tabs 9 or later wetchOS '2.0 or later
IOS 9 Or later ipados 13,1 or later maoOS 'IG.12 or later tvQS 9 or later watchGS 2.0 or later

Bluetooth Low Energy privacy
To help secure user privacy, B' LE includes the following two features: address randomization and crass-transport key derivation.
Address randomization is a feature that reduces the ability to track a BLE device over a period of time by changing the Biuetooth device address on a frequent basis. For' a device using the privacy feature to reconnect to known devices, the device address, referred te as the. private address, must be resolvable by the ether device. The private address is generated using the device's Identity resolving key exchanged during the pairing procedure.
iOS 13 or later and ipad08 131 or later have the ability to derive link keys across transports,, a feature known as cross-transport key derivation. For example, a link.key gener'ated with BLE can be used to derive a Bluetooth Classic link key. In addition, Apple added Bluetooth Classic to HLE support. for devices that support the Secured Connections feature that was introduced in the Bluetooth Core Specificatiori 4.1 (see the Bluetooth Core Specification 5.1).

Ultra Wideband security in iGS
The new Apple-designed U1 chip uses Ultra VNdeband technology for spatial awarenessallovting iPhone 11, iphone 11 Pro, and IPhorre11 Pro I@ax or later iPhone models to precisely locate other U'1-equipped Apple devices. Ultra VVideband technology uses the same technology to randomize cIata foLlrld In othel supportecl Apple devices:
· MAC address randomization

Apple Platform Security
CONF I l3ENTIAL

DX-5492.163

Wi-Fi frame sequence number randomization

iQS and iPadGS support authentication to enterprise networks through Single sign-on (SSQ). SSO works with Kerberos-based networks to authenticate users to services they are aUthol'Izecl to access. SSQ caA be Usecl fol' a I'aAge Gf Aetwol'k actlvltles, f lorn secLIre Safal'I sessions to thll'd-pal'ty apps. CBI'tlflcate-basecl aUlthentlcatlon sUIch as PKINIIT Is also s U p pQI't ed,
macQS supports authentication to enterprise networks using Kerberos. Apps can use Kerberos to authenticate users to services they' re authorized to access. Kerberos can a so be Llsecl fol a I'ange of Aetwolk actl vl ties, frolYI secUre Safari sessIQAs aAQI Aetwol'k flic systeITI aUtheAtlcatloA to third-party apps. CBI" tlflca'te-basecl aLlthBAtlca'tloA Is sUlppol"teel, although app adoption of a developer API is required.
iQS, iPadQS, and macQS SSQ use SPNEGQ tokens and the HTTP Negotiate protocol to work with Kerberos-based authentication gateways and Windows Integrated Authentication systems that support Kerberos tickets. SSO support is based on the open source Heimdal pro)ect.
The following encryption types are supported in iOS, iPadQS, and macQS:
AES-'l28-CTS-HMAC-SHA'I-96
AES-256-CTS-IHMAC-SHA1-96
DES3-CBC-SHA1
ARCFQUR-HMAC-MD5
Safal'I sLlpports SSQ, ancl thll'cl-pal'ty apps that Llse stanclal'cl IOS ancl IPacIQS Aetwol'king APls can also be configured to use it. To configure SSQ, iGS and iPadGS support a configuration profile payload that allows mobile device management (MI3M) solutions to push down the necessary settings. This includes setting the user principal name (that is, the Active l3irectory user account) and Kerberos realm settings, as well as configuring which apps and Safariweb URLs should be allowed to use SSG.
To configure Kerberos in macQS, acquire tickets with Ticket Viewer, log in to a Windows Active l3irectory domain, or use the ki ni t c o m mand-line tool.
App developers can provide their own single sign-on implementations using SSQ exteAsloAs. SSQ exteAslons al'e Invokecl when a native Gl' web app Aeecls 'to Use some ldeAtlty provlcler fol' Llsel' autheAtlcatlGA. Developers can provlcle two types Qf exteAsIQAs: those that redirect to HTTPS and those that use a challenge/response mechanism such as Kerberos. This allows Openll3, QAuth, SAML2 and Kerberos authentication schemes to be supported by Extensible Sing e sign-on.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.162

APL-EG 08874935

To use a Single sign-on extension, an app can either use the AuthenticationServices API or can rely on the URL interception mechanism offered by the operating system. WebKit and CFNetwork provide an interception layer that enables a seamless support of Single sign-on for any native or WebKit app. For a Single sign-on extension to be invoked, a configuration provided by an administrator has to be installed though a mobile device management (MDM) profile. In addition, redirect type extensions must use the Associated l3omains payload to prove that the identity server they support is aware of their existence.
The only extension provided with the operating system is the Kerberos SSQ extension.
Airdrop secUrity
Apple devices that support AirDrop use Bluetooth Low Energy (BLE) and Apple-created peer-to-peer Wi-Fi technology to send files and information to nearby devices, including AirDrop-capable iQS devices running iQS 7 or later and Mac computers running QS X 10.1'I or later. The Wi-Fi radio is used to communicate directly between devices without using any internet connection or wireless access point (AP). In macQS, this connection is encrypted with TLS.
AirDrop is set to share with Contacts Only by default. Users can also choose to use AirDrop to share with everyone, or turn off the feature entirely. Organizations can restrict the use of AirDrop for devices or apps being managed by using a mobile device management (MDM) solution.
AiI OI OP OpeI etiOn
AirDrop uses iCloud services to help users authenticate. When a user signs into iCloud, a 2048-bit RSA identity is stored on the device, and when the user enables Airl3rop, an AirDrop short identity hash is created based on the email addresses and phone numbers associated with the user's Apple ID.
When a user chooses AirDrop as the method for sharing an item, the sending device emits an AirDrop signal over BLE that includes the user's Airl3rop short identity hash. Other Apple devices that are awake, in c ose proximity, and have AirDrop turned on, detect the signal and respond using peer-to-peer Wi-Fi, so that the sending device can discover the Identity of any responding devices.
In Contacts Only mode, the received Airl3rop short identity hash is compared with hashes of people in the receiving device's Contacts app. If a match is found, the receiving device responds over peer-to-peer Wi-Fi with its identity information. If there is no match, the device doesn't respond,
In Everyone mode, the same overall process is used. However, the receiving device responds even if there is no match in the device's Contacts app.
The sending device then initiates an AirDrop connection using peer-to-peer Wi-Fi, using this connection to send a long identity hash to the receiving device. If the long identity hash matches the hash of a known person in the receiver's Contacts, then the receiver responds with its long identity hashes.

Appfe PIBtfGfm SPCUIIt x
CONFIDENTIAL

t3X-5492.163

APL-EG 08874936

lf the hashes are verified, the recipient's first name and photo (if present in Contacts) are displayed in the sender's AirDrop share sheet. In iQS and iPadQS, they are shown in the "People" or "l3evices" section. Devices that aren't verified or authenticated are displayed in the sender's AirDrop share sheet with a silhouette icon and the device's name, as defined in Settiings > General > About > Name. In iQS and iPadQS, they are placed in the "Qther People" section of the Airl3rop share sheet.
The sending user may then se ect whom they want to share with. Upon user selection, the sending device initiates an encrypted (TLS) connection with the receiving device, which exchanges their iCloud identity certificates. The identity in the certificates is verified a g a I Ast. 6 a c hLI s6 I's C Q Atac ts app.
If the certificates are verified, the receiving user is asked to accept the incoming transfer from the identified user or device. If multiple recipients have been selected, this process is I'epeated foi' each destinatIQA.

iQS and iPadQS devices that support Wi-Fi password sharing use a mechanism similar to Airl3rop to send a Wi-Fi password from one device to another.
When a user selects a Wi-Fi network (requestor) and is prompted for the Wi-Fi password, the Apple device starts a Bluetooth Low Energy (BLE)advertisement indicating that it wants the Wi-Fi password. Qther Apple devices that are awake, in close proximity, and have the password for the selected Wi-Fi network connect using BLEto the requesting cl 6 v I c e.
The device that has the Wi-Fi password (grantor) requires the Contact information of the requestor, and the requestor must prove their identity using a similar mechanism to AirDrop. After identity is proven, the grantor sends the requestor the passcode which can be used to join the network.
Qrganizations can restrict the use of Wi-Fi password sharing for devices or apps being managed through a mobile device management (MI3M) solution.

macQS includes a built-in firewall to protect the Mac from network access and denial-ofservice attacks. It can be configured in the Security 8 Privacy pane of System Preferences and supports the following configurations:
Block all incoming connections, regardless of app.
Automatica ly allow built-in software to receive i ncomingconnections.
Automatically allow clowAIoacled ancl signecl software to receive IncQITIlng connectIons. Add or deny access based on user-specified apps.

Aopfe PIBIIGfm spcUIIt x
CONFIDENTIAL

DX-5492.164

APL-EG 08874937

Prevent the Mac from responding ta ICM (Internet Contrai Message Prataaai) probing end portscen retIUlests.

AppfB PIBtfGffH SPCUIItg
CONFIDENTIAL

DX-5492.165

APL-EG 08874938

Apple provides a number of "kit" frameworks to enable third-party developers to extend Apple services. These frameworks are built with user security and privacy at their core:
HomeKit Clou dKit SiriKit DriverKit Rep ayKit ARKit

HomeKit provides a home automation infrastructure that uses iCloud and iGS, iPadGS, and macGS security to protect and sync private data without exposing it to Apple.
HomeKit identity and security are based on Ed25519 public-private key pairs. An Ed255'l9 key pair is generated on the iGS, iPadQS, and macQS device for each user for HomeKit, which becomes their HomeKit identity. It's used to authenticate communication between iGS, iPadQS, and macQS devices, and between iQS,iPadQS, and macQS devices and accessories.
The keys -- stored in keychain and are included only in encrypted Keychain backups -- are kept up to date between devices using iCloud Keychain, where available. HomePod and Apple TV receive keys using tap-to-setup or the setup mode described below. Keys are shared from an iPhone to a paired Apple Watch using Apple Identity Service (II3S).

x Apple PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.166

APL-EG 08874939

Communication between HomeKit accessories
HameKit accessories generate their own Ed25519 key pair for use in communicating with iOS, iPadGSr and macGS devices. If the accessory is restored to factory settings, a new key pall ls generated.
To establish a relationship between an iGS, IPadQS, and macQS device and a HomeKi't accessary, keys are exchanged using Secure Remote Password (30T2= bit) protocol utilizing an eight-digit code provided by the accessary's manufacturer, entered an the iQS, ipadQS device. by the user,,and then encrypted using ChaCha20-Paly1306 AEAD with HKDF-SHA512 derived keys. The accessary's MFi certification is also verified during setup. Accessories without an MFi chip can build in support far software autheriticatiari in iOS '11.3 or later.
VVhen the iGS, iPadQS, and macQS device and the HameKit accessory communicate during use, each autherrticates the ather using the keys exchanged in the abave process. Each session is established using the Station-to-Station protocol and is encrypted with HKDFSHA612 derived keys based on per-session Curve26619: keys. This applies ta both IPbased and Bluetoath Law Energy.(BLE) accessories.
Far BLE devices that support br'aadcast notifications, the accessar'y ls pr'avislaned with a braadca<. encryption key by a paired iGS, iPadGS, and macGS device over a secure sessiari. This key is used to encrypt the data about state changes an the accessory, which ar'e notified using the BLE advertisements. The broadcast encryption key Is an HKDFSHA512 derived key, and the data is encrypted using ChaChe20-Poly1396 AEAD algorithm The broadcast encryptian key is periodically. changed by. the iQS, iPadQS, and mac08 device and updated to ather devices using iClaud as described in HomeKit data security,
HomeKit and Siri
Siri can be used to query and cantrol accessories,,and ta activate scenes. Minimal information about the configuration af the. home. is provided anonymously ta Siri, to provide names of rooms, accessaries, and scenes that are necessary for command recagnition, Audio sent te Sir i may denote specific accessories or commands, but Such Siri data isn' t associated with other Apple features such as HameKit.
HOllleKIt d8t8 SBCUI ItY
HomeKit data updates between devices and users
HameKit datacan be updated between a user'siGS, iPadGS, and macGS devices using iCleud and iCloud keychain. During this process; the HomeKit data is encrypted using keys derived from the user's HomeKit identity and a random nance and is handled as an opaque binary large object, or,hiab. The most recent blob is stared in ICloud, but it isn't used for any other purpose. Because it's encrypted using keys that are available only on the user's iGS, iPadQS,,and macQS devices,, its contents are inaccessible during transmission and iCloud storage.

Apple Platform Security
CONFIDENTIAL

DX-5492.167

HameKit data is also synced between multiple users af the same hams. This process uses autherlticatiorl and encryption that is the same as that used betWeen an i08, iPedGS, and macQS device and a HomeKit accessory. The authentication is based on Ed25619 public keys that are exchanged 'between the dev'ices when a user Is added ta a horne. After a new user is added to a home, a}l further communication is authenticated and encrypted using Station-to-Station protocol and per-session keys.
The user wha initially created the home in HomeKit or another user with editing permissions can add new user's. The owner's device configur'es the accessar'ies with the public key of the new user- sa that the accessory can authenticate arid accept commands fram the new user. When a user with editing permissions adds a new user, the process is delegated ta a home hub to complete the operation.
The process to provision Apple TV for use with HameKit is performed automatically when the user signs in to iCloud. The iCIaud accaurrt. rreeds to have two-factor autheritication enabled. Apple TV'and the owner's device exchange temporary Ed25619 public keys over iCloud. When the awner's device and Apple TV ar'e on the same local network, the temporary keys are used ta secure a connection over the local network using Station-toStation protocol and per-session keys. This process uses authentication and encryption that is the. same as that used between an iGS, ipadQS,,and macQS device and a HomeKit accessol'y, over' 'thfs secLll'e l ocal 'connection, the owner's dlsvlce transfers 'the usert"s Ed25519 public-private key pairs ta Apple TV. These keys are then used to secure the communication 'between Apple TV and the HameKit accessories and also between Apple TV and other IGS, iPad08, and mac08 devices that are part of the HomsK}t home.
If a user doesn't have multiple devices and doesn't grant additional users access ta their home,, na HorneKit data is transmitted to ICloud.
HONG CIB'tB Gild BPPS
Access. to, home data by apps is. controlled by the user's Privacy settings. Users are asked ta grant access when apps request home data, similar to Cantacts, Phatas, and other- ioS, iPadQS, and macQS data sources. Itfhe user approves, apps have access to the names of roams, names af accessories, which roam each accessary is in, and other Information as detailed irl the HomeKit developer documentation at https.//developer. apple.corn/hamekit/.
LOCSI 18't8SXOMge
HomeKit storesdata about the.homes, accessories, scenes, and user'san a user'.s iQS, ipadQS, and macQS devices This stared data is encrypted using keys derived from the user's HomeKit identity keys, plus a random nonce. Additionally, HamsKit data is stored using the Data Protection class Protected Until First User Authentication. HameKit data is backed up only in encrypted backups, sa, far- example, unencrypted backups to iTunes jin macQS 10.14 or earlier) ar the Finder fmacQS 10.15 or later') through USB don't contain HomeKit data.

Apple Platform Security
CONF I l3ENTIAL

DX-5492.168

Routers that support I-lomeKit let users improve the security of their home network by managing the Wi-Fi access that HomeKit accessories have to their local network and to the internet. The routers also support Private PSK (PPSK) authentication, so accessories can be added to the Wi-Fi network using a key that's specific to the accessory and that can be revoked when needed. PPSK authentication improves security by not exposing the main Wi-Fi password to accessories, as well as by allowing the router to securely identify an accessory even if it were to change its MAC address.
Usfng the HofTIB app, a Llsel" can conf lgUI'6 access I'estl'Ictlons fof' gf'Gups Gf accessol'Ies as
follows:
/Vo restriction: Allow unrestricted access to the internet and the local network.
Automatic: This is the default setting. Allow access to the internet and the local network based on a list of internet sites and local ports provided to Apple by the accessory manufacturer. This list includes all sites and ports needed by the accessory in order to function properly. (INo Restriction is in place until such a list is available.) I-'I'esfricf fo Home: No access to the internet or the local network except for the connections required by HomeKit to discover and control the accessory from the local network (including from the home hub to support remote control).
A PPSK is a strong, accessory-specific WPA2 Personal pass-phrase that is automatically generated by HomeKit and revoked if and when the accessory is later removed from the Home. A PPSK is used when an accessory is added to the Wii-Fi network by HomeKit in a Home that has been configured with a HomeKit router; this addition is reflected as WiFi Credential: HomeKit-managed on the settings screen for the accessory in the Home app. Accessories that were added to the Wi-Fi network before adding the router are reconfigured to use a PPSK if the accessory supports this; otherwise, they retain their exls'ting cl'eclent.lais.
As an additional security measure, users must configure the HomeKit router using the I'Outer manLlfactUI'elf' s app, so that the app can valfciate that Llsel's have access to the I'QUltel' ancl caA acid It to the Horne app.

Cameras that have an internet Protocol address (IP address) in I-lomeKit send video and audio streams directly to the iQS, iPadQS, tvQS, and macQS device on the local network acCesslng the stl'ealITI. The stl'earns af'6 encrypted Llslng randomIy genel'atecl keys GA the cievlce ancl an Intel'Aet Pf'Qtocol cafYIBI'a (GI' IP camel'a), ancl they'I'6 exchangecl Qvel' the secure HomeKit session to the camera. When a device isn't on the local network, the encrypted streams are relayed through the home hub to the device. The home hub doesn' t decrypt the streams; it functions only as a relay between the device and the IP camera. When an app displays the HomeKit IP camera video view to the user, HomeKit renders the vlcleo fl"aITIes secLII ely from a separate systeITI pl"Qcess. As a I'esLllt, the app Is Unable to access Qf' store the vlcleo stf'eaITI. In aciclltlon, apps al'en't pel'ITllttecl to captLII'6 scf'BBnshots from this stream.

Apple PIBIIGI m SppUI IIX
CONFIDENTIAL

DX-5492.169

APL-EG 08874942

HomeKlt provides BA end-to-end seoul e Bnd private mechanism to recorcl, analyze, Bnd view clips from HomeKit IP cameras without exposing that video content to Apple or any third party. When motion is detected by the IP camera, video clips are sent directly to an Apple device acting as a home hub, using a dedicated loca network connection between that home hub and the IP camera. The local network connection is encrypted with a per-session HKDF-SHA512 derived key-pair that iis negotiated over the I-lomeKit session between home hub and IP camera. HomeKit decrypts the audio and video streams on the home hub and analyzes the video frames locally for any significant event. If a significant event is detected, HomeKit encrypts the video clip using AES-256-GCM with a randomly generated AES256 key. HomeKit a so generates poster frames for each clip and these poster frames are encrypted using the same AES256 key. The encrypted poster frame and Bud(o Bnd video data Bre uploaded to )Cloud servers. The reIated rnetadata for each clip including the encryption key are uploaded to CloudKit using iCloud end-to-end encryption.
For face classification, HomeKit stores all data used to classify a particular person's face in CloudKit using iCloud end-to-end encryption. The data stored Includes information about each person, such as name, as well as images representing that person's face. These face images can be sourced from a user's Photos if they opt in, or they can be collected from previously analyzed IIP camera video. A HomeKit Secure Video analysis session uses this classlf ication data to Identify faces In the secure video stream lt receives directly from the IP camera and includes that identification information in the clip metadata mentioned previously.
When the I-lome app is used to view the clips for a camera, the data is downloaded from iCloud and the keys to decrypt the streams are unwrapped locally using iCloud end-toend decryption. The encrypted video content is streamed from the servers and decrypted locally on the IQS device before displaying it in the viewer. Each video clip session maybe broken down into sub-sections with each sub-section encrypting the content stream with its Gwn unique key.

Some third-party remote accessories provide Human Interface Design (HID) events and Siri audio to an associated Apple TV added using the Home app. The remote sends the HID events over the secure session to the Apple TV. A Siri-capable TV remote sends audio data to Apple TV when the user explicitly activates the microphone on the remote using a dedicated Siri button. The remote sends the audio frames directly to the Apple TV using a dedicated local network connection. A per-session HKDF-SHA5'l2 derived key-pair that is negotiated over the HomeKit session between Apple TV and the TV remote is used to encrypt the local network connection. HomeKit decrypts the audio frames on Apple TV and forwards them to the Siri app, where they are treated with the same privacy protections as all Siri audio input.

x Apple PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.1 70

APL-EG 08874943

When a user of a HomeKit home adds their profile to the owner of the home's Apple TV, it gives that user access to their TV shows, music, and podcasts. Settings for each user regarding their profile use on the Apple TV are shared to the owner's iCloud account using iCloud end-to-end encryption. The data is owned by each user and is shared as read-only to the owner.Each user of the home can change these va ues in the Home app and the Apple TV of the owner uses these settings.
When a setting is turned on, the iTunes account Qf the user is made available on the Apple TV. When a setting is turned off, a I account and data pertaining to that user is deleted on the Apple TV. The initial CloudKit share is initiated by the user's device and the token to establish the secure CloudKiit share is sent over the same secure channel that is used to sync data between users of the home.

Note: Whenever possible, access services directly through a home hub instead of through iCloud. Forexample, use a hub such as HomePod, Apple TV, or iPad.
iCloud remote access is still supported for legacy HomeKit devices. Apple carefully designed those devices so that users can control them and send notifications to them wlthQU't r'eveallng to Apple what the accessol'Ies al"e ol' what cQIYIITIancls and notlflcatlons are being sent. HomeKit never sends information about the home over iCloud remote
When a user sends a command using iCloud remote access, the accessory and iGS, IPBQIGS, ancl IYIacGS clevlce al"e mLltUBIIy BLlthentlcatecl ancl clata Is encl"yptecl Using the same procedure described for local connections. The contents of the communications are encrypted and not visible to Apple. The addressing through iCloud is based on the iCloud identifiers registered during the setup process.
Accessol'Ies that sLlpport ICIQUcl remote access al'e pl'Gvlslonecl dLII'IAg the accessory's setup process. The provisioning process begins with the user signing in to iCloud. Next, the iGS, and iPadQS device asks the accessory to sign a challenge using the Apple Authentication Coprocessor that's built into all Built for HomeKit accessories. The accessory also generates prime256v'I elliptic curve keys, and the public key is sent to the iQS, and iPadQS device along with the signed challenge and the X.509 certificate of the BLlthentllcatlQA coplocessol'. These al'e Usecl to reciUest a certlflcate fol' the accessol'y frQITI the iCloud provisioning server. The certificate is stored by the accessory, but it doesn' t contain any Iclentlfylng Infol'ITIatlon abQLllt the accessol'y, Gthel than It has been granted access to I-lomeKit iCloud remote access. The iQS, and iPBdQS device that is conducting the provisioning also sends a bag to the accessory, which contains the URLS and other information needed to connect to the iCloud remote access server. This information isn' t specific to any user or accessory

Appfe PIBtfpfm SppUIIIX
CONFIDENTIAL

DX-5492.1 71

APL-EG 08874944

Each accessory registers a list of allowed users with the iCloud remote access server. These users have been granted the ability to control the accessory by the user who added the accessory to the home. Users are granted an identifier by the iCloud server and can be mappecl to Bn ICIQUcl account fol' the pUI'pose of clellvellng AotlflcatlGA ITIessages Bncl responses from the accessories. Similarly, accessories have iCloud-issued identifiers, but these Iclentlflel's Bl'6 Opaque Bncl cIQA't I'eveal BAy Infol ITIBtlon BIQQLlt the Bccessol'y Itself.
When an accessory connects to the HomeKit iCloud remote access server, it presents Its cef tlflcate BAcl 3 pass. The pass Is Gbtalnecl fl"GITI 3 cllffel Bnt ICIQLIcl server, BAcl lt isn't unique for each accessory. When an accessory requests a pass, it includes its ITIBALIf3ctLII'er, ITIoclel, Bncl fll'ITIware vel'sion In Its I'equest. No Llsel -- Iclentlfylng QI' hoITIBidentifying information is sent in this request. To help protect privacy, connection to the pass server Isn t Buthentlcatecl Accessories connect to the iCloud remote access server using HTTP/2, secured using TLS 1.2 with AES'l28-GCM and SHA256. The accessory keeps its connection to the iCloud remote access servel' open so tAat It can I'ecelve IncoIYIIAg messages Bncl sencl I'esponses and outgoing notifications to iQS, iPadQS, and macQS devices.
CNGUdKit security
CIQUcIKlt Is 3 fl'BITIBWQI'k that lets Bpp clevelopel's stol'6 key-valLIB clata, stl'UctUrecl clata, and assets in iC oud. Access to CloudKit is controlled using app entitlements. CloudKit supports both public and private databases. Public databases are used by all copies of the Bpp, typically fol' geABI"Bl assets, Bncl Bl'en t encl'yptecl. Pl'Ivate clatabases stol'6 thB Llsel' s Clata.

Apple PIBIIGIIH SI.PUI It/
CONFIDENTIAL

DX-5492.1 72

APL-EG 08874945

As with iCloud Drive, CloudKit uses account-based key's to protect the information stared in the user's private database and,, similar to other iCloud services, files are chunked, encrypted, and stored usirig third-party services. ClaudKit uses a hierarchy af keys,,similar ta Data Pratection. The per-file keys are wrapped 'by ClaudKit Record keys. The Record keys, in turn, are protected by a zone-iiiflde key, which Is protected by the user's CloudKit Service key. The ClaudKit Service key is stored in the user's iCloud account and is available only after the user has authenticated with iCloud.

CletidKit Zeriew'ide key

Cioudxit ~ R cord key

F'le metedete

~

i

File chttnkllst

Cloudxit end-to-end encryption.

Fiiie
chunk
Convergent encryption
chunk

SiriKit security for iOS, iPedOS, end watchOS
Siri uses the app extension system ta communicate with third-party apps. Gri a device, Sin can access the user's contact lnformatian and the device's current location. But before it provides protected data to an app, Siri checks the app's user-controlled access permissions. According ta those permissions, Sir i passes only the relevant fragment ef the arlginal .user utterance to the app extension. Far example, if an app daesn't hav'e access to cantact informatiorl, Siri idion't rqsolv re a relationship in a user recluest such as "'Pay my mother 10 dollars using Payment App." In this case, the app would see anly the literal term "my mother."
However, if the user has granted the app access to contact information, the app wauld receive resolved information about the user's mother, lf a relationship is referenced in the body partian of a message -- far example, "Tell my mather en MessageApp that my brother is awesome" -- Siri daesn't resolve emy brother" regardless af the app is permissions.
SiriKit-enabled apps can send app-specific or user-specific vocabulary ta Siri, such as the names of the user's contacts. This information allows Siri's speech recognition arid natural language understanding to recognize vocabulary for that app and is associated with a random identifier. The custom information remains available as long as the identifier is in use, or until the user disables the app's Siri integration in 8ettlngs, or until the 8iriKit.enabled app is uninstalled.

Apple Platform Security
CONF I l3ENTIAL

For an utterance like "Get me 3 ride to my mom's home using RideShareApp," the request requires location data from the user's contacts. For that request only, Siri provides the required information to the app's extension, regardless of the user permission settings for location Ql' contact Infol'ITIatlon fof' the Bpp.

l3riverKit is the framework that allows developers to create device drivers that the user installs on their Mac. I3rivers built with DriverKit run in user space, rather than as kernel extensions, for improved system security and stability, This makes for easier installation and increases the stability and security of macOS.
The user simply downloads the app (insta lers aren't necessary when using system extensions or DriverKit) and the extension is enabled only when required. These replace kexts for many use cases, which require administrator privileges to install in /System/ Library or /Library.
IT administrators who use device drivers, cloud storage solutions, networking, and security Bpps that I'equil'e kernel extensl0ns 3re enc0ul'Bgecl to IYI0ve t0 newel' versions that BI'e bui t on system extensions. These newer versions greatly reduce the possibility of kernel panics on the Mac as well as reduce the attack surface. These new extensions run in the user space, won't require special privileges required for installation, and are automatically removed when the bundling app is moved to the Trash.
The l3riverKit framework provides C++ classes for I/O services, device matching, memory descriptors, and dispatch queues. It also defines I/O-appropriate types for numbers, collections, strings, and other common types. The user uses these with family-specific driver frameworks like USBDriverKIt and HII3DriverKit. Use the System Extensions fl'BITIewol'k to Install Bncl Llpgracle 3 dl'Ivel'.

ReplayKit is a beta framework that enables developers to add recording and live broadcasting capabilities to their apps. In addition, it allows users to annotate their I'ecol'clings Bncl b/Qaclcasts Llsing the clevlce's fl'ont-facing caITIel'3 Bncl fTIIci'Qphone.
MOVie reCOI ding
There are several layers of security built into recording a movie:
Permissions cA'Biog: Before recording starts, ReplayKit presents a user consent alert requesting that the user acknowledge their intent to record the screen, the microphone, BAcl the front-facing camera. This Blei't Is presen teel once pef' Bpp pl"ocess, Bnd It' s presented again if the app is left in the background for longer than 8 minutes.
Sc/een Bnd BL/cAQ capture/ Scl'een Bncl BLIdio captul'e occLIrs out of the Bpp s pf'ocess In ReplayKit's daemon replayd. This ensures the recorded content is never accessible to the app process.

Appfe PIBI/Gf m SppUI IIX
CONFIDENTIAL

DX-5492.1 74

APL-EG 08874947

/A-Bpp scl een Bnci Bucflo cap/Llf'6: This allows Bn Bpp to get video BAcl sample bUffel's, which is guarded by the permissions dialogue Movie creation Bnd storage: The movie file is written to a directory that's only accessible to ReplayKit's subsystems and is never accessible to any apps. This prevents recordings being used by third parties without the user's consent. Encf-user preview Bnci sharin: The user has the ability to preview and share the movie with a user interface vended by ReplayKiit. The user interface is presented out-ofprocess through the iQS Extension infrastructure and has access to the generated movie file.
Repla YKit ba Oadcastling
Thel"6 Bl'6 sevel'Bl layers Qf secLII lty bUllt Into bl'Qaclcas'ting 3 ITIQvle;
Scl GGA Brlcf Bucflo capful 6: The scl'een BAcl BUlcllo captUI'6 ITIechanlsITI cIUI'Ing broaclcastlng Is IcIGAtlcal to ITlovle I'ecol'cling Bnd QCCUI's In repl a y cl. Broadcast extensions: For third-party services to participate in ReplayKit broadcasting, they' re required to create two new extensions that are configured with the corn.apple. bl'Qaclcast-sel'vices enclpolnt:
A user interface extension that allows the user to set up their broadcast An upload extension that handles uploading video and audio data to the service's back-end servers The architecture ensures that hosting apps have no privileges to the broadcasted video and audio contents. Qnly ReplayKit and the third-party broadcast extensions have access.
Broadcast picker: With the broadcast picker, users initiate system broadcasts directly from their app using the same system-defined user interface that's accessible using Control Center. The user interface is implemented using a private API and is an extension that lives within the ReplayKit framework. It is out-of-process from the hosting app. Uploaci exfension: The extension that third-party broadcast services implement to handle vlcleo Bncl BUdlo conteAt cIUAng bl'oaclcastlng Uses I'Bw Llnencoclecl sample bUffel's. DLII'IAg this ITIocle of hancIIIAg, vlcleo Bncl Bucllo clata Is serlallzecl BAd passecl to the third-party upload extension in real time through a direct XPC connection. Video data is encoded by extracting the IQSurface object from the video sample buffer, encoding it securely as an XPC object, sending it over through XPC to the third-party extension, and decoding it securely back into an IQSurface object.
ARKit is a framework that lets developers produce augmented reality experiences in their 3 p p Q I" g 3 rn 6 . D 6 v 6 I 0 p6 I's c 3 n 3 cl cl 2 D Q I' 3 D 6 I 6 ITI 6 A ts LI s I ng t h 6 f I' Q n t Q I' I' 6 3 I' c 3 ITI 6 I' 3 o f 3 n iQS or iPadQS device.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 75

APL-EG 08874948

Apple cleslgnecl caITIel'Bs with pl'Ivacy In ITIIAOI, Bncl thll"cl-pal'ty Bpps mUIst Obtain the Ulsel" s consent befol'e accessing the camera. IA IOS Bncl IPadQS, wheA 3 User gl'ants Bn
Bpp access to thell' camera, that Bpp can access I'eal-time I mages fl'om the fl'ont BAOI Ical'
camel'Bs. Apps Bl'en't BIIowed to Ulse the caITIel 3 wlthQUlt tr'Bnspal'ency that the caITIel'3 Is In
Photos BAd VIdeos taken with the caITlel'3 may contain Qthel' Information, such Bs whel'e and when they were taken, the depth of field, and overcapture. If users don't want photos and videos taken with the Camera app to include location, they can control this at any time by going to Settings > Privacy > Location Services > Camera. If users don't want photos and video to include location when shared, they can turn location off in the Options menu in the share sheet.
To better position the user's AR experience, apps that use ARKit can use world- or facetracking information from the other camera. World tracking uses algorithms on the user's device to process information from these sensors to determine their position relative to a physical space. World tracking enables features such as Optical Heading in Maps.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 76

APL-EG 08874949

iQS, iPadQS, macQS, and tvQS support flexible security policies and configurations that are easy to enfol ce and rnlanage. Thl'QLlgh theITI, ol'gaAIzatloAs caA pl o'tect cof'pol'ate information and ensure that employees meet enterprise requirements, even if they are using devices they' ve provided themselves -- for example, as part of a "bring your own device" (BYGD) program. Ql"ganlzatlons caA use resoLII'ces sLIch as passwol'cl pl'otectlon, conf lguratIQA pl'ofIles, remote wipe, and third-party mobile device management (MI3M) solutions to manage fleets of devices and helpkeep corporate data secure, even when employees access this data on their personal devices.
In iQS 13 or later, iPadGS 13.'I or later, and macGS 16.15 or later, App e devices support a new user enrollment option specifically designed for BYQI3 programs. User enrollments provide more autonomy for users on their own devices, while increasing the security of enterprise data by storing it on a separate, cryptographiically protected APFS (Apple File System) volume. This provides a better balance of security, privacy, and user experience for BYQI3 programs.
iQS and iPadOS use a pairing model to control access to a device from a host computer. Pairing establishes a trust relationship between the device and its connected host, signified by public key exchange. iOS and iPadQS also use this sign of trust to enable additional functionality with the connected host, such as data syncing. In iQS 9 or later,, se r' vcI es:
That require pairing can't be started until after the device has been unlocked by the Llser Won't start unless the device has been recently unlocked May (such as with photo syncing) require the device to be unlocked to begin

AppIe PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 77

APL-EG 08874950

The pairing process requires the user to unlock the device and accept the pairing request from the host. In iQS 9 or later, the user is also required to enter their passcode, after which the hostand device exchange and save 2048-bit RSA public keys. The host is then given a 256-bit key that can unlock an escrow keybag stored on the device. The exchanged keys are used to start an encrypted SSL session, which the device requires before it sends protected data to the host or starts a service (iTunes or Finder syncing, file transfers, Xcode development,,and so on). To use this encrypted session for all communication, the device requires connections from a host over Wi-Fi, so it must have been previously paired over LISB. Pairing also enables several diagnostic capabilities. In iQS 9, if a pairing record hasn't been used for more than 6 months, it expires. In iGS O'I or later, this time frame is shortened to 30 days.
Certain diagnostic services, including corn.apple. mobile.pcapd, are restricted to work only over USB. Additionally, the corn.apple. file relay service requires an Apple-signed configuration profile to be installed. In iQS 'I'I or later, Apple TV can use the Secure Remote Password protocol to wirelessly establish a pairing relationship.
A user can clear the list of trusted hosts with the Reset Network Settings or Reset Location 8 Privacy options.

Apple operating systems support mobile device management (MDM), whiich a lows organizations to securely configure and manage scaled Apple device deployments. MDM capabilities are built on existing operating system technologies, such as configuration profiles, over-the-air enrollment, and the Apple Push Notification service (APNs). For example, APNs is used to wake the device so it can communicate directly with its MDM solution over a secured connection. With APNs, no confidential or proprietary information Is tl'BnsITllttecl,
Using MDM, IT departments can enroll Apple devices in an enterprise environment, wirelessly configure and update settings, monitor compliance with corporate policies, manage sof twal'e Llpclate pollcles, Bncl even I'eITIotely wipe ol" lock ITIanagecl clevlces.
In addition to the traditional device enrollments supported by iGS, iPadGS, macQS, and tvQS, an enrollment type has been added in iQS 13 or later, iPadQS 'l3.'I or later, and macQS 10.'l5 or later -- User Enrollment. User enrollments are MDM enrollments specifica ly targeting "bring your own device"' (BYQD) deployments where the device is personally owned but used in a managed environment. User enrollments grant the MDM solution more limited privileges than unsupervised device enrollments do, and provide cryptographic sepal'ation Qf usel' Bncl col'pol"Bte clata.

Apple PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.1 78

APL-EG 08874951

Enrollment types
User Enrollment: User Enrollment is designed for devices owned by the user and is integrated with Managed Apple IDs to establish a user identity on the device. Managed Apple IDs are part of the User Enrollment profile, and the user must successfully authenticate in order for enrollment to be completed. Managed Apple ll3s can be used alongside a personal Apple ID that the user has already signed in with. Managed apps and accounts use a Managed Apple ID,and personal apps and accounts use a personal Apple ID.
/36vice Enrollment: Device Enrollment allows organizations to have users manually enroll clevlces Bncl 'theA IYIanage rABAy cllffel'ent aspects Gf clevlce Llse, IncILIdIAg the Bbfllty to erase the device. Device Enrollment also has 3 larger set of payloads and restrictions that can be applied to the device. When a user removes an enro Iment profile, all configuration profiles, their settings, and managed apps based on that enrollment profile are removed with it.
Automated Device Enrollment: Automated Device Enrollment lets organizations configure and manage devices from the moment the devices are removed from the box (Ina process known as Auto Advance deployment). These devices are known as supervised, and users have the option to prevent the MDM profile from being removed by the user. Automated I3evice Enrollment is designed for devices owned by the
0 I'g 3 A I Z at I 0 A,
Restl"IctloAs caA be 6Aablecl -- or IA soIYIe cases, cllsalolecl -- by BcIIYIInlstl'Btors to pl"eveAt users from accessing a specific app, service, or function of an iPhone, iPad, Mac, or Apple TV that's enrolled in an MI3M solution. Restrictions are sent to devices in a restrictions
payloacl, which Is pal't Gf 3 conf lgul'ation pl'Of lie. Cel"tain I'estl'Ictlons Qn Bn IPhone may be mirrored on a paired Apple Watch.
By default, the user's passcode can be defined as a numeric PIN. In iQS and iPadQS devices with Touch ID or Face II3, the minimum passcode length is four digits. Because longer and more complex passcodes are harder to guess or attack, they are recommended.
Administrators can enforce complex passcode requirements and other policies using MDM or Microsoft Exchange ActiveSync, or by requiring users to manually install configuration profiles. An administrator password is needed for the macQS passcode policy payload installation. Some passcode policies can require a certain passcode length, composition, or other attributes.

Configuration profiles are the primary way that an MI3M solution delivers and manages
p 0 I I c I 6 s 3 A d I" 6 s t I' I c t I 0 As 0 A IYI 3 A 3g 6 cl d 6 v I c 6 s. I f 0 I' g 3 A I z3t I0As A 6 6 CI t 0 c 0 A f I g LII'6 3 I 3 I' g 6
number of devices -- or to provide lots of custom email settings, network settings, or cel'tlflcates to 3 IBI'ge nuIIYlbel Gf devices -- conf lglJI'ation pl'Gf Iles Bl'6 3 safe Bncl secLII'6 way to do it.

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 79

APL-EG 08874952

Configuration profiies A canfigurafian profile is an XML file (ending in .mablleconfig) that consists af payloads
that load settings and authorizatian information onto Apple devices. Configuration profiles automate the configuration af settings,,accaunts, restrictions, and credentials. These fifiss can be created by ari MDM salutiarl or Apple Configurator 2, or they can be created manually. Before organizations send a configuration profile ta an Apple device, they must enroll the device in the MDM salutian using an enrollment profile.
Enrolirnent prof iles
An enroilmenf profife is a configuration profile with an MI3M payload that enrolls the device in the MDM solution specified for that device. This allaws the MI3M solution ta send commands and configuration profiles ta the device and ta query certain aspects of the device. When a user removes an enrallment prafile, all canflguratian profiles, their settings, and managed apps based an that enrollment prafile are removed with it. There can be only one enrollment profIIe on a device at a time.
Configuration profiie settings
A. configuration profile contains a number of settings in specific paylaads that can be specified, including (but nat limited ta):
Passcade and password policies Restrictions on device features (for example, disablinrg the camera) · Network arid VPN settings · Microsoft Excharlge sisttlrlgs
Mail settings
Account settings LDAP directory Service settingS · CaIDAV calendar service settirigs · Credentials and keys · Software updates
PrOfile Signing enci enCryptiOn
Configuration profiles can he signed to validate their origin arid encrypted to ensure their integrity and protect their contents. Configuration profiles for iOS and iPadQS are encrypted using the Cryptographic Message Syntax (CMS) specified in RFC 5662, supporting 3DES and AES128.
Profiiienstallation
Users can install canfiguration profiles directly on their devices using Apple Configurator 2, ar they cari he dawnlaaded usirig Safari,,sent attached ta a mail message, transferred using AirDrap or the Files app in iOS and iPadQS, or sent aver the air using a mobile device management (MDM) solution. When a user sets up a device in Apple School Manager or Apple Business Manager, the device dawnloads and installs a profile for MDM enrollment. Far information an haw ta remove profiles, see MDM Overview In MDM Settings far IT Administrators

Apple Platform Security

CONFIDENTIAL

DX-5492.18G

A/ofe: Gn supervised devices, configuration profiles can also be locked to a device to completely prevent their removal or to allow removal only with a passcode. Because many organizations own their iQS and iPadGS devices, configuration profiles that bind a device to an MDM solution can be removed -- but doing so also removes all managed configuration
I A f QI'TIBtIoA, cl B t B, B A cl B p p s.

Qrganizations can automaticallyenrolliQS, iPadQS, macQS, and tvGS devices inmobile device management (MDM) without having to physically touch or prepare the devices before users get them. After enrolling in one of the services, administrators sign in to the service website and link the program to their MDM solution. The devices they purchased can then be assigned to users through MDM. I3uring the device configuration process,
secUI'lty Qf seAsltlve clata ca A be Incl'easecl by ensUII'IAg Bppl'Qpl'IB te secUII'I ty measLlres Bl'e in place. For example:
Have users authenticate as part of the initial setup flow in the Apple device's Setup Assistant cIUrlng Bctlvatlon.
Pl'Gvlcle a pl e IIITIIABI'y coAflgLIratlon with IIITlltecl access BAGI I'eqUII'e Bclclltlonal clevlce conf lgLII'ation to access seAsltlve data.
After a user has been assigned, any MI3M-specified configurations, restrictions, or controls are BLltomatlcally Installed. All communlcatlons between devices and Apple servel's are encrypted in transit through HTTPS (TLS).
The setup process for users can be further simplified by removing specific steps in the SetLlp AsslstaAt fol clevlces, so Llsers Bl'e Llp Bncl I'Llnnlng qUlckly. AcllYIInls'tl'Btors can also control whether or not the user can remove the MDM profile from the device and ensure that device restrictions are in place throughout the lifecycle of the device. After the device is unboxed and activated, it can enroll in the organization's MDM solution -- and all ITIBnagernen't settings, Bpps, Bncl books Bl'e Installecl Bs clef lAecl by the MI3M administrator.
Apple School Manager and Apple Business Manager are services for IT administrators to deploy Apple devices that an organization has purchased directly from Apple or through participating Apple Authorized Resellers and carriers.
When used with an MDM solution, administrators can simplify the setup process for users, configure device settings, and distribute apps and books purchased in Apple School Manager and Apple Business Manager. Apple School Manager also integrates with Student Information Systems (SISs) directly or using SFTP, and Apple School Manager and Apple Business Manager can use System for Cross-domain Identity Management (SCIM) or federated authentication with Microsoft Azure Active Directory (Azure AD) so BcllTIIAIstl"Btors can cILlickly cl"cate BccQLInts.
l3evices with iGS 1'I or later and tvGS 'I0.2 or later can also be added to Apple School Manager and Apple Business Manager after the time of purchase using Apple Configurator 2.

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.1 81

APL-EG 08874954

Apple maintains certificatians in compliance with the ISO/IEC 27001 and 27018 standards to enable Apple customers to address their regulatory and contractual obligations. These certifications provide our customers with an independent attestation over Apple's Information Security and Privacy practices for in-scape systems. For mare infarrnatia, see the AppIe Support article Apple Internet Services Certifications. Nate' Ta learn whether an Apple program is available in a specific country ar regian, see the Apple Support article Availability of Apple programs for education and business.
Device supervision supervisiarI generally' denotes that the device is owned hy the organization, giv'ing them
add}tianal control over the device's configuratiorl and restrict}ons iPhane and ipad devices with iGS 6 or later and Apple TV devices with tvGS 'I0.2 or later became supervised by: · Using Apple Canfigurator- 2 to supervise the device
During this process, the device is erased and all data is last. · Enrolling the device ln an MDM saiutian and selecting supervisian as part of the
enrollment process Mac camputers can be supervised if they:
Are running macOS 11enrolled in MDM using device enrollment · Are upgraded ta macGS 11 and the erirellment in MI3M was a user approved MDM
enral lment Are running mac08 1Q.'l4.4 or later and: · The devices' serial numbers appear in Apple School Manager or Apple Business
Manager · Are enrolled in an MDM salutian using Apple School Manager or Apple Business
Manager The fallowing devices are supervised automatically when enrolled ln Apple School Manager or Apple Busirless Manager; · iPhane and iPad touch with iGS13 or later
iPad with iPadQS 13.1 or later · Apple TV with tvGS 13 or later
Mac computers with macOS 10.14.4 or later Impprtant: If the user knows the passcode, iPhone and iPad devices that aren't supervised
can have manuallyinstalled canfiguratian profiles removed, even if the option is set
ta "'never." Manually installed configuration profiles far Mac computers can be removed using the profiles cammand-line tool, ar System Preferences if the user knows an administrator'suser nar'ne and password. As of r'nacQS 10.15,like aniQS and iPadQS,
profiles installed with MDM must 'be removed with MDM, or they are remaved autmoatically
upon unenrallment fram MDMI.
Apple Platform Security
CONFIDENTIAL

Activation Lock has different enforcement mechanisms in iQS and iPadQS devices, an Intelbased Mac with the Apple T2 Security Chip, and a Mac with Apple silicon.
Qn iPhone and iPad devices, Activation Lock is enforced through the activation process after the Wi-Fi selection screen in iGS and iPadQS Setup Assistant. When device indicates that its activating, It sencls a reqLIest to BA Apple sel"vef' to get an actlvatloA certificate. Devices that are Activation Locked prompt the user for the iCloud credentials of the user that enabled Activation Lock at this time. iQS and iPadQS Setup Assistant won't progress Llnless B vallcl cel'tlflcate can be obtalnecl.
In a Mac with Apple silicon, LLB verifies that a valid LocalPolicy for the device exists and that the LOCBIPOIIcy policy nonce values match the values stored in the Secure Storage chip. LLB boots to recoveryQS if:
There is no LocalPolicy The LocalPolicy is invalid for that Mac The LocalPolicy nonce values don't rnatch the values stored in the Secure Storage Chip I'ecovel'yGS cletects that the Mac computer IsA't actlvatecl BAcl contacts the actlvatlon server to get an activation certificate. If the device is Activation Locked, recoveryGS prompts the user for iCloud credentials of the user that enabled Activation Lock at this tIITle. After a vallcl actlvatloA cel'tlflcate Is obtalnecl, that actlvatlon cel'tlflcate key Is Llsecl to obtain a RemotePolicy certificate. The Mac computer uses the LocaIPolicy key and RemotePolicy certificate to produce a valid LocalPolicy. LLB won't allow booting of macQS unless a valid LocalPolicy is present.
In Bn Intei-based Mac with a T2 chip, the T2 chip firmware verifies that a valid activation certificate is present before allowing the computer to boot to macQS. UEFI firmware loaded by the T2 chip is responsible for querying the activation status of the device from the T2 chip ancl bootlAg to I'ecovel'yOS lnsteacl of bootlAg to macOS lf a vallcl actlvatlon cel" tlflcate isn't present. recoveryQS detects that the Mac isn't activated and contacts the activation server to get an activation certificate. If the device is Activation Locked, recoveryGS prompts the user for iCloud credentials of the user that enabled Activation Lock at this time. UEFI firmware won't allow booting of macQS unless a valid activation certificate is presen t.

Managed Lost Mode is used to locate supervised devices when they are stolen. After they are located, they can be remotely locked or erased.

Appfe PIBIIGfm SpcUIIt x
CONFIDENTIAL

DX-5492.1 83

APL-EG 08874956

If a supervised iQS or iPadQS device with iOS 9 or later is lost or sto en, an MDM administrator can remotely enable Lost Mode on that device. When Lost Mode is enabled, the current user is logged out and the device can't be unlocked. The screen disp ays a ITIessage that can be CLlstomlzecl oy the acIIYIInlstl'atol', such as dlsplaylng a phone ALIIYIbBI' to call if the device is found. When the device is put into Lost Mode, the administrator can request the device to send its current location (even if Location Services are off) and, optionally, play a sound. When an administrator turns off Lost Mode, which is the only way the mode can be exited, the user is informed of this action through a message on the Lock Screen or an alert on the Home screen.
iOS, iPadQS, and macQS devices can be erased remotely by an administrator or user (instant remote wipe is available only if the Mac has FIIBVault enabled). Instant remote wipe is achieved by securely discarding the media key from Effaceable Storage, rendering all
clata LI A I'eacl able. A reIYIQ'te wipe CQIYIITIaAcl can Iree I Alt latecl by mob lie clevfcB IYIanag ement
(MDM), Microsoft Exchange ActiveSync, or iCloud. Qn a Mac, the computer sends an acknowledgment and performs the wipe With a remote lock, MDM requires that a six-digit passcode be applied to the Mac, rendering any user locked out until this passcode is typed In.
When a remote wipe command is triggered by MDM or iCloud, the device sends an acknow(edgment and performs the wipe. For remote wipe through Microsoft Exchange ActiveSync, the device checks in with the Microsoft Exchange Server before performing the wipe. Remote wipe isn't possible in the following situations:
With User Enrollment
Using Microsoft Exchange ActiveSync when the account that was installed with User E nro I lm e nt
Using Microsoft Exchange ActiveSync if the device is supervised
Users can also wipe iQS and iPadQS devices in their possession using the Settings app. Ancl as mentlonecl, clevlces can be set to autQITIatlcally wipe aftel' a sel'Ies Qf falieci passcocle a t teITlpts.

Apple PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.1 84

APL-EG 08874957

Shared iPad is a multiuser mode for use in iPad deployments. It allows users to share an IPacl while mallntainlng separation of clocuments Bncl clata for each user. Each user gets their own private, reserved storage location, which is implemented as an APFS (Apple File System) volume protected by the user's credential. Shared iPad requires the use of a Managed Apple ID that's issued and owned by the organization and enables a user to sign in to any organizationally owned device that is configured for use by multiple users. User data Is partitlonecl Into separate clll ectones, each In their own cia'ta protection clomalns Bncl protected by both UINIX permissions and sandboxing. In iPadOS 13.4 or later, users can also sign in to a temporary session. When the user signs out of a temporary session, their APFS volume is deleted and its reserved space is returned to the system.
Both native and federated Managed Apple IDs are supported when signing in to Shared iPad. When using a federated account for the first time, the user is redirected to the Identity Provider's (IdP) sign-in portal. After authenticated, a short-lived access token is issued for the backing Managed Apple IDs -- and the login process proceeds similarly to the native Managed Apple IDs sign-in process. Once signed in, Setup Assistant on Shared iPad prompts the user to establish a passcode (credential) used to secure the local data on the device and to authenticate to the login screen in the future. Like a single-user device, in which the user would sign in once to their Managed Apple ID using their federated account and then unlock their device with their passcode, on Shared iPad the user signs in once using their federated account and from then on uses their established passcode.
When a user signs in without federated authentication, the Managed Apple ID is authenticated with Apple identity Service (IDS) using the SRP protocol. If authentication is successful, a short-iived access token specific to the device is granted. If the user has used the device before, they already have a local user account, which is unlocked using the same credential.
If the user hasn't used the device before or is using the temporary session feature, Shared iPad provisions a new UNIX user ID, an APFS volume to store the user's personal data, and a local keychain. Because storage is allocated (reserved) for the user at the time the APFS volume is created, there may be insufficient space to create a new volume. In such an event, the system will identify an existing user whose data has finished syncing to the cloud and evict that user from the device in order to allow the new user to sign in. In the unlikely event that all existing users haven't completed uploading their cloud data, the new user sign in fails. To sign in, the new user will need to wait for one user's data to finish syncing,,or have an administrator forcibly delete an existing user account, thereby risking data loss.
If the device isn't connected to the internet (for example, if the user has no Wi-Fi access point), authentication can occur against the local account for a limited number of days. In
that situation, only users with previously existing local accounts or a t emporary session
can sign in. After the time limit has expired, users are required to authenticate online, even if a local account already exists.

x Apple PIBtfGI tH SPCUI It
CONFIDENTIAL

DX-5492.1 85

APL-EG 08874958

After a user's local account has been unlocked or created, if it's remotely authenticated, the short-lived token issued by Apple's servers is converted to an iCloud token that permits signing in to iCloud. Next, the users' settings are restored and their documents and data are synced from iCloud.
While a Llser session Is active ancl the device I emaliAs online, clocUmeAts and clata al'e storecl Qn ICIQUcl as they afe created Qr ITIoclif feel. In aclclltion, a backgf'QUncl synciAg mechanism ensures that changes are pushed to iCloud, or to other web services using NSLIRLSession background sessions, after the user signs out. After background syncing for that user is complete, the user's APFS volume is unmounted and can't be mounted again without the user signing back in.
Temporary sessions don't sync data with iCloud, and a though a temporary session can sign into a third-party synclng service such as Box or Google Drive, there's no facility to contlAUB synclng clata when the teITlpol'af'y session ends.
When a user signs out of Shared iPad, that user's keybag is immediately locked and all apps al'e shUt clown. To accelerate the case of a Aew Llsef' slgnIAg In, IPacIQS clefel's some Gl'cIIAai'y sign-GUt actloAs temporarily ancl pl'esents a IogIA wfnclow to the Aew user. If a Llsei' signs in during this time (approximately 30 seconds), Shared iPad performs the deferred cleanup as part of signing in to the new user account. However, if Shared iPad remains idle, it triggers the deferred cleanup During the cleanup phase, Login Window is restarted as if anothel sig n-QLlt hacl GCCUI'I'ecl.
When a temporary session is ended, Shared iPad performs the full logout sequence and deletes the temporary session's APFS volume immediately.
Apple Configurator 2 features a flexible, secure, device-centric design that enables an administrator to quickly and easily configure one or dozens of iQS, iPadQS, and tvQS devices connected to a Mac through LISB (or tvQS devices paired through Bonjour) before giving them to users. With Apple Configurator 2, an administrator can update software, install apps and configuration profiles, rename and change wallpaper on devices, export clevlce IAfol" ITIatlQA ancl clocLImeA ts, ancl ITIUch ITIQI'e.
Administrators can also choose to add iQS, iPadQS, and tvQS devices to Apple School Manager or Apple Business Manager using Apple Configurator 2, even if the devices weren't purchased directly from Apple, an Apple Authorized Reseller, or an authorized
cellular carrier. When the administrator sets up a device that has been manually enrolled,
it behaves like any other enrolled device, with mandatory supervision and mobile device management (MDM) enrollment. For devices that weren't purchased directly, the user has a 30-day provisional period to remove the device from enrollment, supervision, and MDM. The 30-day provisional period begins after the device is activated.

Apple PIBIIGIm SppUI IIX
CONFIDENTIAL

DX-5492.1 86

APL-EG 08874959

lf iGS, iPadQS, and tvQS devices that have absolutely no internet connection and that are connected to a host Mac with an internet connection while the devices are being set up, Gl'gaAIzatloAs can Use Apple CQAflgUlfatoi" 2 to activate theIYI. Aclmlnlstl'Btors can I'estof'e,
activate, Bnd prepaf'e clevlces with their Aecessaf'y conf lgUration IncIUcllAg Apps, Pl'of iles, and Documents without ever needing to connect to either Wi-Fi or cellular networks. This featUre doesn t allow Bn BcllTIInlstl'Btol to bypass Bny exlstlAg Activation Lock reciUllrelTlents AQ I'ITIBIIy I'e q U I I'e d cl LI I' In 9 A G Ateth ef'e d B c t I v BtI o A.

Screen Time is a feature -- in iGS 12 or later, iPadQS, and macGS 'IG.'15 or later, and some features of watchQS 6 or later -- that lets users understand and control their own app and web usage, or that of their chlildren. Although Screen Time isn't a new system security featUI'e, lt's IITlportant to Undel'stancl how Scl'een Time pl'Qtects the secUI'Ity Bncl pl'Ivacy Gf the data gathered and shared between devices.
In Screen Time, there are two types of users: adults and children.
The table below describes the main features of Screen Time.

View usage data Enforce additional restrictions Set web usage limits Set app limits Configure Downtime

iPadQS
macos
iPados macos watchQS
iPadQS macQS
iPados macos watchQS
iPadQS
macos
watchQS

Apple PIBIIGI m Secuf lr v
CONF II3ENTIAL

DX-5492.1 87

APL-EG 08874960

For users managing their Qwn clevice Llsage, ScreeA Time conti Qls ancl usage clata can be synced across devices associated to the same iCloud account using CloudKit end-to-end encryption. This requires that the user's account have two-factor authentication enabled (syncing is on by default). Screen Time replaces the Restrictions feature found in previous versions of iQS and iPadGS, and the Parental Controls feature found in previous versions Qf macQS.
In iQS 13 or later, iPadGS 13.'I or later, and macOS 'I0.15 or later, Screen Time users and managed children automatically share their usage across devices if their iCloud account has two-factor authentication enabled. When a user clears Safari history or deletes an app, the corresponcllng usage clata Is rernovecl from the clevlce ancl all syncecl devices.
Parents can also use Screen Time in iQS, iPadQS, and macOS devices to understand and control their children's use. If the parent is a family organizer (in iCloud Family Sharing), they can view usage data and manage Screen Time settings for their children. Children are informed when their parents turn on Screen Time, and they can monitor their own usage as well. When parents turn on Screen Time for their children, the parents set a passcode so their children can't make changes. When they reach age of majority (age will vary depending on country or region), the children can turn this monitoring off.
Usage clata aAcl CQAflguratlon settings are traAsferrecl between the parent's ancl chllcl's devices using the end-to-end encrypted Apple Identity Service (IDS) protocol. Encrypted data may be briefly stored on IIDS servers until it's read by the receiving device (for example, as soon as the iPhone, iPad, Qr iPod touch is turned on, if it was Qff). This data isn't readable by Apple.
If the user turns on Share iPhone 8 Watch Analytics, only the following anonymized data is collected so that Apple can better understand how Screen Time is being used:
Was Screen Time turned on during Setup Assistant or later in Settings Change in Category usage after creating a limit for it (within 90 days) Is Screen Time turned on lls Downtime enabled Number of times the "Ask for more" query was used Number of app limits Number of times users viewed usage in the Screen Time settings, per user type and per view type (local, remote, widget) Number of times users ignore a limit, per user type Number of times users delete a limit, per user type No specific app or web usage data is gathered by Apple. When a user sees a list of apps in Screen Time usage information, the app icons are pulled directly fram the App Stare, which doesn't retain any data from these requests.

Appfe PIBtfpfm SPCUIItg
CONFIDENTIAL

DX-5492.1 88

APL-EG 08874961

Apple security and privacy certifications

Introduction to Apple security and privacy certifications
Apple maintains independent certifications and attestations over its hardware, software (including operating systems and apps), and services to provide customers with an independent review of Apple's security and privacy practices. For questions about Apple Security and Privacy Certifications, contac
Hardware certifications
For information on public certifications related to Apple hardware and associated firmware components, see: · Pro d u ct security certifications for the AppleT2 Security Chip · Pr o duct security certifications the Secure Enclave Processor
Software certifications
For information on public certifications related to Apple operating systems, see: · Pro d u ct security certifications for iOS
Product security certifications for iPadOS · Pr o duct security certifications for macOS · Pr o duct security certifications for tvOS · Pr o duct security certifications for watchOS
Application certifications
For information on public certifications related to Apple applications, see: · Sec u r i ty certifications for Apple Applications
Services certifications
For information on public certifications related to Apple internet services, see: · Ap p le Internet Services Certifications

Apple platle m ceca ty
CONFIDENTIAL

DX-5492.189

1B9
AlsL-EG 08874982

Additional Government appr'ovals
Apple suppor'ts governments and organizations worldwide to develop guides that give instructions and recommendations for maintaining tightly. managed environments;
Additional Govef nment approvals
Apple security assurance
Apple pursues a comprehensive approach with security certifications to provide customers with the appropriate assurance for all Apple platforms. Howev rer, not alf technical areas are accepted under mutual recognition arrangements(MRAs},oryethave comprehensive security certification standards. For certifications that are well defined and mutually recognized by several nations, Apple pursues and achieves annual certifications in alignment with each major operating. system release. For coverage in underrepresented areas, Apple has actively engaged in the development of emerging security standards. The mission is to drive globally accepted, comprehensive security certification coverage across Apple hardware, software, and services.
Hardware and software certifications and validations
VÃth comprehensive development and management ef the whole platform from silicon through the operating system, applications and services, Apple starts with certification building blocks that apply broadly across multiple platforms where appropriate. One such building block ls the validation of corecrypto used for all software and hardware cryptographic module deployments within Apple developed operating systems, A second such building block is the certificatiori of the Secure Enclave, which is riow embedded in many Apple devices. A third is the certification of the Secufe Element found in all Apple devices with Touch II3 and iPhone devices with Face ll3. These hardvtrare certification building blocks form a foundation for broader platform security certifications.
Cr Yptographic Module Validations FIPS 140-2/3 (ISO/IEC
19790)
The cryptographic modules ln Apple operating systems have been repeatedly validated by the Cryptographic Module Validation Program (CMVP) as being conformant with U.S. Federal Information Processirig Standards (FIPS} 'l4Q-2 following each major release of the operating systems since 20'l2. After each major release, Apple su'bmits all modules to the CMVP for full cryptographic validatlori. These validated modules provide cryptographic operations for Apple provided services and are available for third-party apps to use. Apple achieves Security Level 1 each year for the software-based modules: "'corecrypto Module on Intel and the "corecrypto Kernel Module on intel' * for macQS, "corecrypto Module on ARM'" and «corecrypto Kernel Module on ARM" for iOS, ipad08, tvOS, wetchOS
and the fir'mware on the embedded Apple T2 SecurityChip in a Mac.
Apple Platform Security
CONF I l3ENTIAL

In 2019, Apple achieved the first FIPS 146-2 Security LeveI 2 far the embedded hardware cryptographic madufe Identified as "'Apple CareCrypto Module: Secure Key Stare e enabling government approved use of the Secure Enclave generated and managed keys. Apple will continue ta pursue higher security levels far the hardware cryptographic module with each successive major operating system refeese as appropriate.
FIPS 140-3 was approved by the U S. Department of Cammerce in 2019. The mast notable change in this version of the standard is the use of ISO/IEC standards, I'SO/IEC 'l9790:2016 and the associated testing standard ISQ/IEC 24759:2017. The CMVP has initiated a transition program and have Indicated that starting In 2020, cryptographic modules will begin to be validated using FIPS 140-3 as a basis. Apple cryptographic modules will aim te meet and transition ta the FIPS 140-3 standar'd as saon as practicable.
For cryptographic modules currently in the testing and validation processes, the CMVP
maintains twa separate fists that maycontain information about. proposed validations Far cryptagraphfc modules under testing with an accredited laboratory, the I mplemnetation
Under Test List may list the module. Once submitted by the laboratory for validation by the CMVP, the Apple cryptographic modules appear in the Modules in Process List. At. this point the laboratory testing is complete and waiting for validation of the testing by the CMVP. Since the duration af this part af the process. is variable please look to these two process lists first if enquiring about. their validation status between the date of a major operating system release arid the issuance of the validation certificate.
Product certifications (Common Criteria ISO)/IEC 16408)
Common Criteria (ISO/IEC 'f9408) is a standard that is used by many organizations as a basis for performing security evaluations of IT products.
For certifications that may be mutually recaqnized under the internatianal Common Criteria Recagnitian Arrangement (CCRA), see the Common Criteria Portal. The Common Criteria standard may also be used outsfde the CCRA by national and private validation schemes.
The goal, as stated by the Common Criteria community, is for an internationally approved set af security standards to provide a clear and reliable evaluation of the security capabilities. of Information Technology products.- By providing an independent assessment of a product.'s ability ta meet security standards, Common Criteria Certification gives customers more confidence in the security of Infor'matian Techrialogy. products and leads ta mole Informed decisions.
Through the Common Cri'teria Recagni'tion Arrangement (CCRA), member countries and regions have agreed ta recognize the certification af information Technology products with the same level of confidence. "Protection Profiles" (PPs), are documents, which specffy security requirements for a class of device types such as "Mobility", are used to provide comparability between the evaluations of IT products within the same class. Membership of the CCRA along with a growing list of approved Protection Profiles (PPs) continues to grow. on a yearly basis to address emerging technology.- Thfs arrangement permits a product developer ta pursue a single certification under any one af the Autharizing Schemes and have it recognized by any af the CCRA signatories.

Apple Platform Security
CONFIDENTIAL

DX-5492.193

Many alder PPs have been archived and are being replaced with the development af targeted Protection Profiles focusing on spec}fjc solutions and environments. In a eancerted effort ta ensure continued mutual r aecegnition across all CCRA members,, the
International Technical Community('iTC) cantinues to drive all future PP dev'ejopment and
updates tairvards Callaborative Protection Profiles (ePPs) which are developed from the star't with involvement from multiple Common Criteria (CC) schemes. The specification document expressing the security requirements evaluated for an IT product is called a eSeeurity Target" (ST); and ta gain the stated assurance,, the device must be configured as described in the guidance document. associated with the evaluation The security assurance obtained hy using the Common Criteria standards is expressed using security assurance requirements that can be specified in a Protection Profile (PP) or an ST. Evaluation Assurance Levels (EAL) group together commonly used sets af security assurance requirements and may be specified in PPs and 8Ts to support. comparability. Apple began pursuing certificatlons under this new Common Criter'ia restr'uctur'e. with selected PPs starting in early 2Q15. Since 2615, Apple has achieved Common Criteria (ISQj IEC 16408) eertificatians for each major iGS release and has expanded eaverage ta include assurance provided 'by new Protection Profiles (PPs). These include the fallowing: iGS and iPadOS an mobile devices (iPhone and iPad):
Apple Mobile Device Certifieatian Mobjle Device Fundamental Protection Profile (P/atforrn Certification)
· PP-Module for MQM Agent (MDjv/ Management afthe P/atform)
· Fu nctional Package. far TLS(All T/8 communication from and ta the P/atfarm) · PP-Module for VPN Client (A/ways Qn VPN using //r',Ev2 for /Psec)
Extended Package for Wireless LAN Clients (Authenticated and Encrypted Nfire/ebs
Access(
Apple App Certrfication · Application Software (Contacts) · Extended Package for Web Browsers (8aferi brarrvser) Apple has taken an active role within the technical communities focused on evaluating mobile scour'ity technologies. These include the international Technical Communities (iTC) responsible for developing and updating collaborative Protection Profiles (cPPs). Apple continues ta evaluate and pursue certifications against PPs and cPPs available today and
under development.
Apple platform certificatians far the North America market are generally performed with the National Iriforrnatiari Assurance Partnership (NIAP) wha maintain a list of projects currently in evaluation but nat yet certified. In addition to the general platform certificates listed,, other CC certifjcates have been issued jn order to demonstrate specific security requirements for some markets.
Apple Platform Security
CONF jl3ENTIAL

SGf'V(CGS CGftACBtlOAS
Apple inc. maintains certifications ln compliance with standards such as ISO/IEC 27001 and 27018 to enable Apple customers to address their regulatory and contractual obligations, These eertifications provide our customers with an independent attestation over Apple Information Security and Privacy practices for in-.scope systems.
Apple Internet Services Certifications
Apple Platform Security
CONF I l3ENTIAL

Address Space Layout Randomizatio n ( A SLR) A techniiclue employed by operating systems to make the successful exploitation by a software bug much more difficult. By ensLII'Ing IYIeITIQI'y Bclclresses Bncl Offsets Bre LIApl'ecllctable, exploit cocle can't hal'cl code these values.
AES (Advanced Encryption Standard) A popular global encryption standard used to encl'ypt clata to keep lt private.
AES cryptographic engine A dedicated hardware component that implements AES.
AES-XTS A mode of AES defined in IEEE 'l6'l9-2007 meant to work for encrypting storage rn e claI .
APFS (Apple File System) The default file system for iQS, iPadQS, tvQS, watchQS, and Mac computers using macQS 'I0.13 or later. APFS features strong encryption, space sharing, snapshots, fast directory sizing, and improved file system fundamentals.
Apple Business Manager Apple Business Manager is a simple, web-based portal for IT administrators that provides a fast, streamlined way for organizations to deploy Apple devices that they have purchased directly from Apple or from a participating Apple Authorized Reseller or carrier. They can automatically enroll devices in their mobile device management (MDM) solution without having to physically touch or prepare the devices before users get them.
Apple Identity Service (IDS) Apple's directory of iMessage public keys, APNs addresses, and phone numbers and emailaddresses that are used to look up the keys and device Bclcll'esses.
Apple Push Notification service (APNs) A worldwide service provided by Apple that delivers push notifications to Apple devices.
Apple School Manager Apple School Manager is a simple, web-based portal for IT BclrAIAIstrators that pl ovlcles B fast, stl eaITIIInecl way for organlzatloAs to cleploy Apple devices that they have purchased directly from Apple or from a participating Apple Authorized Reseller or carrier. They can automatically enroll devices in their mobile device management (MDM) solution without having to physically touch or prepare the devices before users get them.
Apple Security Bounty A reward given by Apple to researchers who report a vulnerability that affects the latest shipping operating systems and, where relevant, the latest hardware.
Boot Camp Boot Camp supports the installation of Microsoft Windows on supported Mac computers.

Appfe PIBIIGfm SppUIItg
CONFIDENTIAL

DX-5492.1 94

APL-EG 08874967

Boot Progress RegisteI (BPR) A set of system on chip (SoC) hardware flags that software can use to track the boot modes the device has entered, such as Device Firmware Update (DFU) mode and Recovery mode. After a Boot Progress Register flag is set, it can't be cleared. This allows later software to get a trusted indicator of the state of the system.
Boot RGM The very first code executed by a device's processor when it first boots. As an integral part of the processor, it can't be altered by either Apple or an attacker.
CKRecord A dictionary of key-value pairs that contain data saved to or fetched from CloudKit.
Data Protection File and Keychain protection mechanism for supported Apple devices. It can also refer to the APIs that apps use to protect files and keychain items.
Data VauIt A mechanism -- enforced by the kernel -- to protect against unauthorized access to data regardless of whether the requesting app is itself sandboxed.
Device Firmware Upgrade (l3FU) mode A mode in which a device's Boot RGM code waits to be recovered over USB. The screen iis black when in l3FU mode, but upon connecting to a computer running iTunes or the Finder, the following prompt is presented: "iTunes (or the Finder) has detected an (iPad, iPhone, or iPod touch) in Recovery mode. The user must restore this (iPad, iPhone, or iPod touch) before it can be used with iTunes (or the Finder)."
direct memory access (l3MA) A feature that enables hardware subsystems to access main memory independent of the CPU.
Effaceable Storage A dedicated area of NAND storage, used to store cryptographic keys, that can be addressed directly and wiped securely. While it doesn't provide protection if an attacker has physical possession of a device, keys held in Effaceable Storage can be used as part of a key hierarchy to facilitate fast wipe and forward security.
Elliptic Curve Diffie-Hellman Exchange (ECDI-IE) Elliptic Curve Diffie-Hellman Exchange with ephemeral keys. ECI3HE allows two parties to agree on a secret key in a way that prevents the key from being discovered by an eavesdropper watching the messages between the two parties.
Elliptic Curve Digital Signature Algorithm (ECDSA) Elliptic Curve Digital Signature Algorithm (ECI3SA) is a digital signature algorithm based on elliptic curve cryptography.
eSPI The Enhanced Serial Peripheral Interface bus for synchronous serial communication.
Exclusive Chip Identification (ECID) A 64-bit identifier that's unique to the processor in each iGS and iPadGS device. When a call is answered on one device, ringing of nearby iCloud-paired devices is terminated by briefly advertising through Bluetooth Low Energy (BLE) 4.0. The advertising bytes are encrypted using the same method as Handoff aclvel'tlseITIents. Usecl as paf"t of the persoAallzatloA pl'ocess, It'5 Aot conslclefecl a seel'et.
file system key The key that encrypts each file's rnetadata, including its class key. This is kept in Effaceable Storage to facilitate fast wipe, rather than confidentiality.
group ID (GID) Like the UII3, but common to every processor in a class.
hardware security module (I-ISM) A specialized tamper-resistant computer that safegLIarcls aAd ITIaAages cllgItal kBys.
I-IMAC A hash-based message authentication code based on a cryptographic hash function.

Appfe PIBIIGfm SppUIIIX
CONFIDENTIAL

DX-5492.1 95

APL-EG 08874968

IBaat Code that loads XNU,,as part of the secure boat chain. Depending on the system on chip (SoC) generation, iBoot may be loaded by the Low-Level Bootloader or directly by the Boot RGM.
Input/Qutput Memory Management Unit (IGMMU) An input/output memory management unit. A subsystem in an integrated chip that controls access to address space from other input/output devices and peripherals.
integrated circuit (ic). Also known as a rnicrach/p.
Joint Test Action Group (JTAG) A standard hardware debugging tool used by programmers and circuit developers.
keybag A. data structure used to.stare a collection of class. keys. Each type (user, device., system, backup, escrow, or- iCIoud Backup) has the same format.
A header containing: Version (set ta four in iQS12 or later), Type (system,,backup, escrow, or iCloud Backup), Keybag UUID, an HMAC if the keybag is signed, and the method used for wrapping the class keys -- tangling with the UID ar PBKDF2, along with the salt and iteration count-.
A. list af class keys:- Key UUII3, Class (which file or Keychain Data Protection class), wrapping type (UID-derived key anly; UID-derived key and passcode-derived key),
wrapped class key,,arid a public key for asymmetricclasses.
keychain The jnf'restructure and a set of APls used by Apple operating systems and thirdparty apps to store and retrieve passwords, keys, and other sensitive credentials.
key wrapping Encrypting one key with another. iOS and iPadOS use NIST AES key wrapping, in accordance with RFC 3394.
Low-Level Bootldader (LLB) Gn Mae computers with a two-stage hoot architecture t LLB contains the cade that's inv'oked by the Boot RQM and that in turn loads iBoot, as part af the secure boot cheirl.
media key Part af the encryptian key hierarchy that. helps provide for a secure and instant wipe. In iQS, IPadQS, tvQS, and watchOS,, the media key wraps the metadata on the data volume (and thus without it access to. all per-file keys is impossible, render'ing files protected with Data Protection inaccessi'ble), In macOS, the media key wraps the keying material, all rnetadata, and data an the FileVault protected volume. Iri either case, wipe of the media key renders encrypted data inaccessible.
memory.cantrolier The subsystem in a system on chip that controls the interface between the system anchip and itsmain memory'.
mobile device management (MOM) A.service that lets the user remotely manage enrolled devices. After a device is enrolled, the user can use the MDM service over the netwark ta configure settings and perform other tasks on the device without user interaction.
MAND. Nonvolatilre flash memory.
per-file key The 266-bit. key used ta encrypt a file an the file system using AES'i28-XTS, where the 266-bit key is split to provide both the 128-bit tweak key and the 128-bit cipher key. The per'-file key is wrapped by a class key and is stored in the file's metadata.

Apple Platform Security
CONFIDENTIAL

DX-5492.196

provisioning profile A property list (.plist fiie) signed by Apple that contains a set of entities and entitlements allowing apps to be installed and tested on an iQS or iPadQS device. A development provisioning profile lists the devices that a developer has chosen for ad hoc distribution, and a distribution provisioning profile contains the app II3 of an enterprise-developed app.
Recovery mode A mode used to restore many Apple devices if it doesn't recognize the user's device so the user can reinstall the operating system.
ridge flow angle mapping A mathematiical representation of the direction and width of the I'Iclges ex'tl actecl frQITI a portion Qf a flngerpl'IAt.
Secure Storage Chip Qn supported devices, the Secure Enclave is paired with a Secure Storage Chip for anti-replay nonce storage. A chip designed with immutable RQ code, a hal'clwal'e I'ancloIYI numbell' generatol', cl'yptogf'aphy engines, ancl physical taITlpel' cletectlQA. To read and update nonces, the Secure Enclave and storage chip employ a secure protocol that ensures exclusive access to the nonces. There are multiple generations of this technology with differing security guarantees.
sepQS The Secure Enclave firmware, based on an Apple-customized version of the L4 microkernel.
software seed bits Dedicated bits in the Secure Enclave AES Engine that get appended to the UID when generating keys from the UID. Each software seed bit has a corresponding lock bit. The Secure Enclave Boot RQM and operating system canindependently change the value of each software seed bit as long as the correspondiing lock bit hasn't been set. After the lock bit is set, neither the software seed bit nor the lock bit can be modified. The software seed bits and their locks are reset when the Secure Enclave reboots.
SSI3 controller A hardware subsystem that manages the storage media (solid-state drive).
System Coprocessor Integrity Protection (SCIP) A mechanism Apple uses to prevent modification of coprocessor firmware.
system on chip (SoC) An integrated circuit (IC) that incorporates mutiple components into a single chip. The Application Processor, the Secure Enclave, and other coprocessors are components of the SQC.
system software authorization A process that combines cryptographic keys built into hardware with an online service to check that only legitimate software from Apple, appl'opl'late to sLIpportecl devices, Is sulppllBcl ancl Installecl at Llpgracle time.
tangling The process by which a user's passcode iis turned into a cryptographic key and strengthened with the device's UID. This process ensures that a brute-force attack must be performed on a given device, and thus is rate limited and can't be performed in parallel. The tangling algorithm is PBKI3IF2, which uses AES keyed with the device UIII3 as the pseudorandom function (PRF) for each iteration.
UEFI firmware Unified Extensible Firmware Interface, a replacement technology for BIGS to connect firmware to a computer's operating system.
Uniform Resource Identifier (URI) A string of characters that identifies a web-based

Apple PIBIIGI tH SppUI IIX
CONFIDENTIAL

DX-5492.1 97

APL-EG 08874970

unique II3 (UID) A 256-bit AES key that's burned into each processor at manufacture. It can't be read by firmware or software, and it's used only by the processor's hardware AES Engine. To obtain the actual key, an attacker would have to mount a highly sophisticated and expensive physical attack against the processor's silicon. The UII3 isn't related to any other identifier on the device including, but not limited to, the UDII(3
xART eXtended Anti-Replay Technology or a set of services that provides encrypted, authenticated persistent storage for the Secure Enclave with anti-replay capabilities based on the physical storage architecture. See Secure Storage Chip.
XNU The kernel at the heart of the Apple operating systems. It's assumed to be trusted, and it enforces security measures such as code signing, sandboxing, entitlement checking, and Address Space Layout Randomization (ASLR).

Aopfe PIBtfGfm SPCUIIt x
CONFIDENTIAL

t3X-5492.1 98

APL-EG 08874971

December 2Q29
Apple Platform Security
CONFIDENTIAL

Lipdated for:
iQS '1 4.2.1 iPadOS 'l4.2
· macGS 11.1 · tvOB 14.2
· watchQS 7.1 Topic's added:
· Memory safe iBoot implementation Boot process for a Mac with Apple silicon Boot modes for a Mac with Apple silicon
· Startup Disk security policy control for a Mac with Apple silicon
· LocalPolicy signing-key creation and management · Contents of a LocalPolicy fi1e for a Mac with Apple
silicon · Signed system volume security in macOS
Apple Security Research Device Password Monitoring · Ipv6 security · Car keys security in iOS Topics, updated:
· Secure Enclave Hardware microphone disconnect
· recoveryQS and diagnostics environments for an Intel-based Mac Direct memory access protections for Mac CcrrlPutel'S
· Kernel extensions in macOS
· System IntegrityProtection
· System security for watchGS Managing Filevault in rnacQS
· App access to saved passwords
Password security recommendations · Apple Cash security in iQS, iPadQS, and watchOS
· Secure Business Chat usingthe Messages app · Wl -- FI privacy · Activation Lock security
Apple Configurator 2 security

April 202'0 November 20"I8

Updated for:
· IOS 13.4 iPadOS 13.$ rnacO'8 10.18.4
· tvOS 13,4 · watchOS, 6.2 Updates:
IPad microphone disconnect added to Hardware microphone disconnect. Data veulte adlded to Protecting app access to user data. · Updates to Managing FileVault in macOS and Commend-line tools. · Malwsre Removal Tool additions in Protecting against malware in macQ'S. · Updates to Shared iPad security in iPadOS. New Introduction to Apple security and privacy certlficatlons topic. Llpdates to Apple security assurance.
Merged the. iOS Security Buide, rnacOS Security Overview, and the Apple T2 Security Chip Overview Updated for: · i'OS 13.3 · ipadGS 'l3.3
macOS 10.15.2 · tvOS 13.3
watchOS 6.1.'1 Privacy Controle, Siri snd Siri Suggestions,,end Safari Intelligent Tracking Prevention have been removed. Sae https://www.apple.corn/privacy/ for the latest on those f est urea.
Updated for IOS 12 3
Supportfor TLS 1.3 · ReVtsed description of AirDrep security
DFU mode and Rectory mode
Pssscode requirements for accessory connections
Updated for iOS '12.1
· Group FaeeTime

Apple Platform Security
CONFIDENTIAL

Qctober 2017 July 2017

Updated for iQS 12 Secure Enclave QS Integrity Protection Express Card with power reserve DFLI mode and Recovery mode HomeKit TV Remote accessories Contactless passes Student ID cards Siri Suggestions Shortcuts in Siri Shortcuts app User password management Screen Time Security Certifications and programs
Llpdated for iQS 'l1.4 Biometric policies HomeKit Apple Pay Business Chat Messages in iCloud Apple Business Manager
Llpdated for iQS t L2 Apple Pay Cash
Llpdated for iQS 11.1 Security Certifications and programs Touch ID/Face ID Shared Notes CloudKit end-to-end encryption TLS update Apple Pay, Paying with Apple Pay on the web Siri Suggestions Shared iPad
Updated for iQS 10.3 Secure Enclave File Data Protection Keybags Security Certifications and programs SiriKit HealthKit Network Security Bluetooth Shared iPad Lost Mode Activation Lock Privacy Controls

Appfe PIBdcfm Secuflty
CONFIDENTIAL

DX-5492.201

APL-EG 08874974

March 2017 September 2015

Updated for iQS 10
System Security Data Protection classes Security Certifications and programs HomeKit, ReplayKit, SiriKit Apple Watch WI-FI, VPN Single sign-on Apple Pay, Paying with Apple Pay on the web Credit, debit, and prepaid card provisioning Safari Suggestions
Llpdated for iQS 9.3
Managed Apple ID Two-factor authentication for Apple ID Keybags Security Certifications Lost Mode, Activation Lock Secure Notes Apple School Manager Shared iPad
Llpdated for iQS 9 Apple Watch Activation Lock Passcode policies Touch ID API support Data Protection on AB uses AES-XTS Keybags for unattended software update Certification updates Enterprise app trust model Data Protection for Safari bookmarks App Transport Security VPN specifications iCloud Remote Access for HomeKit Apple Pay Rewards cards, Apple Pay card issuer's app Spotlight on-device indexing iQS Pairing Model Apple Configurator 2 Restrictions

APPIAN PBI dcfm Seoul lty
CONFIDENTIAL

DX-5492.202

APL-EG 08874975

Applei,nc.
NI 2020 Apple Inc. All rights reserved.
Usa of the "keyboard" Apple logo (Option-Shift-Kj for coramercial purposes without the prior written consent of Apple may constitute trademark infringement and unfair competition in violation of federal and state laws. Appl'e, the Apple logo, AirDrop, AirPlay, Apple CarPlay, Apple Musie, Apple Pay, Apple TV, Apple Watch, CloudKit, Face ID, FaoaTime, FffeVault, Finder, Ffrayyire, Handoff, HdrneKit, HomePod., iMac, iMac Pro, iMessage, iPad, ipad Air, ipado8, iphone, ipod touch, iTunes,, Keychain, Lightning, Mac, MacBook, MacBook Air, MacBook pro, ma'cos, Mac Pro, Objective-C, OS ff, QuickType, Safari, Sri, sll'i Remote, Spotlight, Touch ID, TrueDepth, watchGS, and Kcode are trademarks nf Apple Inc., registered in the U.S, and other ootuntrfas, Apple Basks, Apple Wallet, HealthKit, HomeKit, HomaPod, SiriKit, Touch Bar, and tvOS,ara trademarks of Apple
Inc. AppleCare, App Store, iCloud, iCloud Drive, iCloud Keychain, and iTunes Store are service marks of Apple Inc., regfstered 'fn the U.S. and ot'her countries. IOS fs a tra'deme'rk or registered trademark of Cisco in the U.S. and other countries and is used under license. The Bluetoothan word mark and logos are registered trademarks owned by Bluetooth Sif3, Inc. and any use of such marks by Apple. is under license,
Java is a registered trademark of Oracle and/or its aff'iliates. UNIX® is a registered trademark of The Open Group. Other product and company, names ment'ioned herein mayt be trademarks of their respective companies. Product specifications are subject to change without n'otica. Apple One Apple. Park Way Cupertino, CA 95014 USA apple.corn 028-00309
Apple Platform Security
CONFIDENTIAL

